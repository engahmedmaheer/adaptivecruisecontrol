
FreeRTOS_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800dc50  0800dc50  0001dc50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e20c  0800e20c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e20c  0800e20c  0001e20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e214  0800e214  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e214  0800e214  0001e214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e218  0800e218  0001e218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e21c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014548  200001f4  0800e410  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001473c  0800e410  0002473c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7c6  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c8c  00000000  00000000  0003c9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00040678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001648  00000000  00000000  00041e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b8d  00000000  00000000  000434b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b7ab  00000000  00000000  0006903d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2294  00000000  00000000  000847e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166a7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007880  00000000  00000000  00166acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dc38 	.word	0x0800dc38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800dc38 	.word	0x0800dc38

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20013154 	.word	0x20013154

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2uiz>:
 8000c38:	004a      	lsls	r2, r1, #1
 8000c3a:	d211      	bcs.n	8000c60 <__aeabi_d2uiz+0x28>
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d211      	bcs.n	8000c66 <__aeabi_d2uiz+0x2e>
 8000c42:	d50d      	bpl.n	8000c60 <__aeabi_d2uiz+0x28>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d40e      	bmi.n	8000c6c <__aeabi_d2uiz+0x34>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_d2uiz+0x3a>
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2f>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c80:	bf24      	itt	cs
 8000c82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c8a:	d90d      	bls.n	8000ca8 <__aeabi_d2f+0x30>
 8000c8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cac:	d121      	bne.n	8000cf2 <__aeabi_d2f+0x7a>
 8000cae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cb2:	bfbc      	itt	lt
 8000cb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	4770      	bxlt	lr
 8000cba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cc2:	f1c2 0218 	rsb	r2, r2, #24
 8000cc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cce:	fa20 f002 	lsr.w	r0, r0, r2
 8000cd2:	bf18      	it	ne
 8000cd4:	f040 0001 	orrne.w	r0, r0, #1
 8000cd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ce0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ce4:	ea40 000c 	orr.w	r0, r0, ip
 8000ce8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cf0:	e7cc      	b.n	8000c8c <__aeabi_d2f+0x14>
 8000cf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cf6:	d107      	bne.n	8000d08 <__aeabi_d2f+0x90>
 8000cf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d06:	4770      	bxne	lr
 8000d08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <__aeabi_uldivmod>:
 8000d18:	b953      	cbnz	r3, 8000d30 <__aeabi_uldivmod+0x18>
 8000d1a:	b94a      	cbnz	r2, 8000d30 <__aeabi_uldivmod+0x18>
 8000d1c:	2900      	cmp	r1, #0
 8000d1e:	bf08      	it	eq
 8000d20:	2800      	cmpeq	r0, #0
 8000d22:	bf1c      	itt	ne
 8000d24:	f04f 31ff 	movne.w	r1, #4294967295
 8000d28:	f04f 30ff 	movne.w	r0, #4294967295
 8000d2c:	f000 b9aa 	b.w	8001084 <__aeabi_idiv0>
 8000d30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d38:	f000 f83c 	bl	8000db4 <__udivmoddi4>
 8000d3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d44:	b004      	add	sp, #16
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_d2lz>:
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	4604      	mov	r4, r0
 8000d50:	460d      	mov	r5, r1
 8000d52:	f7ff ff33 	bl	8000bbc <__aeabi_dcmplt>
 8000d56:	b928      	cbnz	r0, 8000d64 <__aeabi_d2lz+0x1c>
 8000d58:	4620      	mov	r0, r4
 8000d5a:	4629      	mov	r1, r5
 8000d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d60:	f000 b80a 	b.w	8000d78 <__aeabi_d2ulz>
 8000d64:	4620      	mov	r0, r4
 8000d66:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d6a:	f000 f805 	bl	8000d78 <__aeabi_d2ulz>
 8000d6e:	4240      	negs	r0, r0
 8000d70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d74:	bd38      	pop	{r3, r4, r5, pc}
 8000d76:	bf00      	nop

08000d78 <__aeabi_d2ulz>:
 8000d78:	b5d0      	push	{r4, r6, r7, lr}
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__aeabi_d2ulz+0x34>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4606      	mov	r6, r0
 8000d80:	460f      	mov	r7, r1
 8000d82:	f7ff fca9 	bl	80006d8 <__aeabi_dmul>
 8000d86:	f7ff ff57 	bl	8000c38 <__aeabi_d2uiz>
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	f7ff fc2a 	bl	80005e4 <__aeabi_ui2d>
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <__aeabi_d2ulz+0x38>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	f7ff fca0 	bl	80006d8 <__aeabi_dmul>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	4639      	mov	r1, r7
 8000da0:	f7ff fae2 	bl	8000368 <__aeabi_dsub>
 8000da4:	f7ff ff48 	bl	8000c38 <__aeabi_d2uiz>
 8000da8:	4621      	mov	r1, r4
 8000daa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dac:	3df00000 	.word	0x3df00000
 8000db0:	41f00000 	.word	0x41f00000

08000db4 <__udivmoddi4>:
 8000db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db8:	9d08      	ldr	r5, [sp, #32]
 8000dba:	4604      	mov	r4, r0
 8000dbc:	468e      	mov	lr, r1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d14d      	bne.n	8000e5e <__udivmoddi4+0xaa>
 8000dc2:	428a      	cmp	r2, r1
 8000dc4:	4694      	mov	ip, r2
 8000dc6:	d969      	bls.n	8000e9c <__udivmoddi4+0xe8>
 8000dc8:	fab2 f282 	clz	r2, r2
 8000dcc:	b152      	cbz	r2, 8000de4 <__udivmoddi4+0x30>
 8000dce:	fa01 f302 	lsl.w	r3, r1, r2
 8000dd2:	f1c2 0120 	rsb	r1, r2, #32
 8000dd6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dda:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dde:	ea41 0e03 	orr.w	lr, r1, r3
 8000de2:	4094      	lsls	r4, r2
 8000de4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de8:	0c21      	lsrs	r1, r4, #16
 8000dea:	fbbe f6f8 	udiv	r6, lr, r8
 8000dee:	fa1f f78c 	uxth.w	r7, ip
 8000df2:	fb08 e316 	mls	r3, r8, r6, lr
 8000df6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dfa:	fb06 f107 	mul.w	r1, r6, r7
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x64>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e0a:	f080 811f 	bcs.w	800104c <__udivmoddi4+0x298>
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	f240 811c 	bls.w	800104c <__udivmoddi4+0x298>
 8000e14:	3e02      	subs	r6, #2
 8000e16:	4463      	add	r3, ip
 8000e18:	1a5b      	subs	r3, r3, r1
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e28:	fb00 f707 	mul.w	r7, r0, r7
 8000e2c:	42a7      	cmp	r7, r4
 8000e2e:	d90a      	bls.n	8000e46 <__udivmoddi4+0x92>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	f080 810a 	bcs.w	8001050 <__udivmoddi4+0x29c>
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	f240 8107 	bls.w	8001050 <__udivmoddi4+0x29c>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e4a:	1be4      	subs	r4, r4, r7
 8000e4c:	2600      	movs	r6, #0
 8000e4e:	b11d      	cbz	r5, 8000e58 <__udivmoddi4+0xa4>
 8000e50:	40d4      	lsrs	r4, r2
 8000e52:	2300      	movs	r3, #0
 8000e54:	e9c5 4300 	strd	r4, r3, [r5]
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d909      	bls.n	8000e76 <__udivmoddi4+0xc2>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	f000 80ef 	beq.w	8001046 <__udivmoddi4+0x292>
 8000e68:	2600      	movs	r6, #0
 8000e6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6e:	4630      	mov	r0, r6
 8000e70:	4631      	mov	r1, r6
 8000e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e76:	fab3 f683 	clz	r6, r3
 8000e7a:	2e00      	cmp	r6, #0
 8000e7c:	d14a      	bne.n	8000f14 <__udivmoddi4+0x160>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d302      	bcc.n	8000e88 <__udivmoddi4+0xd4>
 8000e82:	4282      	cmp	r2, r0
 8000e84:	f200 80f9 	bhi.w	800107a <__udivmoddi4+0x2c6>
 8000e88:	1a84      	subs	r4, r0, r2
 8000e8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e8e:	2001      	movs	r0, #1
 8000e90:	469e      	mov	lr, r3
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	d0e0      	beq.n	8000e58 <__udivmoddi4+0xa4>
 8000e96:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e9a:	e7dd      	b.n	8000e58 <__udivmoddi4+0xa4>
 8000e9c:	b902      	cbnz	r2, 8000ea0 <__udivmoddi4+0xec>
 8000e9e:	deff      	udf	#255	; 0xff
 8000ea0:	fab2 f282 	clz	r2, r2
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	f040 8092 	bne.w	8000fce <__udivmoddi4+0x21a>
 8000eaa:	eba1 010c 	sub.w	r1, r1, ip
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2601      	movs	r6, #1
 8000eb8:	0c20      	lsrs	r0, r4, #16
 8000eba:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ebe:	fb07 1113 	mls	r1, r7, r3, r1
 8000ec2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec6:	fb0e f003 	mul.w	r0, lr, r3
 8000eca:	4288      	cmp	r0, r1
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x12c>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x12a>
 8000ed8:	4288      	cmp	r0, r1
 8000eda:	f200 80cb 	bhi.w	8001074 <__udivmoddi4+0x2c0>
 8000ede:	4643      	mov	r3, r8
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x156>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x154>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80bb 	bhi.w	800107e <__udivmoddi4+0x2ca>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f12:	e79c      	b.n	8000e4e <__udivmoddi4+0x9a>
 8000f14:	f1c6 0720 	rsb	r7, r6, #32
 8000f18:	40b3      	lsls	r3, r6
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa20 f407 	lsr.w	r4, r0, r7
 8000f26:	fa01 f306 	lsl.w	r3, r1, r6
 8000f2a:	431c      	orrs	r4, r3
 8000f2c:	40f9      	lsrs	r1, r7
 8000f2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f32:	fa00 f306 	lsl.w	r3, r0, r6
 8000f36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f3a:	0c20      	lsrs	r0, r4, #16
 8000f3c:	fa1f fe8c 	uxth.w	lr, ip
 8000f40:	fb09 1118 	mls	r1, r9, r8, r1
 8000f44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f48:	fb08 f00e 	mul.w	r0, r8, lr
 8000f4c:	4288      	cmp	r0, r1
 8000f4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b8>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8088 	bcs.w	8001070 <__udivmoddi4+0x2bc>
 8000f60:	4288      	cmp	r0, r1
 8000f62:	f240 8085 	bls.w	8001070 <__udivmoddi4+0x2bc>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	1a09      	subs	r1, r1, r0
 8000f6e:	b2a4      	uxth	r4, r4
 8000f70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f74:	fb09 1110 	mls	r1, r9, r0, r1
 8000f78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f80:	458e      	cmp	lr, r1
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1e2>
 8000f84:	eb1c 0101 	adds.w	r1, ip, r1
 8000f88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f8c:	d26c      	bcs.n	8001068 <__udivmoddi4+0x2b4>
 8000f8e:	458e      	cmp	lr, r1
 8000f90:	d96a      	bls.n	8001068 <__udivmoddi4+0x2b4>
 8000f92:	3802      	subs	r0, #2
 8000f94:	4461      	add	r1, ip
 8000f96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f9e:	eba1 010e 	sub.w	r1, r1, lr
 8000fa2:	42a1      	cmp	r1, r4
 8000fa4:	46c8      	mov	r8, r9
 8000fa6:	46a6      	mov	lr, r4
 8000fa8:	d356      	bcc.n	8001058 <__udivmoddi4+0x2a4>
 8000faa:	d053      	beq.n	8001054 <__udivmoddi4+0x2a0>
 8000fac:	b15d      	cbz	r5, 8000fc6 <__udivmoddi4+0x212>
 8000fae:	ebb3 0208 	subs.w	r2, r3, r8
 8000fb2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fb6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fba:	fa22 f306 	lsr.w	r3, r2, r6
 8000fbe:	40f1      	lsrs	r1, r6
 8000fc0:	431f      	orrs	r7, r3
 8000fc2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fc6:	2600      	movs	r6, #0
 8000fc8:	4631      	mov	r1, r6
 8000fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fce:	f1c2 0320 	rsb	r3, r2, #32
 8000fd2:	40d8      	lsrs	r0, r3
 8000fd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fdc:	4091      	lsls	r1, r2
 8000fde:	4301      	orrs	r1, r0
 8000fe0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe4:	fa1f fe8c 	uxth.w	lr, ip
 8000fe8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fec:	fb07 3610 	mls	r6, r7, r0, r3
 8000ff0:	0c0b      	lsrs	r3, r1, #16
 8000ff2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ff6:	fb00 f60e 	mul.w	r6, r0, lr
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	fa04 f402 	lsl.w	r4, r4, r2
 8001000:	d908      	bls.n	8001014 <__udivmoddi4+0x260>
 8001002:	eb1c 0303 	adds.w	r3, ip, r3
 8001006:	f100 38ff 	add.w	r8, r0, #4294967295
 800100a:	d22f      	bcs.n	800106c <__udivmoddi4+0x2b8>
 800100c:	429e      	cmp	r6, r3
 800100e:	d92d      	bls.n	800106c <__udivmoddi4+0x2b8>
 8001010:	3802      	subs	r0, #2
 8001012:	4463      	add	r3, ip
 8001014:	1b9b      	subs	r3, r3, r6
 8001016:	b289      	uxth	r1, r1
 8001018:	fbb3 f6f7 	udiv	r6, r3, r7
 800101c:	fb07 3316 	mls	r3, r7, r6, r3
 8001020:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001024:	fb06 f30e 	mul.w	r3, r6, lr
 8001028:	428b      	cmp	r3, r1
 800102a:	d908      	bls.n	800103e <__udivmoddi4+0x28a>
 800102c:	eb1c 0101 	adds.w	r1, ip, r1
 8001030:	f106 38ff 	add.w	r8, r6, #4294967295
 8001034:	d216      	bcs.n	8001064 <__udivmoddi4+0x2b0>
 8001036:	428b      	cmp	r3, r1
 8001038:	d914      	bls.n	8001064 <__udivmoddi4+0x2b0>
 800103a:	3e02      	subs	r6, #2
 800103c:	4461      	add	r1, ip
 800103e:	1ac9      	subs	r1, r1, r3
 8001040:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001044:	e738      	b.n	8000eb8 <__udivmoddi4+0x104>
 8001046:	462e      	mov	r6, r5
 8001048:	4628      	mov	r0, r5
 800104a:	e705      	b.n	8000e58 <__udivmoddi4+0xa4>
 800104c:	4606      	mov	r6, r0
 800104e:	e6e3      	b.n	8000e18 <__udivmoddi4+0x64>
 8001050:	4618      	mov	r0, r3
 8001052:	e6f8      	b.n	8000e46 <__udivmoddi4+0x92>
 8001054:	454b      	cmp	r3, r9
 8001056:	d2a9      	bcs.n	8000fac <__udivmoddi4+0x1f8>
 8001058:	ebb9 0802 	subs.w	r8, r9, r2
 800105c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001060:	3801      	subs	r0, #1
 8001062:	e7a3      	b.n	8000fac <__udivmoddi4+0x1f8>
 8001064:	4646      	mov	r6, r8
 8001066:	e7ea      	b.n	800103e <__udivmoddi4+0x28a>
 8001068:	4620      	mov	r0, r4
 800106a:	e794      	b.n	8000f96 <__udivmoddi4+0x1e2>
 800106c:	4640      	mov	r0, r8
 800106e:	e7d1      	b.n	8001014 <__udivmoddi4+0x260>
 8001070:	46d0      	mov	r8, sl
 8001072:	e77b      	b.n	8000f6c <__udivmoddi4+0x1b8>
 8001074:	3b02      	subs	r3, #2
 8001076:	4461      	add	r1, ip
 8001078:	e732      	b.n	8000ee0 <__udivmoddi4+0x12c>
 800107a:	4630      	mov	r0, r6
 800107c:	e709      	b.n	8000e92 <__udivmoddi4+0xde>
 800107e:	4464      	add	r4, ip
 8001080:	3802      	subs	r0, #2
 8001082:	e742      	b.n	8000f0a <__udivmoddi4+0x156>

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800108e:	f000 fe1d 	bl	8001ccc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001092:	f000 f8a3 	bl	80011dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001096:	f000 f9db 	bl	8001450 <MX_GPIO_Init>
	MX_TIM1_Init();
 800109a:	f000 f90d 	bl	80012b8 <MX_TIM1_Init>
	MX_USART3_UART_Init();
 800109e:	f000 f9ad 	bl	80013fc <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	/*Enable CYCLE COUNT REG OF CPU*/

	DWT_CTRL |=1 ;
 80010a2:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <main+0x118>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a3e      	ldr	r2, [pc, #248]	; (80011a0 <main+0x118>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6013      	str	r3, [r2, #0]

	/*For SEGGER SYSVIEW TRACE*/

	SEGGER_UART_init(250000);
 80010ae:	483d      	ldr	r0, [pc, #244]	; (80011a4 <main+0x11c>)
 80010b0:	f006 febc 	bl	8007e2c <SEGGER_UART_init>

	/*CONFIG SYSVIEW */
	SEGGER_SYSVIEW_Conf();
 80010b4:	f006 fce4 	bl	8007a80 <SEGGER_SYSVIEW_Conf>


	Local_Statue= xTaskCreate(SystemWakeUp, "SystemWakeUp", 200, NULL, 2, &SystemWakeUpHandle);
 80010b8:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <main+0x120>)
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	2302      	movs	r3, #2
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	22c8      	movs	r2, #200	; 0xc8
 80010c4:	4939      	ldr	r1, [pc, #228]	; (80011ac <main+0x124>)
 80010c6:	483a      	ldr	r0, [pc, #232]	; (80011b0 <main+0x128>)
 80010c8:	f004 fc68 	bl	800599c <xTaskCreate>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a39      	ldr	r2, [pc, #228]	; (80011b4 <main+0x12c>)
 80010d0:	6013      	str	r3, [r2, #0]

	configASSERT(Local_Statue == pdPASS);
 80010d2:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <main+0x12c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d00a      	beq.n	80010f0 <main+0x68>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80010da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010de:	f383 8811 	msr	BASEPRI, r3
 80010e2:	f3bf 8f6f 	isb	sy
 80010e6:	f3bf 8f4f 	dsb	sy
 80010ea:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80010ec:	bf00      	nop
 80010ee:	e7fe      	b.n	80010ee <main+0x66>

	Local_Statue= xTaskCreate(StartEngine, "StartEngine", 200, NULL, 2, &StartEngineHandle);
 80010f0:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <main+0x130>)
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	2302      	movs	r3, #2
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2300      	movs	r3, #0
 80010fa:	22c8      	movs	r2, #200	; 0xc8
 80010fc:	492f      	ldr	r1, [pc, #188]	; (80011bc <main+0x134>)
 80010fe:	4830      	ldr	r0, [pc, #192]	; (80011c0 <main+0x138>)
 8001100:	f004 fc4c 	bl	800599c <xTaskCreate>
 8001104:	4603      	mov	r3, r0
 8001106:	4a2b      	ldr	r2, [pc, #172]	; (80011b4 <main+0x12c>)
 8001108:	6013      	str	r3, [r2, #0]

	configASSERT(Local_Statue == pdPASS);
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <main+0x12c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d00a      	beq.n	8001128 <main+0xa0>
        __asm volatile
 8001112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001116:	f383 8811 	msr	BASEPRI, r3
 800111a:	f3bf 8f6f 	isb	sy
 800111e:	f3bf 8f4f 	dsb	sy
 8001122:	60bb      	str	r3, [r7, #8]
    }
 8001124:	bf00      	nop
 8001126:	e7fe      	b.n	8001126 <main+0x9e>

	Local_Statue= xTaskCreate(ControlSpeedTask, "ControlSpeedTask", 200, NULL, 2, &ControlSpeedHandle);
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <main+0x13c>)
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	2302      	movs	r3, #2
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2300      	movs	r3, #0
 8001132:	22c8      	movs	r2, #200	; 0xc8
 8001134:	4924      	ldr	r1, [pc, #144]	; (80011c8 <main+0x140>)
 8001136:	4825      	ldr	r0, [pc, #148]	; (80011cc <main+0x144>)
 8001138:	f004 fc30 	bl	800599c <xTaskCreate>
 800113c:	4603      	mov	r3, r0
 800113e:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <main+0x12c>)
 8001140:	6013      	str	r3, [r2, #0]

	configASSERT(Local_Statue == pdPASS);
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <main+0x12c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d00a      	beq.n	8001160 <main+0xd8>
        __asm volatile
 800114a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114e:	f383 8811 	msr	BASEPRI, r3
 8001152:	f3bf 8f6f 	isb	sy
 8001156:	f3bf 8f4f 	dsb	sy
 800115a:	607b      	str	r3, [r7, #4]
    }
 800115c:	bf00      	nop
 800115e:	e7fe      	b.n	800115e <main+0xd6>

	Local_Statue= xTaskCreate(RecievePackTask, "RecievePackTask", 200, NULL, 2, &RecievePackHandle);
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <main+0x148>)
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	2302      	movs	r3, #2
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	22c8      	movs	r2, #200	; 0xc8
 800116c:	4919      	ldr	r1, [pc, #100]	; (80011d4 <main+0x14c>)
 800116e:	481a      	ldr	r0, [pc, #104]	; (80011d8 <main+0x150>)
 8001170:	f004 fc14 	bl	800599c <xTaskCreate>
 8001174:	4603      	mov	r3, r0
 8001176:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <main+0x12c>)
 8001178:	6013      	str	r3, [r2, #0]

	configASSERT(Local_Statue == pdPASS);
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <main+0x12c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d00a      	beq.n	8001198 <main+0x110>
        __asm volatile
 8001182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001186:	f383 8811 	msr	BASEPRI, r3
 800118a:	f3bf 8f6f 	isb	sy
 800118e:	f3bf 8f4f 	dsb	sy
 8001192:	603b      	str	r3, [r7, #0]
    }
 8001194:	bf00      	nop
 8001196:	e7fe      	b.n	8001196 <main+0x10e>


	vTaskStartScheduler();
 8001198:	f004 fd88 	bl	8005cac <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800119c:	e7fe      	b.n	800119c <main+0x114>
 800119e:	bf00      	nop
 80011a0:	e0001000 	.word	0xe0001000
 80011a4:	0003d090 	.word	0x0003d090
 80011a8:	2000029c 	.word	0x2000029c
 80011ac:	0800dc50 	.word	0x0800dc50
 80011b0:	08001589 	.word	0x08001589
 80011b4:	200002ac 	.word	0x200002ac
 80011b8:	200002a0 	.word	0x200002a0
 80011bc:	0800dc60 	.word	0x0800dc60
 80011c0:	080015d9 	.word	0x080015d9
 80011c4:	200002a4 	.word	0x200002a4
 80011c8:	0800dc6c 	.word	0x0800dc6c
 80011cc:	0800160d 	.word	0x0800160d
 80011d0:	200002a8 	.word	0x200002a8
 80011d4:	0800dc80 	.word	0x0800dc80
 80011d8:	080017d5 	.word	0x080017d5

080011dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
 80011e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	2234      	movs	r2, #52	; 0x34
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f009 fa12 	bl	800a614 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <SystemClock_Config+0xd4>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a29      	ldr	r2, [pc, #164]	; (80012b0 <SystemClock_Config+0xd4>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <SystemClock_Config+0xd4>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <SystemClock_Config+0xd8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001228:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <SystemClock_Config+0xd8>)
 800122a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <SystemClock_Config+0xd8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800123c:	2302      	movs	r3, #2
 800123e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001244:	2310      	movs	r3, #16
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800124c:	2300      	movs	r3, #0
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001250:	2308      	movs	r3, #8
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 8001254:	2340      	movs	r3, #64	; 0x40
 8001256:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001258:	2302      	movs	r3, #2
 800125a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800125c:	2302      	movs	r3, #2
 800125e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fc33 	bl	8002ad4 <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001274:	f000 face 	bl	8001814 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2302      	movs	r3, #2
 800127e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001280:	2390      	movs	r3, #144	; 0x90
 8001282:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f001 f8a0 	bl	80023dc <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xca>
	{
		Error_Handler();
 80012a2:	f000 fab7 	bl	8001814 <Error_Handler>
	}
}
 80012a6:	bf00      	nop
 80012a8:	3750      	adds	r7, #80	; 0x50
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000

080012b8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b096      	sub	sp, #88	; 0x58
 80012bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2220      	movs	r2, #32
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f009 f98f 	bl	800a614 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80012f6:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <MX_TIM1_Init+0x13c>)
 80012f8:	4a3f      	ldr	r2, [pc, #252]	; (80013f8 <MX_TIM1_Init+0x140>)
 80012fa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 15;
 80012fc:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <MX_TIM1_Init+0x13c>)
 80012fe:	220f      	movs	r2, #15
 8001300:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <MX_TIM1_Init+0x13c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 20000;
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <MX_TIM1_Init+0x13c>)
 800130a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800130e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <MX_TIM1_Init+0x13c>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001316:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <MX_TIM1_Init+0x13c>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131c:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <MX_TIM1_Init+0x13c>)
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001322:	4834      	ldr	r0, [pc, #208]	; (80013f4 <MX_TIM1_Init+0x13c>)
 8001324:	f001 fe74 	bl	8003010 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 800132e:	f000 fa71 	bl	8001814 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001336:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800133c:	4619      	mov	r1, r3
 800133e:	482d      	ldr	r0, [pc, #180]	; (80013f4 <MX_TIM1_Init+0x13c>)
 8001340:	f002 fa12 	bl	8003768 <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 800134a:	f000 fa63 	bl	8001814 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800134e:	4829      	ldr	r0, [pc, #164]	; (80013f4 <MX_TIM1_Init+0x13c>)
 8001350:	f001 ff1e 	bl	8003190 <HAL_TIM_PWM_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 800135a:	f000 fa5b 	bl	8001814 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001366:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800136a:	4619      	mov	r1, r3
 800136c:	4821      	ldr	r0, [pc, #132]	; (80013f4 <MX_TIM1_Init+0x13c>)
 800136e:	f002 fdfb 	bl	8003f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8001378:	f000 fa4c 	bl	8001814 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137c:	2360      	movs	r3, #96	; 0x60
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 43750;
 8001380:	f64a 23e6 	movw	r3, #43750	; 0xaae6
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800138e:	2304      	movs	r3, #4
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	2200      	movs	r2, #0
 80013a0:	4619      	mov	r1, r3
 80013a2:	4814      	ldr	r0, [pc, #80]	; (80013f4 <MX_TIM1_Init+0x13c>)
 80013a4:	f002 f91e 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM1_Init+0xfa>
	{
		Error_Handler();
 80013ae:	f000 fa31 	bl	8001814 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ca:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4807      	ldr	r0, [pc, #28]	; (80013f4 <MX_TIM1_Init+0x13c>)
 80013d6:	f002 fe43 	bl	8004060 <HAL_TIMEx_ConfigBreakDeadTime>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0x12c>
	{
		Error_Handler();
 80013e0:	f000 fa18 	bl	8001814 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <MX_TIM1_Init+0x13c>)
 80013e6:	f000 fa65 	bl	80018b4 <HAL_TIM_MspPostInit>

}
 80013ea:	bf00      	nop
 80013ec:	3758      	adds	r7, #88	; 0x58
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000210 	.word	0x20000210
 80013f8:	40010000 	.word	0x40010000

080013fc <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_USART3_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001408:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800140c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001434:	f002 fe7a 	bl	800412c <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800143e:	f000 f9e9 	bl	8001814 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000258 	.word	0x20000258
 800144c:	40004800 	.word	0x40004800

08001450 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <MX_GPIO_Init+0x12c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a43      	ldr	r2, [pc, #268]	; (800157c <MX_GPIO_Init+0x12c>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <MX_GPIO_Init+0x12c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b3d      	ldr	r3, [pc, #244]	; (800157c <MX_GPIO_Init+0x12c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a3c      	ldr	r2, [pc, #240]	; (800157c <MX_GPIO_Init+0x12c>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <MX_GPIO_Init+0x12c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b36      	ldr	r3, [pc, #216]	; (800157c <MX_GPIO_Init+0x12c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a35      	ldr	r2, [pc, #212]	; (800157c <MX_GPIO_Init+0x12c>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b33      	ldr	r3, [pc, #204]	; (800157c <MX_GPIO_Init+0x12c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b2f      	ldr	r3, [pc, #188]	; (800157c <MX_GPIO_Init+0x12c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a2e      	ldr	r2, [pc, #184]	; (800157c <MX_GPIO_Init+0x12c>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b2c      	ldr	r3, [pc, #176]	; (800157c <MX_GPIO_Init+0x12c>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2120      	movs	r1, #32
 80014da:	4829      	ldr	r0, [pc, #164]	; (8001580 <MX_GPIO_Init+0x130>)
 80014dc:	f000 ff40 	bl	8002360 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80014e6:	4827      	ldr	r0, [pc, #156]	; (8001584 <MX_GPIO_Init+0x134>)
 80014e8:	f000 ff3a 	bl	8002360 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80014ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4820      	ldr	r0, [pc, #128]	; (8001584 <MX_GPIO_Init+0x134>)
 8001504:	f000 fd98 	bl	8002038 <HAL_GPIO_Init>

	/*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
	GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001508:	230c      	movs	r3, #12
 800150a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001518:	2307      	movs	r3, #7
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4817      	ldr	r0, [pc, #92]	; (8001580 <MX_GPIO_Init+0x130>)
 8001524:	f000 fd88 	bl	8002038 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001528:	2320      	movs	r3, #32
 800152a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4810      	ldr	r0, [pc, #64]	; (8001580 <MX_GPIO_Init+0x130>)
 8001540:	f000 fd7a 	bl	8002038 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8001544:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8001548:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <MX_GPIO_Init+0x134>)
 800155e:	f000 fd6b 	bl	8002038 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2106      	movs	r1, #6
 8001566:	2028      	movs	r0, #40	; 0x28
 8001568:	f000 fcaa 	bl	8001ec0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800156c:	2028      	movs	r0, #40	; 0x28
 800156e:	f000 fcc3 	bl	8001ef8 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020800 	.word	0x40020800

08001588 <SystemWakeUp>:

/* USER CODE BEGIN 4 */
void SystemWakeUp(void* parameters)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af02      	add	r7, sp, #8
 800158e:	6078      	str	r0, [r7, #4]
	xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(portMAX_DELAY));
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <SystemWakeUp+0x40>)
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2000      	movs	r0, #0
 800159c:	f005 f940 	bl	8006820 <xTaskGenericNotifyWait>
	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("SystemWakeUp");
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <SystemWakeUp+0x44>)
 80015a2:	f008 ff3f 	bl	800a424 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_UART_Transmit(&huart3, &GlobalStart, 1, HAL_MAX_DELAY);
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	2201      	movs	r2, #1
 80015ac:	4908      	ldr	r1, [pc, #32]	; (80015d0 <SystemWakeUp+0x48>)
 80015ae:	4809      	ldr	r0, [pc, #36]	; (80015d4 <SystemWakeUp+0x4c>)
 80015b0:	f002 fe09 	bl	80041c6 <HAL_UART_Transmit>

		xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(portMAX_DELAY));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SystemWakeUp+0x40>)
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2300      	movs	r3, #0
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2000      	movs	r0, #0
 80015c0:	f005 f92e 	bl	8006820 <xTaskGenericNotifyWait>
		SEGGER_SYSVIEW_PrintfTarget("SystemWakeUp");
 80015c4:	e7ec      	b.n	80015a0 <SystemWakeUp+0x18>
 80015c6:	bf00      	nop
 80015c8:	00418936 	.word	0x00418936
 80015cc:	0800dc50 	.word	0x0800dc50
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000258 	.word	0x20000258

080015d8 <StartEngine>:
	vTaskDelete(NULL);


}
void StartEngine(void* parameters)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af02      	add	r7, sp, #8
 80015de:	6078      	str	r0, [r7, #4]

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("StartEngine Task");
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <StartEngine+0x28>)
 80015e2:	f008 ff1f 	bl	800a424 <SEGGER_SYSVIEW_PrintfTarget>

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015e6:	2100      	movs	r1, #0
 80015e8:	4806      	ldr	r0, [pc, #24]	; (8001604 <StartEngine+0x2c>)
 80015ea:	f001 fe2b 	bl	8003244 <HAL_TIM_PWM_Start>

		xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(portMAX_DELAY));
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <StartEngine+0x30>)
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2300      	movs	r3, #0
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	2000      	movs	r0, #0
 80015fa:	f005 f911 	bl	8006820 <xTaskGenericNotifyWait>
		SEGGER_SYSVIEW_PrintfTarget("StartEngine Task");
 80015fe:	e7ef      	b.n	80015e0 <StartEngine+0x8>
 8001600:	0800dc90 	.word	0x0800dc90
 8001604:	20000210 	.word	0x20000210
 8001608:	00418936 	.word	0x00418936

0800160c <ControlSpeedTask>:
	}
	vTaskDelete(NULL);

}
void ControlSpeedTask(void* parameters)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af02      	add	r7, sp, #8
 8001612:	6078      	str	r0, [r7, #4]
	xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(portMAX_DELAY));
 8001614:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <ControlSpeedTask+0xf8>)
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2300      	movs	r3, #0
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	2000      	movs	r0, #0
 8001620:	f005 f8fe 	bl	8006820 <xTaskGenericNotifyWait>
	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("ControlSpeedTask");
 8001624:	4838      	ldr	r0, [pc, #224]	; (8001708 <ControlSpeedTask+0xfc>)
 8001626:	f008 fefd 	bl	800a424 <SEGGER_SYSVIEW_PrintfTarget>
		if(Distance > 10 )
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <ControlSpeedTask+0x100>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b0a      	cmp	r3, #10
 8001630:	d917      	bls.n	8001662 <ControlSpeedTask+0x56>
		{
			if(counter = 1)
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <ControlSpeedTask+0x104>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
			{
				counter = 0 ;
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <ControlSpeedTask+0x104>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800163e:	2100      	movs	r1, #0
 8001640:	4834      	ldr	r0, [pc, #208]	; (8001714 <ControlSpeedTask+0x108>)
 8001642:	f001 fdff 	bl	8003244 <HAL_TIM_PWM_Start>
			}

			// Change Pulse Value

			__HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_1 , 15000 );
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <ControlSpeedTask+0x108>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800164e:	635a      	str	r2, [r3, #52]	; 0x34

			xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(portMAX_DELAY));
 8001650:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <ControlSpeedTask+0xf8>)
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2300      	movs	r3, #0
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2000      	movs	r0, #0
 800165c:	f005 f8e0 	bl	8006820 <xTaskGenericNotifyWait>
 8001660:	e7e0      	b.n	8001624 <ControlSpeedTask+0x18>
		}
		else if(Distance < 10 && Distance >7)
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <ControlSpeedTask+0x100>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b09      	cmp	r3, #9
 8001668:	d81b      	bhi.n	80016a2 <ControlSpeedTask+0x96>
 800166a:	4b28      	ldr	r3, [pc, #160]	; (800170c <ControlSpeedTask+0x100>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b07      	cmp	r3, #7
 8001670:	d917      	bls.n	80016a2 <ControlSpeedTask+0x96>
		{
			if(counter = 1)
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <ControlSpeedTask+0x104>)
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
			{
				counter = 0 ;
 8001678:	4b25      	ldr	r3, [pc, #148]	; (8001710 <ControlSpeedTask+0x104>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800167e:	2100      	movs	r1, #0
 8001680:	4824      	ldr	r0, [pc, #144]	; (8001714 <ControlSpeedTask+0x108>)
 8001682:	f001 fddf 	bl	8003244 <HAL_TIM_PWM_Start>
			}

			// Change Pulse Value

			__HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_1 , 10000 );
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <ControlSpeedTask+0x108>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f242 7210 	movw	r2, #10000	; 0x2710
 800168e:	635a      	str	r2, [r3, #52]	; 0x34

			xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(portMAX_DELAY));
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <ControlSpeedTask+0xf8>)
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2300      	movs	r3, #0
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	2000      	movs	r0, #0
 800169c:	f005 f8c0 	bl	8006820 <xTaskGenericNotifyWait>
 80016a0:	e02e      	b.n	8001700 <ControlSpeedTask+0xf4>
		}
		else if(Distance < 7 && Distance >5)
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <ControlSpeedTask+0x100>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d81b      	bhi.n	80016e2 <ControlSpeedTask+0xd6>
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <ControlSpeedTask+0x100>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d917      	bls.n	80016e2 <ControlSpeedTask+0xd6>
		{
			if(counter = 1)
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <ControlSpeedTask+0x104>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
			{
				counter = 0 ;
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <ControlSpeedTask+0x104>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016be:	2100      	movs	r1, #0
 80016c0:	4814      	ldr	r0, [pc, #80]	; (8001714 <ControlSpeedTask+0x108>)
 80016c2:	f001 fdbf 	bl	8003244 <HAL_TIM_PWM_Start>
			}

			// Change Pulse Value
			__HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_1 , 5000 );
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <ControlSpeedTask+0x108>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34

			xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(portMAX_DELAY));
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <ControlSpeedTask+0xf8>)
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2300      	movs	r3, #0
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2000      	movs	r0, #0
 80016dc:	f005 f8a0 	bl	8006820 <xTaskGenericNotifyWait>
 80016e0:	e00e      	b.n	8001700 <ControlSpeedTask+0xf4>

		}
		else if(Distance < 5 && Distance > 0 )
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <ControlSpeedTask+0x100>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d89c      	bhi.n	8001624 <ControlSpeedTask+0x18>
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <ControlSpeedTask+0x100>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d098      	beq.n	8001624 <ControlSpeedTask+0x18>
		{
			/*Motor Stop*/

			__HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_1 , 0 );
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <ControlSpeedTask+0x108>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
			counter=1;
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <ControlSpeedTask+0x104>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfTarget("ControlSpeedTask");
 8001700:	e790      	b.n	8001624 <ControlSpeedTask+0x18>
 8001702:	bf00      	nop
 8001704:	00418936 	.word	0x00418936
 8001708:	0800dc6c 	.word	0x0800dc6c
 800170c:	200002b1 	.word	0x200002b1
 8001710:	200002b0 	.word	0x200002b0
 8001714:	20000210 	.word	0x20000210

08001718 <ButtonTaskHandler>:
	}
	vTaskDelete(NULL);
}

void ButtonTaskHandler(void* parameters)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af02      	add	r7, sp, #8
 800171e:	6078      	str	r0, [r7, #4]

	//SEGGER_SYSVIEW_PrintfTarget("Button Task");

	BaseType_t HigherPriorityTaskWoken ;

	traceISR_ENTER();
 8001720:	f008 fc2e 	bl	8009f80 <SEGGER_SYSVIEW_RecordEnterISR>

	xTaskNotifyFromISR(SystemWakeUpHandle , 0 , eNoAction , &HigherPriorityTaskWoken);
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <ButtonTaskHandler+0x48>)
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	2300      	movs	r3, #0
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2300      	movs	r3, #0
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	f005 f8fa 	bl	8006930 <xTaskGenericNotifyFromISR>

	portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <ButtonTaskHandler+0x3a>
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <ButtonTaskHandler+0x4c>)
 8001744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	f3bf 8f4f 	dsb	sy
 800174e:	f3bf 8f6f 	isb	sy

	traceISR_EXIT();
 8001752:	f008 fc57 	bl	800a004 <SEGGER_SYSVIEW_RecordExitISR>

}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000029c 	.word	0x2000029c
 8001764:	e000ed04 	.word	0xe000ed04

08001768 <HAL_UART_RxCpltCallback>:

HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af02      	add	r7, sp, #8
 800176e:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <HAL_UART_RxCpltCallback+0x58>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d11e      	bne.n	80017b8 <HAL_UART_RxCpltCallback+0x50>
	{
		/*Recieve Data Packet*/
		static	BaseType_t xHigherPriorityTaskWoken ;

		if (Distance <10)
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_UART_RxCpltCallback+0x5c>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b09      	cmp	r3, #9
 8001780:	d81a      	bhi.n	80017b8 <HAL_UART_RxCpltCallback+0x50>
		{
			traceISR_ENTER();
 8001782:	f008 fbfd 	bl	8009f80 <SEGGER_SYSVIEW_RecordEnterISR>

			xTaskNotifyFromISR(ControlSpeedHandle,0 ,eNoAction ,&xHigherPriorityTaskWoken );
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_UART_RxCpltCallback+0x60>)
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_UART_RxCpltCallback+0x64>)
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	2300      	movs	r3, #0
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2300      	movs	r3, #0
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	f005 f8ca 	bl	8006930 <xTaskGenericNotifyFromISR>

			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_UART_RxCpltCallback+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d007      	beq.n	80017b4 <HAL_UART_RxCpltCallback+0x4c>
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_UART_RxCpltCallback+0x68>)
 80017a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	f3bf 8f4f 	dsb	sy
 80017b0:	f3bf 8f6f 	isb	sy

			traceISR_EXIT();
 80017b4:	f008 fc26 	bl	800a004 <SEGGER_SYSVIEW_RecordExitISR>

		}


	}
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40004800 	.word	0x40004800
 80017c4:	200002b1 	.word	0x200002b1
 80017c8:	200002a4 	.word	0x200002a4
 80017cc:	200002b4 	.word	0x200002b4
 80017d0:	e000ed04 	.word	0xe000ed04

080017d4 <RecievePackTask>:

void RecievePackTask(void* parameters)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	while(1)
	{

		HAL_UART_Receive_IT(&huart3, (uint8_t*)&Distance, sizeof(Distance));
 80017dc:	2201      	movs	r2, #1
 80017de:	4902      	ldr	r1, [pc, #8]	; (80017e8 <RecievePackTask+0x14>)
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <RecievePackTask+0x18>)
 80017e2:	f002 fd82 	bl	80042ea <HAL_UART_Receive_IT>
 80017e6:	e7f9      	b.n	80017dc <RecievePackTask+0x8>
 80017e8:	200002b1 	.word	0x200002b1
 80017ec:	20000258 	.word	0x20000258

080017f0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001802:	f000 fa85 	bl	8001d10 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40001000 	.word	0x40001000

08001814 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800181c:	e7fe      	b.n	800181c <Error_Handler+0x8>
	...

08001820 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_MspInit+0x4c>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <HAL_MspInit+0x4c>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <HAL_TIM_Base_MspInit+0x3c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10d      	bne.n	800189e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_TIM_Base_MspInit+0x40>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <HAL_TIM_Base_MspInit+0x40>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <HAL_TIM_Base_MspInit+0x40>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40010000 	.word	0x40010000
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_TIM_MspPostInit+0x68>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d11e      	bne.n	8001914 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_TIM_MspPostInit+0x6c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_TIM_MspPostInit+0x6c>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_TIM_MspPostInit+0x6c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001904:	2301      	movs	r3, #1
 8001906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	4619      	mov	r1, r3
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <HAL_TIM_MspPostInit+0x70>)
 8001910:	f000 fb92 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40010000 	.word	0x40010000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <HAL_UART_MspInit+0xd4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d153      	bne.n	80019f2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <HAL_UART_MspInit+0xd8>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a2b      	ldr	r2, [pc, #172]	; (8001a00 <HAL_UART_MspInit+0xd8>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <HAL_UART_MspInit+0xd8>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_UART_MspInit+0xd8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <HAL_UART_MspInit+0xd8>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_UART_MspInit+0xd8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <HAL_UART_MspInit+0xd8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_UART_MspInit+0xd8>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_UART_MspInit+0xd8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800199e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019b0:	2307      	movs	r3, #7
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	4812      	ldr	r0, [pc, #72]	; (8001a04 <HAL_UART_MspInit+0xdc>)
 80019bc:	f000 fb3c 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019d2:	2307      	movs	r3, #7
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	480a      	ldr	r0, [pc, #40]	; (8001a08 <HAL_UART_MspInit+0xe0>)
 80019de:	f000 fb2b 	bl	8002038 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2106      	movs	r1, #6
 80019e6:	2027      	movs	r0, #39	; 0x27
 80019e8:	f000 fa6a 	bl	8001ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019ec:	2027      	movs	r0, #39	; 0x27
 80019ee:	f000 fa83 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	; 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40004800 	.word	0x40004800
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40020800 	.word	0x40020800

08001a0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <HAL_InitTick+0xe4>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	4a32      	ldr	r2, [pc, #200]	; (8001af0 <HAL_InitTick+0xe4>)
 8001a26:	f043 0310 	orr.w	r3, r3, #16
 8001a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2c:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <HAL_InitTick+0xe4>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a38:	f107 0210 	add.w	r2, r7, #16
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fde4 	bl	8002610 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d103      	bne.n	8001a5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a52:	f000 fdb5 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8001a56:	6378      	str	r0, [r7, #52]	; 0x34
 8001a58:	e004      	b.n	8001a64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a5a:	f000 fdb1 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a66:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <HAL_InitTick+0xe8>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	0c9b      	lsrs	r3, r3, #18
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <HAL_InitTick+0xec>)
 8001a74:	4a21      	ldr	r2, [pc, #132]	; (8001afc <HAL_InitTick+0xf0>)
 8001a76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <HAL_InitTick+0xec>)
 8001a7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a80:	4a1d      	ldr	r2, [pc, #116]	; (8001af8 <HAL_InitTick+0xec>)
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_InitTick+0xec>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <HAL_InitTick+0xec>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_InitTick+0xec>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a98:	4817      	ldr	r0, [pc, #92]	; (8001af8 <HAL_InitTick+0xec>)
 8001a9a:	f001 fab9 	bl	8003010 <HAL_TIM_Base_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001aa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001aac:	4812      	ldr	r0, [pc, #72]	; (8001af8 <HAL_InitTick+0xec>)
 8001aae:	f001 faff 	bl	80030b0 <HAL_TIM_Base_Start_IT>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d111      	bne.n	8001ae4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ac0:	2036      	movs	r0, #54	; 0x36
 8001ac2:	f000 fa19 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d808      	bhi.n	8001ade <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	2036      	movs	r0, #54	; 0x36
 8001ad2:	f000 f9f5 	bl	8001ec0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_InitTick+0xf4>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e002      	b.n	8001ae4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3738      	adds	r7, #56	; 0x38
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	431bde83 	.word	0x431bde83
 8001af8:	200002b8 	.word	0x200002b8
 8001afc:	40001000 	.word	0x40001000
 8001b00:	20000008 	.word	0x20000008

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <NMI_Handler+0x4>

08001b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <HardFault_Handler+0x4>

08001b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <MemManage_Handler+0x4>

08001b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <BusFault_Handler+0x4>

08001b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <UsageFault_Handler+0x4>

08001b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <USART3_IRQHandler+0x10>)
 8001b36:	f002 fc09 	bl	800434c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000258 	.word	0x20000258

08001b44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	ButtonTaskHandler();
 8001b48:	f7ff fde6 	bl	8001718 <ButtonTaskHandler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b50:	f000 fc20 	bl	8002394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <TIM6_DAC_IRQHandler+0x10>)
 8001b5e:	f001 fc39 	bl	80033d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200002b8 	.word	0x200002b8

08001b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_kill>:

int _kill(int pid, int sig)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b86:	f008 fcfd 	bl	800a584 <__errno>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2216      	movs	r2, #22
 8001b8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_exit>:

void _exit (int status)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ffe7 	bl	8001b7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bae:	e7fe      	b.n	8001bae <_exit+0x12>

08001bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e00a      	b.n	8001bd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc2:	f3af 8000 	nop.w
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf0      	blt.n	8001bc2 <_read+0x12>
  }

  return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c12:	605a      	str	r2, [r3, #4]
  return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_isatty>:

int _isatty(int file)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <SystemInit+0x20>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <SystemInit+0x20>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c7e:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c80:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c94:	4c0b      	ldr	r4, [pc, #44]	; (8001cc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ca2:	f7ff ffd7 	bl	8001c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f008 fc73 	bl	800a590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001caa:	f7ff f9ed 	bl	8001088 <main>
  bx  lr    
 8001cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001cbc:	0800e21c 	.word	0x0800e21c
  ldr r2, =_sbss
 8001cc0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001cc4:	2001473c 	.word	0x2001473c

08001cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC_IRQHandler>
	...

08001ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <HAL_Init+0x40>)
 8001cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_Init+0x40>)
 8001ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_Init+0x40>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <HAL_Init+0x40>)
 8001cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf4:	2003      	movs	r0, #3
 8001cf6:	f000 f8d8 	bl	8001eaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfa:	200f      	movs	r0, #15
 8001cfc:	f7ff fe86 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d00:	f7ff fd8e 	bl	8001820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023c00 	.word	0x40023c00

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2000000c 	.word	0x2000000c
 8001d34:	20000300 	.word	0x20000300

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000300 	.word	0x20000300

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff4c 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed2:	f7ff ff61 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001ed6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	6978      	ldr	r0, [r7, #20]
 8001ede:	f7ff ffb1 	bl	8001e44 <NVIC_EncodePriority>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ff80 	bl	8001df0 <__NVIC_SetPriority>
}
 8001ef0:	bf00      	nop
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff54 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f22:	f7ff ff09 	bl	8001d38 <HAL_GetTick>
 8001f26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d008      	beq.n	8001f46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e052      	b.n	8001fec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0216 	bic.w	r2, r2, #22
 8001f54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <HAL_DMA_Abort+0x62>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0208 	bic.w	r2, r2, #8
 8001f84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f96:	e013      	b.n	8001fc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f98:	f7ff fece 	bl	8001d38 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d90c      	bls.n	8001fc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2203      	movs	r2, #3
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e015      	b.n	8001fec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1e4      	bne.n	8001f98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	223f      	movs	r2, #63	; 0x3f
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d004      	beq.n	8002012 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e00c      	b.n	800202c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2205      	movs	r2, #5
 8002016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0201 	bic.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e165      	b.n	8002320 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8154 	bne.w	800231a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80ae 	beq.w	800231a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <HAL_GPIO_Init+0x300>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a5c      	ldr	r2, [pc, #368]	; (8002338 <HAL_GPIO_Init+0x300>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_GPIO_Init+0x300>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a58      	ldr	r2, [pc, #352]	; (800233c <HAL_GPIO_Init+0x304>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4f      	ldr	r2, [pc, #316]	; (8002340 <HAL_GPIO_Init+0x308>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d025      	beq.n	8002252 <HAL_GPIO_Init+0x21a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4e      	ldr	r2, [pc, #312]	; (8002344 <HAL_GPIO_Init+0x30c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01f      	beq.n	800224e <HAL_GPIO_Init+0x216>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4d      	ldr	r2, [pc, #308]	; (8002348 <HAL_GPIO_Init+0x310>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d019      	beq.n	800224a <HAL_GPIO_Init+0x212>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4c      	ldr	r2, [pc, #304]	; (800234c <HAL_GPIO_Init+0x314>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0x20e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4b      	ldr	r2, [pc, #300]	; (8002350 <HAL_GPIO_Init+0x318>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00d      	beq.n	8002242 <HAL_GPIO_Init+0x20a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4a      	ldr	r2, [pc, #296]	; (8002354 <HAL_GPIO_Init+0x31c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x206>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a49      	ldr	r2, [pc, #292]	; (8002358 <HAL_GPIO_Init+0x320>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_GPIO_Init+0x202>
 8002236:	2306      	movs	r3, #6
 8002238:	e00c      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800223a:	2307      	movs	r3, #7
 800223c:	e00a      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800223e:	2305      	movs	r3, #5
 8002240:	e008      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002242:	2304      	movs	r3, #4
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002246:	2303      	movs	r3, #3
 8002248:	e004      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800224a:	2302      	movs	r3, #2
 800224c:	e002      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002252:	2300      	movs	r3, #0
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4093      	lsls	r3, r2
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002264:	4935      	ldr	r1, [pc, #212]	; (800233c <HAL_GPIO_Init+0x304>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002272:	4b3a      	ldr	r3, [pc, #232]	; (800235c <HAL_GPIO_Init+0x324>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002296:	4a31      	ldr	r2, [pc, #196]	; (800235c <HAL_GPIO_Init+0x324>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800229c:	4b2f      	ldr	r3, [pc, #188]	; (800235c <HAL_GPIO_Init+0x324>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c0:	4a26      	ldr	r2, [pc, #152]	; (800235c <HAL_GPIO_Init+0x324>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_GPIO_Init+0x324>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ea:	4a1c      	ldr	r2, [pc, #112]	; (800235c <HAL_GPIO_Init+0x324>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HAL_GPIO_Init+0x324>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_GPIO_Init+0x324>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	f67f ae96 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40013800 	.word	0x40013800
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400
 8002348:	40020800 	.word	0x40020800
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40021000 	.word	0x40021000
 8002354:	40021400 	.word	0x40021400
 8002358:	40021800 	.word	0x40021800
 800235c:	40013c00 	.word	0x40013c00

08002360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800237c:	e003      	b.n	8002386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f806 	bl	80023c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40013c00 	.word	0x40013c00

080023c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0cc      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d90c      	bls.n	8002418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b8      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800243a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b50      	ldr	r3, [pc, #320]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	494d      	ldr	r1, [pc, #308]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d044      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d119      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d003      	beq.n	800249a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002496:	2b03      	cmp	r3, #3
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e06f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e067      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4934      	ldr	r1, [pc, #208]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7ff fc34 	bl	8001d38 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7ff fc30 	bl	8001d38 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e04f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d20c      	bcs.n	8002524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e032      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4916      	ldr	r1, [pc, #88]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	490e      	ldr	r1, [pc, #56]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002562:	f000 f887 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8002566:	4602      	mov	r2, r0
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	490a      	ldr	r1, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	5ccb      	ldrb	r3, [r1, r3]
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fa42 	bl	8001a0c <HAL_InitTick>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00
 8002598:	40023800 	.word	0x40023800
 800259c:	0800dd80 	.word	0x0800dd80
 80025a0:	20000004 	.word	0x20000004
 80025a4:	20000008 	.word	0x20000008

080025a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20000004 	.word	0x20000004

080025c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025c4:	f7ff fff0 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0a9b      	lsrs	r3, r3, #10
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4903      	ldr	r1, [pc, #12]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40023800 	.word	0x40023800
 80025e4:	0800dd90 	.word	0x0800dd90

080025e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025ec:	f7ff ffdc 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	0b5b      	lsrs	r3, r3, #13
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <HAL_RCC_GetPCLK2Freq+0x24>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	0800dd90 	.word	0x0800dd90

08002610 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	220f      	movs	r2, #15
 800261e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_RCC_GetClockConfig+0x5c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0203 	and.w	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_RCC_GetClockConfig+0x5c>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_RCC_GetClockConfig+0x5c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_GetClockConfig+0x5c>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	08db      	lsrs	r3, r3, #3
 800264a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <HAL_RCC_GetClockConfig+0x60>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 020f 	and.w	r2, r3, #15
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	601a      	str	r2, [r3, #0]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800
 8002670:	40023c00 	.word	0x40023c00

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002678:	b0ae      	sub	sp, #184	; 0xb8
 800267a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800269a:	4bcb      	ldr	r3, [pc, #812]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	f200 8206 	bhi.w	8002ab4 <HAL_RCC_GetSysClockFreq+0x440>
 80026a8:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ae:	bf00      	nop
 80026b0:	080026e5 	.word	0x080026e5
 80026b4:	08002ab5 	.word	0x08002ab5
 80026b8:	08002ab5 	.word	0x08002ab5
 80026bc:	08002ab5 	.word	0x08002ab5
 80026c0:	080026ed 	.word	0x080026ed
 80026c4:	08002ab5 	.word	0x08002ab5
 80026c8:	08002ab5 	.word	0x08002ab5
 80026cc:	08002ab5 	.word	0x08002ab5
 80026d0:	080026f5 	.word	0x080026f5
 80026d4:	08002ab5 	.word	0x08002ab5
 80026d8:	08002ab5 	.word	0x08002ab5
 80026dc:	08002ab5 	.word	0x08002ab5
 80026e0:	080028e5 	.word	0x080028e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4bb9      	ldr	r3, [pc, #740]	; (80029cc <HAL_RCC_GetSysClockFreq+0x358>)
 80026e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80026ea:	e1e7      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ec:	4bb8      	ldr	r3, [pc, #736]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80026ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026f2:	e1e3      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f4:	4bb4      	ldr	r3, [pc, #720]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002700:	4bb1      	ldr	r3, [pc, #708]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d071      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270c:	4bae      	ldr	r3, [pc, #696]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	2200      	movs	r2, #0
 8002714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002718:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800271c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002724:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800272e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002732:	4622      	mov	r2, r4
 8002734:	462b      	mov	r3, r5
 8002736:	f04f 0000 	mov.w	r0, #0
 800273a:	f04f 0100 	mov.w	r1, #0
 800273e:	0159      	lsls	r1, r3, #5
 8002740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002744:	0150      	lsls	r0, r2, #5
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4621      	mov	r1, r4
 800274c:	1a51      	subs	r1, r2, r1
 800274e:	6439      	str	r1, [r7, #64]	; 0x40
 8002750:	4629      	mov	r1, r5
 8002752:	eb63 0301 	sbc.w	r3, r3, r1
 8002756:	647b      	str	r3, [r7, #68]	; 0x44
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002764:	4649      	mov	r1, r9
 8002766:	018b      	lsls	r3, r1, #6
 8002768:	4641      	mov	r1, r8
 800276a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800276e:	4641      	mov	r1, r8
 8002770:	018a      	lsls	r2, r1, #6
 8002772:	4641      	mov	r1, r8
 8002774:	1a51      	subs	r1, r2, r1
 8002776:	63b9      	str	r1, [r7, #56]	; 0x38
 8002778:	4649      	mov	r1, r9
 800277a:	eb63 0301 	sbc.w	r3, r3, r1
 800277e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800278c:	4649      	mov	r1, r9
 800278e:	00cb      	lsls	r3, r1, #3
 8002790:	4641      	mov	r1, r8
 8002792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002796:	4641      	mov	r1, r8
 8002798:	00ca      	lsls	r2, r1, #3
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	4622      	mov	r2, r4
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
 80027a6:	462b      	mov	r3, r5
 80027a8:	460a      	mov	r2, r1
 80027aa:	eb42 0303 	adc.w	r3, r2, r3
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027bc:	4629      	mov	r1, r5
 80027be:	024b      	lsls	r3, r1, #9
 80027c0:	4621      	mov	r1, r4
 80027c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027c6:	4621      	mov	r1, r4
 80027c8:	024a      	lsls	r2, r1, #9
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027d2:	2200      	movs	r2, #0
 80027d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80027e0:	f7fe fa9a 	bl	8000d18 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027ee:	e067      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f0:	4b75      	ldr	r3, [pc, #468]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002808:	67bb      	str	r3, [r7, #120]	; 0x78
 800280a:	2300      	movs	r3, #0
 800280c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800280e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002812:	4622      	mov	r2, r4
 8002814:	462b      	mov	r3, r5
 8002816:	f04f 0000 	mov.w	r0, #0
 800281a:	f04f 0100 	mov.w	r1, #0
 800281e:	0159      	lsls	r1, r3, #5
 8002820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002824:	0150      	lsls	r0, r2, #5
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4621      	mov	r1, r4
 800282c:	1a51      	subs	r1, r2, r1
 800282e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002830:	4629      	mov	r1, r5
 8002832:	eb63 0301 	sbc.w	r3, r3, r1
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002844:	4649      	mov	r1, r9
 8002846:	018b      	lsls	r3, r1, #6
 8002848:	4641      	mov	r1, r8
 800284a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800284e:	4641      	mov	r1, r8
 8002850:	018a      	lsls	r2, r1, #6
 8002852:	4641      	mov	r1, r8
 8002854:	ebb2 0a01 	subs.w	sl, r2, r1
 8002858:	4649      	mov	r1, r9
 800285a:	eb63 0b01 	sbc.w	fp, r3, r1
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800286a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800286e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002872:	4692      	mov	sl, r2
 8002874:	469b      	mov	fp, r3
 8002876:	4623      	mov	r3, r4
 8002878:	eb1a 0303 	adds.w	r3, sl, r3
 800287c:	623b      	str	r3, [r7, #32]
 800287e:	462b      	mov	r3, r5
 8002880:	eb4b 0303 	adc.w	r3, fp, r3
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002892:	4629      	mov	r1, r5
 8002894:	028b      	lsls	r3, r1, #10
 8002896:	4621      	mov	r1, r4
 8002898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800289c:	4621      	mov	r1, r4
 800289e:	028a      	lsls	r2, r1, #10
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028a8:	2200      	movs	r2, #0
 80028aa:	673b      	str	r3, [r7, #112]	; 0x70
 80028ac:	677a      	str	r2, [r7, #116]	; 0x74
 80028ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80028b2:	f7fe fa31 	bl	8000d18 <__aeabi_uldivmod>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4613      	mov	r3, r2
 80028bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c0:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	3301      	adds	r3, #1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80028d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028da:	fbb2 f3f3 	udiv	r3, r2, r3
 80028de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028e2:	e0eb      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e4:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d06b      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fc:	4b32      	ldr	r3, [pc, #200]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	2200      	movs	r2, #0
 8002904:	66bb      	str	r3, [r7, #104]	; 0x68
 8002906:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800290a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290e:	663b      	str	r3, [r7, #96]	; 0x60
 8002910:	2300      	movs	r3, #0
 8002912:	667b      	str	r3, [r7, #100]	; 0x64
 8002914:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002918:	4622      	mov	r2, r4
 800291a:	462b      	mov	r3, r5
 800291c:	f04f 0000 	mov.w	r0, #0
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	0159      	lsls	r1, r3, #5
 8002926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292a:	0150      	lsls	r0, r2, #5
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4621      	mov	r1, r4
 8002932:	1a51      	subs	r1, r2, r1
 8002934:	61b9      	str	r1, [r7, #24]
 8002936:	4629      	mov	r1, r5
 8002938:	eb63 0301 	sbc.w	r3, r3, r1
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800294a:	4659      	mov	r1, fp
 800294c:	018b      	lsls	r3, r1, #6
 800294e:	4651      	mov	r1, sl
 8002950:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002954:	4651      	mov	r1, sl
 8002956:	018a      	lsls	r2, r1, #6
 8002958:	4651      	mov	r1, sl
 800295a:	ebb2 0801 	subs.w	r8, r2, r1
 800295e:	4659      	mov	r1, fp
 8002960:	eb63 0901 	sbc.w	r9, r3, r1
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002970:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002974:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002978:	4690      	mov	r8, r2
 800297a:	4699      	mov	r9, r3
 800297c:	4623      	mov	r3, r4
 800297e:	eb18 0303 	adds.w	r3, r8, r3
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	462b      	mov	r3, r5
 8002986:	eb49 0303 	adc.w	r3, r9, r3
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002998:	4629      	mov	r1, r5
 800299a:	024b      	lsls	r3, r1, #9
 800299c:	4621      	mov	r1, r4
 800299e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a2:	4621      	mov	r1, r4
 80029a4:	024a      	lsls	r2, r1, #9
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029ae:	2200      	movs	r2, #0
 80029b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80029b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80029b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029b8:	f7fe f9ae 	bl	8000d18 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029c6:	e065      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x420>
 80029c8:	40023800 	.word	0x40023800
 80029cc:	00f42400 	.word	0x00f42400
 80029d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d4:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <HAL_RCC_GetSysClockFreq+0x458>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	2200      	movs	r2, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	4611      	mov	r1, r2
 80029e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029e4:	653b      	str	r3, [r7, #80]	; 0x50
 80029e6:	2300      	movs	r3, #0
 80029e8:	657b      	str	r3, [r7, #84]	; 0x54
 80029ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80029ee:	4642      	mov	r2, r8
 80029f0:	464b      	mov	r3, r9
 80029f2:	f04f 0000 	mov.w	r0, #0
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	0159      	lsls	r1, r3, #5
 80029fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a00:	0150      	lsls	r0, r2, #5
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4641      	mov	r1, r8
 8002a08:	1a51      	subs	r1, r2, r1
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a20:	4659      	mov	r1, fp
 8002a22:	018b      	lsls	r3, r1, #6
 8002a24:	4651      	mov	r1, sl
 8002a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a2a:	4651      	mov	r1, sl
 8002a2c:	018a      	lsls	r2, r1, #6
 8002a2e:	4651      	mov	r1, sl
 8002a30:	1a54      	subs	r4, r2, r1
 8002a32:	4659      	mov	r1, fp
 8002a34:	eb63 0501 	sbc.w	r5, r3, r1
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	00eb      	lsls	r3, r5, #3
 8002a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a46:	00e2      	lsls	r2, r4, #3
 8002a48:	4614      	mov	r4, r2
 8002a4a:	461d      	mov	r5, r3
 8002a4c:	4643      	mov	r3, r8
 8002a4e:	18e3      	adds	r3, r4, r3
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	464b      	mov	r3, r9
 8002a54:	eb45 0303 	adc.w	r3, r5, r3
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a66:	4629      	mov	r1, r5
 8002a68:	028b      	lsls	r3, r1, #10
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a70:	4621      	mov	r1, r4
 8002a72:	028a      	lsls	r2, r1, #10
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a80:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002a82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a86:	f7fe f947 	bl	8000d18 <__aeabi_uldivmod>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4613      	mov	r3, r2
 8002a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a94:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <HAL_RCC_GetSysClockFreq+0x458>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	0f1b      	lsrs	r3, r3, #28
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002aa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ab2:	e003      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002aba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002abc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	37b8      	adds	r7, #184	; 0xb8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	00f42400 	.word	0x00f42400

08002ad4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e28d      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8083 	beq.w	8002bfa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002af4:	4b94      	ldr	r3, [pc, #592]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d019      	beq.n	8002b34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b00:	4b91      	ldr	r3, [pc, #580]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b0c:	4b8e      	ldr	r3, [pc, #568]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b18:	d00c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1a:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d112      	bne.n	8002b4c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b32:	d10b      	bne.n	8002b4c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d05b      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x124>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d157      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e25a      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b54:	d106      	bne.n	8002b64 <HAL_RCC_OscConfig+0x90>
 8002b56:	4b7c      	ldr	r3, [pc, #496]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a7b      	ldr	r2, [pc, #492]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e01d      	b.n	8002ba0 <HAL_RCC_OscConfig+0xcc>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0xb4>
 8002b6e:	4b76      	ldr	r3, [pc, #472]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a75      	ldr	r2, [pc, #468]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b73      	ldr	r3, [pc, #460]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a72      	ldr	r2, [pc, #456]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0xcc>
 8002b88:	4b6f      	ldr	r3, [pc, #444]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a6e      	ldr	r2, [pc, #440]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b6c      	ldr	r3, [pc, #432]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a6b      	ldr	r2, [pc, #428]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7ff f8c6 	bl	8001d38 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7ff f8c2 	bl	8001d38 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e21f      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0xdc>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7ff f8b2 	bl	8001d38 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7ff f8ae 	bl	8001d38 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	; 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e20b      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bea:	4b57      	ldr	r3, [pc, #348]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x104>
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d06f      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c06:	4b50      	ldr	r3, [pc, #320]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d017      	beq.n	8002c42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c12:	4b4d      	ldr	r3, [pc, #308]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d105      	bne.n	8002c2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2a:	4b47      	ldr	r3, [pc, #284]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	d11c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c36:	4b44      	ldr	r3, [pc, #272]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d116      	bne.n	8002c70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	4b41      	ldr	r3, [pc, #260]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_RCC_OscConfig+0x186>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d001      	beq.n	8002c5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e1d3      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5a:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4937      	ldr	r1, [pc, #220]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6e:	e03a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d020      	beq.n	8002cba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c78:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <HAL_RCC_OscConfig+0x278>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7e:	f7ff f85b 	bl	8001d38 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c86:	f7ff f857 	bl	8001d38 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e1b4      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c98:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca4:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4925      	ldr	r1, [pc, #148]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]
 8002cb8:	e015      	b.n	8002ce6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_RCC_OscConfig+0x278>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7ff f83a 	bl	8001d38 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc8:	f7ff f836 	bl	8001d38 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e193      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d036      	beq.n	8002d60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d016      	beq.n	8002d28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <HAL_RCC_OscConfig+0x27c>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7ff f81a 	bl	8001d38 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d08:	f7ff f816 	bl	8001d38 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e173      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x234>
 8002d26:	e01b      	b.n	8002d60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_RCC_OscConfig+0x27c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2e:	f7ff f803 	bl	8001d38 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d34:	e00e      	b.n	8002d54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d36:	f7fe ffff 	bl	8001d38 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d907      	bls.n	8002d54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e15c      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	42470000 	.word	0x42470000
 8002d50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	4b8a      	ldr	r3, [pc, #552]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ea      	bne.n	8002d36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8097 	beq.w	8002e9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d72:	4b83      	ldr	r3, [pc, #524]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10f      	bne.n	8002d9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	4b7f      	ldr	r3, [pc, #508]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4a7e      	ldr	r2, [pc, #504]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8e:	4b7c      	ldr	r3, [pc, #496]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9e:	4b79      	ldr	r3, [pc, #484]	; (8002f84 <HAL_RCC_OscConfig+0x4b0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d118      	bne.n	8002ddc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002daa:	4b76      	ldr	r3, [pc, #472]	; (8002f84 <HAL_RCC_OscConfig+0x4b0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a75      	ldr	r2, [pc, #468]	; (8002f84 <HAL_RCC_OscConfig+0x4b0>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db6:	f7fe ffbf 	bl	8001d38 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbe:	f7fe ffbb 	bl	8001d38 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e118      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	4b6c      	ldr	r3, [pc, #432]	; (8002f84 <HAL_RCC_OscConfig+0x4b0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x31e>
 8002de4:	4b66      	ldr	r3, [pc, #408]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a65      	ldr	r2, [pc, #404]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	e01c      	b.n	8002e2c <HAL_RCC_OscConfig+0x358>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x340>
 8002dfa:	4b61      	ldr	r3, [pc, #388]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	4a60      	ldr	r2, [pc, #384]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002e00:	f043 0304 	orr.w	r3, r3, #4
 8002e04:	6713      	str	r3, [r2, #112]	; 0x70
 8002e06:	4b5e      	ldr	r3, [pc, #376]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	4a5d      	ldr	r2, [pc, #372]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6713      	str	r3, [r2, #112]	; 0x70
 8002e12:	e00b      	b.n	8002e2c <HAL_RCC_OscConfig+0x358>
 8002e14:	4b5a      	ldr	r3, [pc, #360]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	4a59      	ldr	r2, [pc, #356]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e20:	4b57      	ldr	r3, [pc, #348]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	4a56      	ldr	r2, [pc, #344]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002e26:	f023 0304 	bic.w	r3, r3, #4
 8002e2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d015      	beq.n	8002e60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fe ff80 	bl	8001d38 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3c:	f7fe ff7c 	bl	8001d38 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e0d7      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e52:	4b4b      	ldr	r3, [pc, #300]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0ee      	beq.n	8002e3c <HAL_RCC_OscConfig+0x368>
 8002e5e:	e014      	b.n	8002e8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fe ff6a 	bl	8001d38 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f7fe ff66 	bl	8001d38 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e0c1      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7e:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1ee      	bne.n	8002e68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e90:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	4a3a      	ldr	r2, [pc, #232]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80ad 	beq.w	8003000 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ea6:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d060      	beq.n	8002f74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d145      	bne.n	8002f46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eba:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <HAL_RCC_OscConfig+0x4b4>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe ff3a 	bl	8001d38 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe ff36 	bl	8001d38 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e093      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eda:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69da      	ldr	r2, [r3, #28]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	019b      	lsls	r3, r3, #6
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	3b01      	subs	r3, #1
 8002f00:	041b      	lsls	r3, r3, #16
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	061b      	lsls	r3, r3, #24
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	071b      	lsls	r3, r3, #28
 8002f12:	491b      	ldr	r1, [pc, #108]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <HAL_RCC_OscConfig+0x4b4>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1e:	f7fe ff0b 	bl	8001d38 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f26:	f7fe ff07 	bl	8001d38 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e064      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x452>
 8002f44:	e05c      	b.n	8003000 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HAL_RCC_OscConfig+0x4b4>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fef4 	bl	8001d38 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe fef0 	bl	8001d38 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e04d      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCC_OscConfig+0x4ac>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x480>
 8002f72:	e045      	b.n	8003000 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e040      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40007000 	.word	0x40007000
 8002f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f8c:	4b1f      	ldr	r3, [pc, #124]	; (800300c <HAL_RCC_OscConfig+0x538>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d030      	beq.n	8002ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d129      	bne.n	8002ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d122      	bne.n	8002ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d119      	bne.n	8002ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d10f      	bne.n	8002ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800

08003010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e041      	b.n	80030a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe fc1a 	bl	8001870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f000 fc7a 	bl	8003948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d001      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e04e      	b.n	8003166 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a23      	ldr	r2, [pc, #140]	; (8003174 <HAL_TIM_Base_Start_IT+0xc4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d022      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x80>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f2:	d01d      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x80>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1f      	ldr	r2, [pc, #124]	; (8003178 <HAL_TIM_Base_Start_IT+0xc8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d018      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x80>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1e      	ldr	r2, [pc, #120]	; (800317c <HAL_TIM_Base_Start_IT+0xcc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x80>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <HAL_TIM_Base_Start_IT+0xd0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00e      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x80>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <HAL_TIM_Base_Start_IT+0xd4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d009      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x80>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a19      	ldr	r2, [pc, #100]	; (8003188 <HAL_TIM_Base_Start_IT+0xd8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x80>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_TIM_Base_Start_IT+0xdc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d111      	bne.n	8003154 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b06      	cmp	r3, #6
 8003140:	d010      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0201 	orr.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003152:	e007      	b.n	8003164 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40010000 	.word	0x40010000
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800
 8003180:	40000c00 	.word	0x40000c00
 8003184:	40010400 	.word	0x40010400
 8003188:	40014000 	.word	0x40014000
 800318c:	40001800 	.word	0x40001800

08003190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e041      	b.n	8003226 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f839 	bl	800322e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3304      	adds	r3, #4
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f000 fbba 	bl	8003948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <HAL_TIM_PWM_Start+0x24>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e022      	b.n	80032ae <HAL_TIM_PWM_Start+0x6a>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b04      	cmp	r3, #4
 800326c:	d109      	bne.n	8003282 <HAL_TIM_PWM_Start+0x3e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e015      	b.n	80032ae <HAL_TIM_PWM_Start+0x6a>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d109      	bne.n	800329c <HAL_TIM_PWM_Start+0x58>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e008      	b.n	80032ae <HAL_TIM_PWM_Start+0x6a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e07c      	b.n	80033b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_PWM_Start+0x82>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c4:	e013      	b.n	80032ee <HAL_TIM_PWM_Start+0xaa>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_PWM_Start+0x92>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d4:	e00b      	b.n	80032ee <HAL_TIM_PWM_Start+0xaa>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_PWM_Start+0xa2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e4:	e003      	b.n	80032ee <HAL_TIM_PWM_Start+0xaa>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2201      	movs	r2, #1
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fe10 	bl	8003f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2d      	ldr	r2, [pc, #180]	; (80033b8 <HAL_TIM_PWM_Start+0x174>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d004      	beq.n	8003310 <HAL_TIM_PWM_Start+0xcc>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2c      	ldr	r2, [pc, #176]	; (80033bc <HAL_TIM_PWM_Start+0x178>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d101      	bne.n	8003314 <HAL_TIM_PWM_Start+0xd0>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_TIM_PWM_Start+0xd2>
 8003314:	2300      	movs	r3, #0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003328:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <HAL_TIM_PWM_Start+0x174>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d022      	beq.n	800337a <HAL_TIM_PWM_Start+0x136>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333c:	d01d      	beq.n	800337a <HAL_TIM_PWM_Start+0x136>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1f      	ldr	r2, [pc, #124]	; (80033c0 <HAL_TIM_PWM_Start+0x17c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d018      	beq.n	800337a <HAL_TIM_PWM_Start+0x136>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <HAL_TIM_PWM_Start+0x180>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_TIM_PWM_Start+0x136>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <HAL_TIM_PWM_Start+0x184>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00e      	beq.n	800337a <HAL_TIM_PWM_Start+0x136>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a16      	ldr	r2, [pc, #88]	; (80033bc <HAL_TIM_PWM_Start+0x178>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_TIM_PWM_Start+0x136>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_TIM_PWM_Start+0x188>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d004      	beq.n	800337a <HAL_TIM_PWM_Start+0x136>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <HAL_TIM_PWM_Start+0x18c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d111      	bne.n	800339e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b06      	cmp	r3, #6
 800338a:	d010      	beq.n	80033ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339c:	e007      	b.n	80033ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0201 	orr.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40010000 	.word	0x40010000
 80033bc:	40010400 	.word	0x40010400
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40014000 	.word	0x40014000
 80033d0:	40001800 	.word	0x40001800

080033d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d122      	bne.n	8003430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d11b      	bne.n	8003430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0202 	mvn.w	r2, #2
 8003400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fa77 	bl	800390a <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa69 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fa7a 	bl	800391e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b04      	cmp	r3, #4
 800343c:	d122      	bne.n	8003484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b04      	cmp	r3, #4
 800344a:	d11b      	bne.n	8003484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0204 	mvn.w	r2, #4
 8003454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa4d 	bl	800390a <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fa3f 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fa50 	bl	800391e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b08      	cmp	r3, #8
 8003490:	d122      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b08      	cmp	r3, #8
 800349e:	d11b      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0208 	mvn.w	r2, #8
 80034a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2204      	movs	r2, #4
 80034ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa23 	bl	800390a <HAL_TIM_IC_CaptureCallback>
 80034c4:	e005      	b.n	80034d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fa15 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fa26 	bl	800391e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d122      	bne.n	800352c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b10      	cmp	r3, #16
 80034f2:	d11b      	bne.n	800352c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0210 	mvn.w	r2, #16
 80034fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2208      	movs	r2, #8
 8003502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f9f9 	bl	800390a <HAL_TIM_IC_CaptureCallback>
 8003518:	e005      	b.n	8003526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9eb 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f9fc 	bl	800391e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d10e      	bne.n	8003558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0201 	mvn.w	r2, #1
 8003550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe f94c 	bl	80017f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003562:	2b80      	cmp	r3, #128	; 0x80
 8003564:	d10e      	bne.n	8003584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	2b80      	cmp	r3, #128	; 0x80
 8003572:	d107      	bne.n	8003584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fdca 	bl	8004118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d10e      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d107      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f9c1 	bl	8003932 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0220 	mvn.w	r2, #32
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fd94 	bl	8004104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035fe:	2302      	movs	r3, #2
 8003600:	e0ae      	b.n	8003760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b0c      	cmp	r3, #12
 800360e:	f200 809f 	bhi.w	8003750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003612:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	0800364d 	.word	0x0800364d
 800361c:	08003751 	.word	0x08003751
 8003620:	08003751 	.word	0x08003751
 8003624:	08003751 	.word	0x08003751
 8003628:	0800368d 	.word	0x0800368d
 800362c:	08003751 	.word	0x08003751
 8003630:	08003751 	.word	0x08003751
 8003634:	08003751 	.word	0x08003751
 8003638:	080036cf 	.word	0x080036cf
 800363c:	08003751 	.word	0x08003751
 8003640:	08003751 	.word	0x08003751
 8003644:	08003751 	.word	0x08003751
 8003648:	0800370f 	.word	0x0800370f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fa18 	bl	8003a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0208 	orr.w	r2, r2, #8
 8003666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0204 	bic.w	r2, r2, #4
 8003676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6999      	ldr	r1, [r3, #24]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	619a      	str	r2, [r3, #24]
      break;
 800368a:	e064      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fa68 	bl	8003b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6999      	ldr	r1, [r3, #24]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	021a      	lsls	r2, r3, #8
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	619a      	str	r2, [r3, #24]
      break;
 80036cc:	e043      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fabd 	bl	8003c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0208 	orr.w	r2, r2, #8
 80036e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0204 	bic.w	r2, r2, #4
 80036f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69d9      	ldr	r1, [r3, #28]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	61da      	str	r2, [r3, #28]
      break;
 800370c:	e023      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fb11 	bl	8003d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69d9      	ldr	r1, [r3, #28]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	021a      	lsls	r2, r3, #8
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	61da      	str	r2, [r3, #28]
      break;
 800374e:	e002      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	75fb      	strb	r3, [r7, #23]
      break;
 8003754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_TIM_ConfigClockSource+0x1c>
 8003780:	2302      	movs	r3, #2
 8003782:	e0b4      	b.n	80038ee <HAL_TIM_ConfigClockSource+0x186>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037bc:	d03e      	beq.n	800383c <HAL_TIM_ConfigClockSource+0xd4>
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c2:	f200 8087 	bhi.w	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ca:	f000 8086 	beq.w	80038da <HAL_TIM_ConfigClockSource+0x172>
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d87f      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b70      	cmp	r3, #112	; 0x70
 80037d6:	d01a      	beq.n	800380e <HAL_TIM_ConfigClockSource+0xa6>
 80037d8:	2b70      	cmp	r3, #112	; 0x70
 80037da:	d87b      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b60      	cmp	r3, #96	; 0x60
 80037de:	d050      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0x11a>
 80037e0:	2b60      	cmp	r3, #96	; 0x60
 80037e2:	d877      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037e4:	2b50      	cmp	r3, #80	; 0x50
 80037e6:	d03c      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0xfa>
 80037e8:	2b50      	cmp	r3, #80	; 0x50
 80037ea:	d873      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d058      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x13a>
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d86f      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b30      	cmp	r3, #48	; 0x30
 80037f6:	d064      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15a>
 80037f8:	2b30      	cmp	r3, #48	; 0x30
 80037fa:	d86b      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d060      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003800:	2b20      	cmp	r3, #32
 8003802:	d867      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d05c      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003808:	2b10      	cmp	r3, #16
 800380a:	d05a      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15a>
 800380c:	e062      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6899      	ldr	r1, [r3, #8]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f000 fb5d 	bl	8003edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	609a      	str	r2, [r3, #8]
      break;
 800383a:	e04f      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6899      	ldr	r1, [r3, #8]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f000 fb46 	bl	8003edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800385e:	609a      	str	r2, [r3, #8]
      break;
 8003860:	e03c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	461a      	mov	r2, r3
 8003870:	f000 faba 	bl	8003de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2150      	movs	r1, #80	; 0x50
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fb13 	bl	8003ea6 <TIM_ITRx_SetConfig>
      break;
 8003880:	e02c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	461a      	mov	r2, r3
 8003890:	f000 fad9 	bl	8003e46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2160      	movs	r1, #96	; 0x60
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fb03 	bl	8003ea6 <TIM_ITRx_SetConfig>
      break;
 80038a0:	e01c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 fa9a 	bl	8003de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2140      	movs	r1, #64	; 0x40
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 faf3 	bl	8003ea6 <TIM_ITRx_SetConfig>
      break;
 80038c0:	e00c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f000 faea 	bl	8003ea6 <TIM_ITRx_SetConfig>
      break;
 80038d2:	e003      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      break;
 80038d8:	e000      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
	...

08003948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a40      	ldr	r2, [pc, #256]	; (8003a5c <TIM_Base_SetConfig+0x114>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003966:	d00f      	beq.n	8003988 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a3d      	ldr	r2, [pc, #244]	; (8003a60 <TIM_Base_SetConfig+0x118>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00b      	beq.n	8003988 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a3c      	ldr	r2, [pc, #240]	; (8003a64 <TIM_Base_SetConfig+0x11c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d007      	beq.n	8003988 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a3b      	ldr	r2, [pc, #236]	; (8003a68 <TIM_Base_SetConfig+0x120>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a3a      	ldr	r2, [pc, #232]	; (8003a6c <TIM_Base_SetConfig+0x124>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d108      	bne.n	800399a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a2f      	ldr	r2, [pc, #188]	; (8003a5c <TIM_Base_SetConfig+0x114>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d02b      	beq.n	80039fa <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d027      	beq.n	80039fa <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2c      	ldr	r2, [pc, #176]	; (8003a60 <TIM_Base_SetConfig+0x118>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d023      	beq.n	80039fa <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2b      	ldr	r2, [pc, #172]	; (8003a64 <TIM_Base_SetConfig+0x11c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d01f      	beq.n	80039fa <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2a      	ldr	r2, [pc, #168]	; (8003a68 <TIM_Base_SetConfig+0x120>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01b      	beq.n	80039fa <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a29      	ldr	r2, [pc, #164]	; (8003a6c <TIM_Base_SetConfig+0x124>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d017      	beq.n	80039fa <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a28      	ldr	r2, [pc, #160]	; (8003a70 <TIM_Base_SetConfig+0x128>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <TIM_Base_SetConfig+0x12c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00f      	beq.n	80039fa <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a26      	ldr	r2, [pc, #152]	; (8003a78 <TIM_Base_SetConfig+0x130>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00b      	beq.n	80039fa <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <TIM_Base_SetConfig+0x134>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d007      	beq.n	80039fa <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a24      	ldr	r2, [pc, #144]	; (8003a80 <TIM_Base_SetConfig+0x138>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d003      	beq.n	80039fa <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a23      	ldr	r2, [pc, #140]	; (8003a84 <TIM_Base_SetConfig+0x13c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d108      	bne.n	8003a0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <TIM_Base_SetConfig+0x114>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d003      	beq.n	8003a40 <TIM_Base_SetConfig+0xf8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a0c      	ldr	r2, [pc, #48]	; (8003a6c <TIM_Base_SetConfig+0x124>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d103      	bne.n	8003a48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	615a      	str	r2, [r3, #20]
}
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800
 8003a68:	40000c00 	.word	0x40000c00
 8003a6c:	40010400 	.word	0x40010400
 8003a70:	40014000 	.word	0x40014000
 8003a74:	40014400 	.word	0x40014400
 8003a78:	40014800 	.word	0x40014800
 8003a7c:	40001800 	.word	0x40001800
 8003a80:	40001c00 	.word	0x40001c00
 8003a84:	40002000 	.word	0x40002000

08003a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f023 0201 	bic.w	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f023 0302 	bic.w	r3, r3, #2
 8003ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <TIM_OC1_SetConfig+0xd8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_OC1_SetConfig+0x64>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <TIM_OC1_SetConfig+0xdc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d10c      	bne.n	8003b06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0308 	bic.w	r3, r3, #8
 8003af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 0304 	bic.w	r3, r3, #4
 8003b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a15      	ldr	r2, [pc, #84]	; (8003b60 <TIM_OC1_SetConfig+0xd8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_OC1_SetConfig+0x8e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <TIM_OC1_SetConfig+0xdc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d111      	bne.n	8003b3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	621a      	str	r2, [r3, #32]
}
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40010000 	.word	0x40010000
 8003b64:	40010400 	.word	0x40010400

08003b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f023 0210 	bic.w	r2, r3, #16
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f023 0320 	bic.w	r3, r3, #32
 8003bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <TIM_OC2_SetConfig+0xe4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_OC2_SetConfig+0x68>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a21      	ldr	r2, [pc, #132]	; (8003c50 <TIM_OC2_SetConfig+0xe8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10d      	bne.n	8003bec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a17      	ldr	r2, [pc, #92]	; (8003c4c <TIM_OC2_SetConfig+0xe4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_OC2_SetConfig+0x94>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <TIM_OC2_SetConfig+0xe8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d113      	bne.n	8003c24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40010400 	.word	0x40010400

08003c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a21      	ldr	r2, [pc, #132]	; (8003d34 <TIM_OC3_SetConfig+0xe0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_OC3_SetConfig+0x66>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	; (8003d38 <TIM_OC3_SetConfig+0xe4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d10d      	bne.n	8003cd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <TIM_OC3_SetConfig+0xe0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <TIM_OC3_SetConfig+0x92>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a15      	ldr	r2, [pc, #84]	; (8003d38 <TIM_OC3_SetConfig+0xe4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d113      	bne.n	8003d0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	621a      	str	r2, [r3, #32]
}
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	40010000 	.word	0x40010000
 8003d38:	40010400 	.word	0x40010400

08003d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a12      	ldr	r2, [pc, #72]	; (8003de0 <TIM_OC4_SetConfig+0xa4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <TIM_OC4_SetConfig+0x68>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <TIM_OC4_SetConfig+0xa8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d109      	bne.n	8003db8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	019b      	lsls	r3, r3, #6
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40010400 	.word	0x40010400

08003de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0201 	bic.w	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f023 030a 	bic.w	r3, r3, #10
 8003e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b087      	sub	sp, #28
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f023 0210 	bic.w	r2, r3, #16
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	031b      	lsls	r3, r3, #12
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b085      	sub	sp, #20
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f043 0307 	orr.w	r3, r3, #7
 8003ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	609a      	str	r2, [r3, #8]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	021a      	lsls	r2, r3, #8
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	609a      	str	r2, [r3, #8]
}
 8003f10:	bf00      	nop
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2201      	movs	r2, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1a      	ldr	r2, [r3, #32]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	fa01 f303 	lsl.w	r3, r1, r3
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	621a      	str	r2, [r3, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e05a      	b.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a21      	ldr	r2, [pc, #132]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fcc:	d01d      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1d      	ldr	r2, [pc, #116]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1a      	ldr	r2, [pc, #104]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a18      	ldr	r2, [pc, #96]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a17      	ldr	r2, [pc, #92]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a15      	ldr	r2, [pc, #84]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d10c      	bne.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	4313      	orrs	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40010000 	.word	0x40010000
 8004048:	40000400 	.word	0x40000400
 800404c:	40000800 	.word	0x40000800
 8004050:	40000c00 	.word	0x40000c00
 8004054:	40010400 	.word	0x40010400
 8004058:	40014000 	.word	0x40014000
 800405c:	40001800 	.word	0x40001800

08004060 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004078:	2302      	movs	r3, #2
 800407a:	e03d      	b.n	80040f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e03f      	b.n	80041be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd fbe8 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2224      	movs	r2, #36	; 0x24
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800416e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fddf 	bl	8004d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b08a      	sub	sp, #40	; 0x28
 80041ca:	af02      	add	r7, sp, #8
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	603b      	str	r3, [r7, #0]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d17c      	bne.n	80042e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <HAL_UART_Transmit+0x2c>
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e075      	b.n	80042e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_UART_Transmit+0x3e>
 8004200:	2302      	movs	r3, #2
 8004202:	e06e      	b.n	80042e2 <HAL_UART_Transmit+0x11c>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2221      	movs	r2, #33	; 0x21
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800421a:	f7fd fd8d 	bl	8001d38 <HAL_GetTick>
 800421e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	88fa      	ldrh	r2, [r7, #6]
 800422a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004234:	d108      	bne.n	8004248 <HAL_UART_Transmit+0x82>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d104      	bne.n	8004248 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	e003      	b.n	8004250 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800424c:	2300      	movs	r3, #0
 800424e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004258:	e02a      	b.n	80042b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2200      	movs	r2, #0
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fb1f 	bl	80048a8 <UART_WaitOnFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e036      	b.n	80042e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10b      	bne.n	8004292 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004288:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	3302      	adds	r3, #2
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	e007      	b.n	80042a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	3301      	adds	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1cf      	bne.n	800425a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2200      	movs	r2, #0
 80042c2:	2140      	movs	r1, #64	; 0x40
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 faef 	bl	80048a8 <UART_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e006      	b.n	80042e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e000      	b.n	80042e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
  }
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	4613      	mov	r3, r2
 80042f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b20      	cmp	r3, #32
 8004302:	d11d      	bne.n	8004340 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_Receive_IT+0x26>
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e016      	b.n	8004342 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_UART_Receive_IT+0x38>
 800431e:	2302      	movs	r3, #2
 8004320:	e00f      	b.n	8004342 <HAL_UART_Receive_IT+0x58>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	461a      	mov	r2, r3
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fb24 	bl	8004984 <UART_Start_Receive_IT>
 800433c:	4603      	mov	r3, r0
 800433e:	e000      	b.n	8004342 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004340:	2302      	movs	r3, #2
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b0ba      	sub	sp, #232	; 0xe8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004378:	2300      	movs	r3, #0
 800437a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800438a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10f      	bne.n	80043b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_UART_IRQHandler+0x66>
 800439e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fc07 	bl	8004bbe <UART_Receive_IT>
      return;
 80043b0:	e256      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80de 	beq.w	8004578 <HAL_UART_IRQHandler+0x22c>
 80043bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80d1 	beq.w	8004578 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_UART_IRQHandler+0xae>
 80043e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f043 0201 	orr.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_UART_IRQHandler+0xd2>
 8004406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f043 0202 	orr.w	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800441e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_UART_IRQHandler+0xf6>
 800442a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d011      	beq.n	8004472 <HAL_UART_IRQHandler+0x126>
 800444e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d105      	bne.n	8004466 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800445a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f043 0208 	orr.w	r2, r3, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 81ed 	beq.w	8004856 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_UART_IRQHandler+0x14e>
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fb92 	bl	8004bbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <HAL_UART_IRQHandler+0x17a>
 80044be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d04f      	beq.n	8004566 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa9a 	bl	8004a00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b40      	cmp	r3, #64	; 0x40
 80044d8:	d141      	bne.n	800455e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3314      	adds	r3, #20
 8004502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004506:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800450a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800451e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1d9      	bne.n	80044da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	2b00      	cmp	r3, #0
 800452c:	d013      	beq.n	8004556 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	4a7d      	ldr	r2, [pc, #500]	; (8004728 <HAL_UART_IRQHandler+0x3dc>)
 8004534:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	4618      	mov	r0, r3
 800453c:	f7fd fd5a 	bl	8001ff4 <HAL_DMA_Abort_IT>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004550:	4610      	mov	r0, r2
 8004552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	e00e      	b.n	8004574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f990 	bl	800487c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	e00a      	b.n	8004574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f98c 	bl	800487c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004564:	e006      	b.n	8004574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f988 	bl	800487c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004572:	e170      	b.n	8004856 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004574:	bf00      	nop
    return;
 8004576:	e16e      	b.n	8004856 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	2b01      	cmp	r3, #1
 800457e:	f040 814a 	bne.w	8004816 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 8143 	beq.w	8004816 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 813c 	beq.w	8004816 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	f040 80b4 	bne.w	800472c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8140 	beq.w	800485a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045e2:	429a      	cmp	r2, r3
 80045e4:	f080 8139 	bcs.w	800485a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fa:	f000 8088 	beq.w	800470e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	330c      	adds	r3, #12
 8004604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800461c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800462a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800462e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004636:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1d9      	bne.n	80045fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3314      	adds	r3, #20
 8004650:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800465a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3314      	adds	r3, #20
 800466a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800466e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004672:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004676:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e1      	bne.n	800464a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3314      	adds	r3, #20
 800468c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3314      	adds	r3, #20
 80046a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e3      	bne.n	8004686 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046de:	f023 0310 	bic.w	r3, r3, #16
 80046e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80046f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e3      	bne.n	80046cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	4618      	mov	r0, r3
 800470a:	f7fd fc03 	bl	8001f14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004716:	b29b      	uxth	r3, r3
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	b29b      	uxth	r3, r3
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f8b6 	bl	8004890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004724:	e099      	b.n	800485a <HAL_UART_IRQHandler+0x50e>
 8004726:	bf00      	nop
 8004728:	08004ac7 	.word	0x08004ac7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004734:	b29b      	uxth	r3, r3
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 808b 	beq.w	800485e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8086 	beq.w	800485e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004768:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004776:	647a      	str	r2, [r7, #68]	; 0x44
 8004778:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800477c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e3      	bne.n	8004752 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3314      	adds	r3, #20
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	623b      	str	r3, [r7, #32]
   return(result);
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3314      	adds	r3, #20
 80047aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047ae:	633a      	str	r2, [r7, #48]	; 0x30
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e3      	bne.n	800478a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	60fb      	str	r3, [r7, #12]
   return(result);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0310 	bic.w	r3, r3, #16
 80047e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047f4:	61fa      	str	r2, [r7, #28]
 80047f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	69b9      	ldr	r1, [r7, #24]
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	617b      	str	r3, [r7, #20]
   return(result);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e3      	bne.n	80047d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004808:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f83e 	bl	8004890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004814:	e023      	b.n	800485e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_UART_IRQHandler+0x4ea>
 8004822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f95d 	bl	8004aee <UART_Transmit_IT>
    return;
 8004834:	e014      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00e      	beq.n	8004860 <HAL_UART_IRQHandler+0x514>
 8004842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f99d 	bl	8004b8e <UART_EndTransmit_IT>
    return;
 8004854:	e004      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
    return;
 8004856:	bf00      	nop
 8004858:	e002      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
      return;
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
      return;
 800485e:	bf00      	nop
  }
}
 8004860:	37e8      	adds	r7, #232	; 0xe8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop

08004868 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b090      	sub	sp, #64	; 0x40
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	4613      	mov	r3, r2
 80048b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b8:	e050      	b.n	800495c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d04c      	beq.n	800495c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048c8:	f7fd fa36 	bl	8001d38 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d241      	bcs.n	800495c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	330c      	adds	r3, #12
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048f8:	637a      	str	r2, [r7, #52]	; 0x34
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e5      	bne.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3314      	adds	r3, #20
 8004912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	613b      	str	r3, [r7, #16]
   return(result);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f023 0301 	bic.w	r3, r3, #1
 8004922:	63bb      	str	r3, [r7, #56]	; 0x38
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3314      	adds	r3, #20
 800492a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800492c:	623a      	str	r2, [r7, #32]
 800492e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	69f9      	ldr	r1, [r7, #28]
 8004932:	6a3a      	ldr	r2, [r7, #32]
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	61bb      	str	r3, [r7, #24]
   return(result);
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e5      	bne.n	800490c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e00f      	b.n	800497c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4013      	ands	r3, r2
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	429a      	cmp	r2, r3
 8004978:	d09f      	beq.n	80048ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3740      	adds	r7, #64	; 0x40
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	88fa      	ldrh	r2, [r7, #6]
 80049a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2222      	movs	r2, #34	; 0x22
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0220 	orr.w	r2, r2, #32
 80049f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b095      	sub	sp, #84	; 0x54
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	330c      	adds	r3, #12
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a28:	643a      	str	r2, [r7, #64]	; 0x40
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e5      	bne.n	8004a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3314      	adds	r3, #20
 8004a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3314      	adds	r3, #20
 8004a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e5      	bne.n	8004a3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d119      	bne.n	8004aac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f023 0310 	bic.w	r3, r3, #16
 8004a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a98:	61ba      	str	r2, [r7, #24]
 8004a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6979      	ldr	r1, [r7, #20]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e5      	bne.n	8004a78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004aba:	bf00      	nop
 8004abc:	3754      	adds	r7, #84	; 0x54
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff fecb 	bl	800487c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b085      	sub	sp, #20
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b21      	cmp	r3, #33	; 0x21
 8004b00:	d13e      	bne.n	8004b80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0a:	d114      	bne.n	8004b36 <UART_Transmit_IT+0x48>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d110      	bne.n	8004b36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	1c9a      	adds	r2, r3, #2
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	621a      	str	r2, [r3, #32]
 8004b34:	e008      	b.n	8004b48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	1c59      	adds	r1, r3, #1
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6211      	str	r1, [r2, #32]
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	4619      	mov	r1, r3
 8004b56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10f      	bne.n	8004b7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e000      	b.n	8004b82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b80:	2302      	movs	r3, #2
  }
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff fe5a 	bl	8004868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b08c      	sub	sp, #48	; 0x30
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b22      	cmp	r3, #34	; 0x22
 8004bd0:	f040 80ab 	bne.w	8004d2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bdc:	d117      	bne.n	8004c0e <UART_Receive_IT+0x50>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d113      	bne.n	8004c0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	1c9a      	adds	r2, r3, #2
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c0c:	e026      	b.n	8004c5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c20:	d007      	beq.n	8004c32 <UART_Receive_IT+0x74>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <UART_Receive_IT+0x82>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	e008      	b.n	8004c52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d15a      	bne.n	8004d26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0220 	bic.w	r2, r2, #32
 8004c7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d135      	bne.n	8004d1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	330c      	adds	r3, #12
 8004cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f023 0310 	bic.w	r3, r3, #16
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd6:	623a      	str	r2, [r7, #32]
 8004cd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	69f9      	ldr	r1, [r7, #28]
 8004cdc:	6a3a      	ldr	r2, [r7, #32]
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e5      	bne.n	8004cb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d10a      	bne.n	8004d0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff fdbb 	bl	8004890 <HAL_UARTEx_RxEventCallback>
 8004d1a:	e002      	b.n	8004d22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fc fd23 	bl	8001768 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e002      	b.n	8004d2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	e000      	b.n	8004d2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d2a:	2302      	movs	r3, #2
  }
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3730      	adds	r7, #48	; 0x30
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d38:	b0c0      	sub	sp, #256	; 0x100
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	68d9      	ldr	r1, [r3, #12]
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	ea40 0301 	orr.w	r3, r0, r1
 8004d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d8c:	f021 010c 	bic.w	r1, r1, #12
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dae:	6999      	ldr	r1, [r3, #24]
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	ea40 0301 	orr.w	r3, r0, r1
 8004dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b8f      	ldr	r3, [pc, #572]	; (8005000 <UART_SetConfig+0x2cc>)
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d005      	beq.n	8004dd4 <UART_SetConfig+0xa0>
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b8d      	ldr	r3, [pc, #564]	; (8005004 <UART_SetConfig+0x2d0>)
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d104      	bne.n	8004dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dd4:	f7fd fc08 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 8004dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ddc:	e003      	b.n	8004de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dde:	f7fd fbef 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8004de2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df0:	f040 810c 	bne.w	800500c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e06:	4622      	mov	r2, r4
 8004e08:	462b      	mov	r3, r5
 8004e0a:	1891      	adds	r1, r2, r2
 8004e0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e0e:	415b      	adcs	r3, r3
 8004e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e16:	4621      	mov	r1, r4
 8004e18:	eb12 0801 	adds.w	r8, r2, r1
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	eb43 0901 	adc.w	r9, r3, r1
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e36:	4690      	mov	r8, r2
 8004e38:	4699      	mov	r9, r3
 8004e3a:	4623      	mov	r3, r4
 8004e3c:	eb18 0303 	adds.w	r3, r8, r3
 8004e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e44:	462b      	mov	r3, r5
 8004e46:	eb49 0303 	adc.w	r3, r9, r3
 8004e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e62:	460b      	mov	r3, r1
 8004e64:	18db      	adds	r3, r3, r3
 8004e66:	653b      	str	r3, [r7, #80]	; 0x50
 8004e68:	4613      	mov	r3, r2
 8004e6a:	eb42 0303 	adc.w	r3, r2, r3
 8004e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8004e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e78:	f7fb ff4e 	bl	8000d18 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4b61      	ldr	r3, [pc, #388]	; (8005008 <UART_SetConfig+0x2d4>)
 8004e82:	fba3 2302 	umull	r2, r3, r3, r2
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	011c      	lsls	r4, r3, #4
 8004e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	1891      	adds	r1, r2, r2
 8004ea2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ea4:	415b      	adcs	r3, r3
 8004ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004eac:	4641      	mov	r1, r8
 8004eae:	eb12 0a01 	adds.w	sl, r2, r1
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ecc:	4692      	mov	sl, r2
 8004ece:	469b      	mov	fp, r3
 8004ed0:	4643      	mov	r3, r8
 8004ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eda:	464b      	mov	r3, r9
 8004edc:	eb4b 0303 	adc.w	r3, fp, r3
 8004ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	18db      	adds	r3, r3, r3
 8004efc:	643b      	str	r3, [r7, #64]	; 0x40
 8004efe:	4613      	mov	r3, r2
 8004f00:	eb42 0303 	adc.w	r3, r2, r3
 8004f04:	647b      	str	r3, [r7, #68]	; 0x44
 8004f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f0e:	f7fb ff03 	bl	8000d18 <__aeabi_uldivmod>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	4b3b      	ldr	r3, [pc, #236]	; (8005008 <UART_SetConfig+0x2d4>)
 8004f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	2264      	movs	r2, #100	; 0x64
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
 8004f26:	1acb      	subs	r3, r1, r3
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f2e:	4b36      	ldr	r3, [pc, #216]	; (8005008 <UART_SetConfig+0x2d4>)
 8004f30:	fba3 2302 	umull	r2, r3, r3, r2
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f3c:	441c      	add	r4, r3
 8004f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f50:	4642      	mov	r2, r8
 8004f52:	464b      	mov	r3, r9
 8004f54:	1891      	adds	r1, r2, r2
 8004f56:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f58:	415b      	adcs	r3, r3
 8004f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f60:	4641      	mov	r1, r8
 8004f62:	1851      	adds	r1, r2, r1
 8004f64:	6339      	str	r1, [r7, #48]	; 0x30
 8004f66:	4649      	mov	r1, r9
 8004f68:	414b      	adcs	r3, r1
 8004f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f78:	4659      	mov	r1, fp
 8004f7a:	00cb      	lsls	r3, r1, #3
 8004f7c:	4651      	mov	r1, sl
 8004f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f82:	4651      	mov	r1, sl
 8004f84:	00ca      	lsls	r2, r1, #3
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	189b      	adds	r3, r3, r2
 8004f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f94:	464b      	mov	r3, r9
 8004f96:	460a      	mov	r2, r1
 8004f98:	eb42 0303 	adc.w	r3, r2, r3
 8004f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	18db      	adds	r3, r3, r3
 8004fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fba:	4613      	mov	r3, r2
 8004fbc:	eb42 0303 	adc.w	r3, r2, r3
 8004fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fca:	f7fb fea5 	bl	8000d18 <__aeabi_uldivmod>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <UART_SetConfig+0x2d4>)
 8004fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	2164      	movs	r1, #100	; 0x64
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	3332      	adds	r3, #50	; 0x32
 8004fe6:	4a08      	ldr	r2, [pc, #32]	; (8005008 <UART_SetConfig+0x2d4>)
 8004fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	f003 0207 	and.w	r2, r3, #7
 8004ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4422      	add	r2, r4
 8004ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ffc:	e105      	b.n	800520a <UART_SetConfig+0x4d6>
 8004ffe:	bf00      	nop
 8005000:	40011000 	.word	0x40011000
 8005004:	40011400 	.word	0x40011400
 8005008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800500c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005010:	2200      	movs	r2, #0
 8005012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005016:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800501a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800501e:	4642      	mov	r2, r8
 8005020:	464b      	mov	r3, r9
 8005022:	1891      	adds	r1, r2, r2
 8005024:	6239      	str	r1, [r7, #32]
 8005026:	415b      	adcs	r3, r3
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
 800502a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800502e:	4641      	mov	r1, r8
 8005030:	1854      	adds	r4, r2, r1
 8005032:	4649      	mov	r1, r9
 8005034:	eb43 0501 	adc.w	r5, r3, r1
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	00eb      	lsls	r3, r5, #3
 8005042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005046:	00e2      	lsls	r2, r4, #3
 8005048:	4614      	mov	r4, r2
 800504a:	461d      	mov	r5, r3
 800504c:	4643      	mov	r3, r8
 800504e:	18e3      	adds	r3, r4, r3
 8005050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005054:	464b      	mov	r3, r9
 8005056:	eb45 0303 	adc.w	r3, r5, r3
 800505a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800506a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800507a:	4629      	mov	r1, r5
 800507c:	008b      	lsls	r3, r1, #2
 800507e:	4621      	mov	r1, r4
 8005080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005084:	4621      	mov	r1, r4
 8005086:	008a      	lsls	r2, r1, #2
 8005088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800508c:	f7fb fe44 	bl	8000d18 <__aeabi_uldivmod>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4b60      	ldr	r3, [pc, #384]	; (8005218 <UART_SetConfig+0x4e4>)
 8005096:	fba3 2302 	umull	r2, r3, r3, r2
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	011c      	lsls	r4, r3, #4
 800509e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050b0:	4642      	mov	r2, r8
 80050b2:	464b      	mov	r3, r9
 80050b4:	1891      	adds	r1, r2, r2
 80050b6:	61b9      	str	r1, [r7, #24]
 80050b8:	415b      	adcs	r3, r3
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050c0:	4641      	mov	r1, r8
 80050c2:	1851      	adds	r1, r2, r1
 80050c4:	6139      	str	r1, [r7, #16]
 80050c6:	4649      	mov	r1, r9
 80050c8:	414b      	adcs	r3, r1
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050d8:	4659      	mov	r1, fp
 80050da:	00cb      	lsls	r3, r1, #3
 80050dc:	4651      	mov	r1, sl
 80050de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050e2:	4651      	mov	r1, sl
 80050e4:	00ca      	lsls	r2, r1, #3
 80050e6:	4610      	mov	r0, r2
 80050e8:	4619      	mov	r1, r3
 80050ea:	4603      	mov	r3, r0
 80050ec:	4642      	mov	r2, r8
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050f4:	464b      	mov	r3, r9
 80050f6:	460a      	mov	r2, r1
 80050f8:	eb42 0303 	adc.w	r3, r2, r3
 80050fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	67bb      	str	r3, [r7, #120]	; 0x78
 800510a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005118:	4649      	mov	r1, r9
 800511a:	008b      	lsls	r3, r1, #2
 800511c:	4641      	mov	r1, r8
 800511e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005122:	4641      	mov	r1, r8
 8005124:	008a      	lsls	r2, r1, #2
 8005126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800512a:	f7fb fdf5 	bl	8000d18 <__aeabi_uldivmod>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4b39      	ldr	r3, [pc, #228]	; (8005218 <UART_SetConfig+0x4e4>)
 8005134:	fba3 1302 	umull	r1, r3, r3, r2
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	2164      	movs	r1, #100	; 0x64
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	3332      	adds	r3, #50	; 0x32
 8005146:	4a34      	ldr	r2, [pc, #208]	; (8005218 <UART_SetConfig+0x4e4>)
 8005148:	fba2 2303 	umull	r2, r3, r2, r3
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005152:	441c      	add	r4, r3
 8005154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005158:	2200      	movs	r2, #0
 800515a:	673b      	str	r3, [r7, #112]	; 0x70
 800515c:	677a      	str	r2, [r7, #116]	; 0x74
 800515e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005162:	4642      	mov	r2, r8
 8005164:	464b      	mov	r3, r9
 8005166:	1891      	adds	r1, r2, r2
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	415b      	adcs	r3, r3
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005172:	4641      	mov	r1, r8
 8005174:	1851      	adds	r1, r2, r1
 8005176:	6039      	str	r1, [r7, #0]
 8005178:	4649      	mov	r1, r9
 800517a:	414b      	adcs	r3, r1
 800517c:	607b      	str	r3, [r7, #4]
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800518a:	4659      	mov	r1, fp
 800518c:	00cb      	lsls	r3, r1, #3
 800518e:	4651      	mov	r1, sl
 8005190:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005194:	4651      	mov	r1, sl
 8005196:	00ca      	lsls	r2, r1, #3
 8005198:	4610      	mov	r0, r2
 800519a:	4619      	mov	r1, r3
 800519c:	4603      	mov	r3, r0
 800519e:	4642      	mov	r2, r8
 80051a0:	189b      	adds	r3, r3, r2
 80051a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a4:	464b      	mov	r3, r9
 80051a6:	460a      	mov	r2, r1
 80051a8:	eb42 0303 	adc.w	r3, r2, r3
 80051ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	663b      	str	r3, [r7, #96]	; 0x60
 80051b8:	667a      	str	r2, [r7, #100]	; 0x64
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051c6:	4649      	mov	r1, r9
 80051c8:	008b      	lsls	r3, r1, #2
 80051ca:	4641      	mov	r1, r8
 80051cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d0:	4641      	mov	r1, r8
 80051d2:	008a      	lsls	r2, r1, #2
 80051d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051d8:	f7fb fd9e 	bl	8000d18 <__aeabi_uldivmod>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <UART_SetConfig+0x4e4>)
 80051e2:	fba3 1302 	umull	r1, r3, r3, r2
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	2164      	movs	r1, #100	; 0x64
 80051ea:	fb01 f303 	mul.w	r3, r1, r3
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	3332      	adds	r3, #50	; 0x32
 80051f4:	4a08      	ldr	r2, [pc, #32]	; (8005218 <UART_SetConfig+0x4e4>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	f003 020f 	and.w	r2, r3, #15
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4422      	add	r2, r4
 8005208:	609a      	str	r2, [r3, #8]
}
 800520a:	bf00      	nop
 800520c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005210:	46bd      	mov	sp, r7
 8005212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005216:	bf00      	nop
 8005218:	51eb851f 	.word	0x51eb851f

0800521c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f103 0208 	add.w	r2, r3, #8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f04f 32ff 	mov.w	r2, #4294967295
 8005234:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f103 0208 	add.w	r2, r3, #8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f103 0208 	add.w	r2, r3, #8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005276:	b480      	push	{r7}
 8005278:	b085      	sub	sp, #20
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d103      	bne.n	8005296 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e00c      	b.n	80052b0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3308      	adds	r3, #8
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	e002      	b.n	80052a4 <vListInsert+0x2e>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d2f6      	bcs.n	800529e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	601a      	str	r2, [r3, #0]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6892      	ldr	r2, [r2, #8]
 80052fe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6852      	ldr	r2, [r2, #4]
 8005308:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d103      	bne.n	800531c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	1e5a      	subs	r2, r3, #1
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005346:	2301      	movs	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <xQueueGenericReset+0x2e>
        __asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	60fb      	str	r3, [r7, #12]
    }
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d05d      	beq.n	800542c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005374:	2b00      	cmp	r3, #0
 8005376:	d059      	beq.n	800542c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005380:	2100      	movs	r1, #0
 8005382:	fba3 2302 	umull	r2, r3, r3, r2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d000      	beq.n	800538c <xQueueGenericReset+0x50>
 800538a:	2101      	movs	r1, #1
 800538c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800538e:	2b00      	cmp	r3, #0
 8005390:	d14c      	bne.n	800542c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8005392:	f002 f871 	bl	8007478 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539e:	6939      	ldr	r1, [r7, #16]
 80053a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	441a      	add	r2, r3
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2200      	movs	r2, #0
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	3b01      	subs	r3, #1
 80053c4:	6939      	ldr	r1, [r7, #16]
 80053c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	441a      	add	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	22ff      	movs	r2, #255	; 0xff
 80053d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	22ff      	movs	r2, #255	; 0xff
 80053de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d114      	bne.n	8005412 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01a      	beq.n	8005426 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	3310      	adds	r3, #16
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 ffe3 	bl	80063c0 <xTaskRemoveFromEventList>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d012      	beq.n	8005426 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005400:	4b15      	ldr	r3, [pc, #84]	; (8005458 <xQueueGenericReset+0x11c>)
 8005402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	e009      	b.n	8005426 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3310      	adds	r3, #16
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff ff00 	bl	800521c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	3324      	adds	r3, #36	; 0x24
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fefb 	bl	800521c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005426:	f002 f857 	bl	80074d8 <vPortExitCritical>
 800542a:	e001      	b.n	8005430 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <xQueueGenericReset+0x110>
        __asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	60bb      	str	r3, [r7, #8]
    }
 8005448:	bf00      	nop
 800544a:	e7fe      	b.n	800544a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800544c:	697b      	ldr	r3, [r7, #20]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	; 0x28
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d02e      	beq.n	80054d2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005474:	2100      	movs	r1, #0
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	fba3 2302 	umull	r2, r3, r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d000      	beq.n	8005484 <xQueueGenericCreate+0x28>
 8005482:	2101      	movs	r1, #1
 8005484:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005486:	2b00      	cmp	r3, #0
 8005488:	d123      	bne.n	80054d2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005492:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005496:	d81c      	bhi.n	80054d2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	fb02 f303 	mul.w	r3, r2, r3
 80054a0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	3350      	adds	r3, #80	; 0x50
 80054a6:	4618      	mov	r0, r3
 80054a8:	f002 f910 	bl	80076cc <pvPortMalloc>
 80054ac:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01c      	beq.n	80054ee <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	3350      	adds	r3, #80	; 0x50
 80054bc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054be:	79fa      	ldrb	r2, [r7, #7]
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	4613      	mov	r3, r2
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 f814 	bl	80054f8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80054d0:	e00d      	b.n	80054ee <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <xQueueGenericCreate+0x92>
        __asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	613b      	str	r3, [r7, #16]
    }
 80054ea:	bf00      	nop
 80054ec:	e7fe      	b.n	80054ec <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80054ee:	69fb      	ldr	r3, [r7, #28]
    }
 80054f0:	4618      	mov	r0, r3
 80054f2:	3720      	adds	r7, #32
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d103      	bne.n	8005514 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e002      	b.n	800551a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005526:	2101      	movs	r1, #1
 8005528:	69b8      	ldr	r0, [r7, #24]
 800552a:	f7ff ff07 	bl	800533c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	2073      	movs	r0, #115	; 0x73
 800553e:	f004 f89f 	bl	8009680 <SEGGER_SYSVIEW_RecordU32x3>
}
 8005542:	bf00      	nop
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b08f      	sub	sp, #60	; 0x3c
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005558:	2300      	movs	r3, #0
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <xQueueReceive+0x30>
        __asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	623b      	str	r3, [r7, #32]
    }
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <xQueueReceive+0x3e>
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <xQueueReceive+0x42>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <xQueueReceive+0x44>
 800558e:	2300      	movs	r3, #0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <xQueueReceive+0x5e>
        __asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	61fb      	str	r3, [r7, #28]
    }
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055aa:	f001 f91b 	bl	80067e4 <xTaskGetSchedulerState>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d102      	bne.n	80055ba <xQueueReceive+0x6e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <xQueueReceive+0x72>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <xQueueReceive+0x74>
 80055be:	2300      	movs	r3, #0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <xQueueReceive+0x8e>
        __asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	61bb      	str	r3, [r7, #24]
    }
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80055da:	f001 ff4d 	bl	8007478 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d02f      	beq.n	800564a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ee:	f000 f8bd 	bl	800576c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	4618      	mov	r0, r3
 80055f6:	f004 fe1f 	bl	800a238 <SEGGER_SYSVIEW_ShrinkId>
 80055fa:	4604      	mov	r4, r0
 80055fc:	2000      	movs	r0, #0
 80055fe:	f004 fe1b 	bl	800a238 <SEGGER_SYSVIEW_ShrinkId>
 8005602:	4602      	mov	r2, r0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2101      	movs	r1, #1
 8005608:	9100      	str	r1, [sp, #0]
 800560a:	4621      	mov	r1, r4
 800560c:	205c      	movs	r0, #92	; 0x5c
 800560e:	f004 f8ad 	bl	800976c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	1e5a      	subs	r2, r3, #1
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00f      	beq.n	8005642 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	3310      	adds	r3, #16
 8005626:	4618      	mov	r0, r3
 8005628:	f000 feca 	bl	80063c0 <xTaskRemoveFromEventList>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005632:	4b4d      	ldr	r3, [pc, #308]	; (8005768 <xQueueReceive+0x21c>)
 8005634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005642:	f001 ff49 	bl	80074d8 <vPortExitCritical>
                return pdPASS;
 8005646:	2301      	movs	r3, #1
 8005648:	e08a      	b.n	8005760 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d113      	bne.n	8005678 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005650:	f001 ff42 	bl	80074d8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	4618      	mov	r0, r3
 8005658:	f004 fdee 	bl	800a238 <SEGGER_SYSVIEW_ShrinkId>
 800565c:	4604      	mov	r4, r0
 800565e:	2000      	movs	r0, #0
 8005660:	f004 fdea 	bl	800a238 <SEGGER_SYSVIEW_ShrinkId>
 8005664:	4602      	mov	r2, r0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2101      	movs	r1, #1
 800566a:	9100      	str	r1, [sp, #0]
 800566c:	4621      	mov	r1, r4
 800566e:	205c      	movs	r0, #92	; 0x5c
 8005670:	f004 f87c 	bl	800976c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005674:	2300      	movs	r3, #0
 8005676:	e073      	b.n	8005760 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800567e:	f107 0310 	add.w	r3, r7, #16
 8005682:	4618      	mov	r0, r3
 8005684:	f000 ff74 	bl	8006570 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005688:	2301      	movs	r3, #1
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800568c:	f001 ff24 	bl	80074d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005690:	f000 fb72 	bl	8005d78 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005694:	f001 fef0 	bl	8007478 <vPortEnterCritical>
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800569e:	b25b      	sxtb	r3, r3
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d103      	bne.n	80056ae <xQueueReceive+0x162>
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056b4:	b25b      	sxtb	r3, r3
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ba:	d103      	bne.n	80056c4 <xQueueReceive+0x178>
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056c4:	f001 ff08 	bl	80074d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056c8:	1d3a      	adds	r2, r7, #4
 80056ca:	f107 0310 	add.w	r3, r7, #16
 80056ce:	4611      	mov	r1, r2
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 ff63 	bl	800659c <xTaskCheckForTimeOut>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d124      	bne.n	8005726 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056de:	f000 f8bd 	bl	800585c <prvIsQueueEmpty>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d018      	beq.n	800571a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	3324      	adds	r3, #36	; 0x24
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4611      	mov	r1, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fdf9 	bl	80062e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80056f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056f8:	f000 f85e 	bl	80057b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80056fc:	f000 fb4a 	bl	8005d94 <xTaskResumeAll>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	f47f af69 	bne.w	80055da <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005708:	4b17      	ldr	r3, [pc, #92]	; (8005768 <xQueueReceive+0x21c>)
 800570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	e75f      	b.n	80055da <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800571a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800571c:	f000 f84c 	bl	80057b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005720:	f000 fb38 	bl	8005d94 <xTaskResumeAll>
 8005724:	e759      	b.n	80055da <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005728:	f000 f846 	bl	80057b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800572c:	f000 fb32 	bl	8005d94 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005732:	f000 f893 	bl	800585c <prvIsQueueEmpty>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	f43f af4e 	beq.w	80055da <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	4618      	mov	r0, r3
 8005742:	f004 fd79 	bl	800a238 <SEGGER_SYSVIEW_ShrinkId>
 8005746:	4604      	mov	r4, r0
 8005748:	2000      	movs	r0, #0
 800574a:	f004 fd75 	bl	800a238 <SEGGER_SYSVIEW_ShrinkId>
 800574e:	4602      	mov	r2, r0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2101      	movs	r1, #1
 8005754:	9100      	str	r1, [sp, #0]
 8005756:	4621      	mov	r1, r4
 8005758:	205c      	movs	r0, #92	; 0x5c
 800575a:	f004 f807 	bl	800976c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800575e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005760:	4618      	mov	r0, r3
 8005762:	3734      	adds	r7, #52	; 0x34
 8005764:	46bd      	mov	sp, r7
 8005766:	bd90      	pop	{r4, r7, pc}
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d018      	beq.n	80057b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	441a      	add	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	429a      	cmp	r2, r3
 8005796:	d303      	bcc.n	80057a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68d9      	ldr	r1, [r3, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	461a      	mov	r2, r3
 80057aa:	6838      	ldr	r0, [r7, #0]
 80057ac:	f004 ff24 	bl	800a5f8 <memcpy>
    }
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80057c0:	f001 fe5a 	bl	8007478 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80057cc:	e011      	b.n	80057f2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d012      	beq.n	80057fc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3324      	adds	r3, #36	; 0x24
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fdf0 	bl	80063c0 <xTaskRemoveFromEventList>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80057e6:	f000 ff3f 	bl	8006668 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80057f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dce9      	bgt.n	80057ce <prvUnlockQueue+0x16>
 80057fa:	e000      	b.n	80057fe <prvUnlockQueue+0x46>
                    break;
 80057fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	22ff      	movs	r2, #255	; 0xff
 8005802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005806:	f001 fe67 	bl	80074d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800580a:	f001 fe35 	bl	8007478 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005814:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005816:	e011      	b.n	800583c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d012      	beq.n	8005846 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3310      	adds	r3, #16
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fdcb 	bl	80063c0 <xTaskRemoveFromEventList>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005830:	f000 ff1a 	bl	8006668 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005834:	7bbb      	ldrb	r3, [r7, #14]
 8005836:	3b01      	subs	r3, #1
 8005838:	b2db      	uxtb	r3, r3
 800583a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800583c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005840:	2b00      	cmp	r3, #0
 8005842:	dce9      	bgt.n	8005818 <prvUnlockQueue+0x60>
 8005844:	e000      	b.n	8005848 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005846:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	22ff      	movs	r2, #255	; 0xff
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005850:	f001 fe42 	bl	80074d8 <vPortExitCritical>
}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005864:	f001 fe08 	bl	8007478 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e001      	b.n	800587a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800587a:	f001 fe2d 	bl	80074d8 <vPortExitCritical>

    return xReturn;
 800587e:	68fb      	ldr	r3, [r7, #12]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	60fb      	str	r3, [r7, #12]
    }
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d024      	beq.n	8005902 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	e01e      	b.n	80058fc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80058be:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <vQueueAddToRegistry+0xa8>)
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4413      	add	r3, r2
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d105      	bne.n	80058da <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4a17      	ldr	r2, [pc, #92]	; (8005930 <vQueueAddToRegistry+0xa8>)
 80058d4:	4413      	add	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
                    break;
 80058d8:	e013      	b.n	8005902 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <vQueueAddToRegistry+0x6e>
 80058e0:	4a13      	ldr	r2, [pc, #76]	; (8005930 <vQueueAddToRegistry+0xa8>)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4a0f      	ldr	r2, [pc, #60]	; (8005930 <vQueueAddToRegistry+0xa8>)
 80058f2:	4413      	add	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	3301      	adds	r3, #1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b07      	cmp	r3, #7
 8005900:	d9dd      	bls.n	80058be <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00f      	beq.n	8005928 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4618      	mov	r0, r3
 8005918:	f004 fc8e 	bl	800a238 <SEGGER_SYSVIEW_ShrinkId>
 800591c:	4601      	mov	r1, r0
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	461a      	mov	r2, r3
 8005922:	2071      	movs	r0, #113	; 0x71
 8005924:	f003 fe52 	bl	80095cc <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8005928:	bf00      	nop
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000304 	.word	0x20000304

08005934 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005944:	f001 fd98 	bl	8007478 <vPortEnterCritical>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800594e:	b25b      	sxtb	r3, r3
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d103      	bne.n	800595e <vQueueWaitForMessageRestricted+0x2a>
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005964:	b25b      	sxtb	r3, r3
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596a:	d103      	bne.n	8005974 <vQueueWaitForMessageRestricted+0x40>
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005974:	f001 fdb0 	bl	80074d8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	2b00      	cmp	r3, #0
 800597e:	d106      	bne.n	800598e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	3324      	adds	r3, #36	; 0x24
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fcd1 	bl	8006330 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800598e:	6978      	ldr	r0, [r7, #20]
 8005990:	f7ff ff12 	bl	80057b8 <prvUnlockQueue>
    }
 8005994:	bf00      	nop
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800599c:	b580      	push	{r7, lr}
 800599e:	b08c      	sub	sp, #48	; 0x30
 80059a0:	af04      	add	r7, sp, #16
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059ac:	88fb      	ldrh	r3, [r7, #6]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 fe8b 	bl	80076cc <pvPortMalloc>
 80059b6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d013      	beq.n	80059e6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059be:	2058      	movs	r0, #88	; 0x58
 80059c0:	f001 fe84 	bl	80076cc <pvPortMalloc>
 80059c4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80059cc:	2258      	movs	r2, #88	; 0x58
 80059ce:	2100      	movs	r1, #0
 80059d0:	69f8      	ldr	r0, [r7, #28]
 80059d2:	f004 fe1f 	bl	800a614 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	631a      	str	r2, [r3, #48]	; 0x30
 80059dc:	e005      	b.n	80059ea <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80059de:	6978      	ldr	r0, [r7, #20]
 80059e0:	f001 ff2e 	bl	8007840 <vPortFree>
 80059e4:	e001      	b.n	80059ea <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d013      	beq.n	8005a18 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059f0:	88fa      	ldrh	r2, [r7, #6]
 80059f2:	2300      	movs	r3, #0
 80059f4:	9303      	str	r3, [sp, #12]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	9302      	str	r3, [sp, #8]
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f80e 	bl	8005a28 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005a0c:	69f8      	ldr	r0, [r7, #28]
 8005a0e:	f000 f899 	bl	8005b44 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005a12:	2301      	movs	r3, #1
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	e002      	b.n	8005a1e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a18:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
    }
 8005a20:	4618      	mov	r0, r3
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	461a      	mov	r2, r3
 8005a40:	21a5      	movs	r1, #165	; 0xa5
 8005a42:	f004 fde7 	bl	800a614 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a50:	3b01      	subs	r3, #1
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f023 0307 	bic.w	r3, r3, #7
 8005a5e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <prvInitialiseNewTask+0x58>
        __asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	617b      	str	r3, [r7, #20]
    }
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d01e      	beq.n	8005ac4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	e012      	b.n	8005ab2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	7819      	ldrb	r1, [r3, #0]
 8005a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	3334      	adds	r3, #52	; 0x34
 8005a9c:	460a      	mov	r2, r1
 8005a9e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d006      	beq.n	8005aba <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	2b09      	cmp	r3, #9
 8005ab6:	d9e9      	bls.n	8005a8c <prvInitialiseNewTask+0x64>
 8005ab8:	e000      	b.n	8005abc <prvInitialiseNewTask+0x94>
            {
                break;
 8005aba:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d90a      	bls.n	8005ae0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	613b      	str	r3, [r7, #16]
    }
 8005adc:	bf00      	nop
 8005ade:	e7fe      	b.n	8005ade <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d901      	bls.n	8005aea <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aee:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005af4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	3304      	adds	r3, #4
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fbae 	bl	800525c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	3318      	adds	r3, #24
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff fba9 	bl	800525c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	f1c3 0205 	rsb	r2, r3, #5
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	69b8      	ldr	r0, [r7, #24]
 8005b26:	f001 fb75 	bl	8007214 <pxPortInitialiseStack>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b3a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b3c:	bf00      	nop
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005b44:	b5b0      	push	{r4, r5, r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005b4c:	f001 fc94 	bl	8007478 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005b50:	4b4f      	ldr	r3, [pc, #316]	; (8005c90 <prvAddNewTaskToReadyList+0x14c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3301      	adds	r3, #1
 8005b56:	4a4e      	ldr	r2, [pc, #312]	; (8005c90 <prvAddNewTaskToReadyList+0x14c>)
 8005b58:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005b5a:	4b4e      	ldr	r3, [pc, #312]	; (8005c94 <prvAddNewTaskToReadyList+0x150>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005b62:	4a4c      	ldr	r2, [pc, #304]	; (8005c94 <prvAddNewTaskToReadyList+0x150>)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b68:	4b49      	ldr	r3, [pc, #292]	; (8005c90 <prvAddNewTaskToReadyList+0x14c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d110      	bne.n	8005b92 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005b70:	f000 fd9e 	bl	80066b0 <prvInitialiseTaskLists>
 8005b74:	e00d      	b.n	8005b92 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005b76:	4b48      	ldr	r3, [pc, #288]	; (8005c98 <prvAddNewTaskToReadyList+0x154>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b7e:	4b45      	ldr	r3, [pc, #276]	; (8005c94 <prvAddNewTaskToReadyList+0x150>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d802      	bhi.n	8005b92 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005b8c:	4a41      	ldr	r2, [pc, #260]	; (8005c94 <prvAddNewTaskToReadyList+0x150>)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005b92:	4b42      	ldr	r3, [pc, #264]	; (8005c9c <prvAddNewTaskToReadyList+0x158>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3301      	adds	r3, #1
 8005b98:	4a40      	ldr	r2, [pc, #256]	; (8005c9c <prvAddNewTaskToReadyList+0x158>)
 8005b9a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b9c:	4b3f      	ldr	r3, [pc, #252]	; (8005c9c <prvAddNewTaskToReadyList+0x158>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d016      	beq.n	8005bd8 <prvAddNewTaskToReadyList+0x94>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f004 fa7d 	bl	800a0ac <SEGGER_SYSVIEW_OnTaskCreate>
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	461d      	mov	r5, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	461c      	mov	r4, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	1ae3      	subs	r3, r4, r3
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	462b      	mov	r3, r5
 8005bd4:	f001 fff6 	bl	8007bc4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f004 faea 	bl	800a1b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	2201      	movs	r2, #1
 8005be6:	409a      	lsls	r2, r3
 8005be8:	4b2d      	ldr	r3, [pc, #180]	; (8005ca0 <prvAddNewTaskToReadyList+0x15c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	4a2c      	ldr	r2, [pc, #176]	; (8005ca0 <prvAddNewTaskToReadyList+0x15c>)
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf6:	492b      	ldr	r1, [pc, #172]	; (8005ca4 <prvAddNewTaskToReadyList+0x160>)
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	3304      	adds	r3, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	609a      	str	r2, [r3, #8]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60da      	str	r2, [r3, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	3204      	adds	r2, #4
 8005c1e:	605a      	str	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	1d1a      	adds	r2, r3, #4
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	609a      	str	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <prvAddNewTaskToReadyList+0x160>)
 8005c36:	441a      	add	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	615a      	str	r2, [r3, #20]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	4918      	ldr	r1, [pc, #96]	; (8005ca4 <prvAddNewTaskToReadyList+0x160>)
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	1c59      	adds	r1, r3, #1
 8005c50:	4814      	ldr	r0, [pc, #80]	; (8005ca4 <prvAddNewTaskToReadyList+0x160>)
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4403      	add	r3, r0
 8005c5c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005c5e:	f001 fc3b 	bl	80074d8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005c62:	4b0d      	ldr	r3, [pc, #52]	; (8005c98 <prvAddNewTaskToReadyList+0x154>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00e      	beq.n	8005c88 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c6a:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <prvAddNewTaskToReadyList+0x150>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d207      	bcs.n	8005c88 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005c78:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <prvAddNewTaskToReadyList+0x164>)
 8005c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c90:	2000041c 	.word	0x2000041c
 8005c94:	20000344 	.word	0x20000344
 8005c98:	20000428 	.word	0x20000428
 8005c9c:	20000438 	.word	0x20000438
 8005ca0:	20000424 	.word	0x20000424
 8005ca4:	20000348 	.word	0x20000348
 8005ca8:	e000ed04 	.word	0xe000ed04

08005cac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005cb2:	4b29      	ldr	r3, [pc, #164]	; (8005d58 <vTaskStartScheduler+0xac>)
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2282      	movs	r2, #130	; 0x82
 8005cbe:	4927      	ldr	r1, [pc, #156]	; (8005d5c <vTaskStartScheduler+0xb0>)
 8005cc0:	4827      	ldr	r0, [pc, #156]	; (8005d60 <vTaskStartScheduler+0xb4>)
 8005cc2:	f7ff fe6b 	bl	800599c <xTaskCreate>
 8005cc6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d102      	bne.n	8005cd4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8005cce:	f001 f81d 	bl	8006d0c <xTimerCreateTimerTask>
 8005cd2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d129      	bne.n	8005d2e <vTaskStartScheduler+0x82>
        __asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	60bb      	str	r3, [r7, #8]
    }
 8005cec:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005cee:	4b1d      	ldr	r3, [pc, #116]	; (8005d64 <vTaskStartScheduler+0xb8>)
 8005cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005cf6:	4b1c      	ldr	r3, [pc, #112]	; (8005d68 <vTaskStartScheduler+0xbc>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <vTaskStartScheduler+0xc0>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8005d02:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <vTaskStartScheduler+0xc4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3334      	adds	r3, #52	; 0x34
 8005d08:	2205      	movs	r2, #5
 8005d0a:	4914      	ldr	r1, [pc, #80]	; (8005d5c <vTaskStartScheduler+0xb0>)
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f004 fc63 	bl	800a5d8 <memcmp>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <vTaskStartScheduler+0x78>
 8005d18:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <vTaskStartScheduler+0xc4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f004 fa07 	bl	800a130 <SEGGER_SYSVIEW_OnTaskStartExec>
 8005d22:	e001      	b.n	8005d28 <vTaskStartScheduler+0x7c>
 8005d24:	f004 f9a6 	bl	800a074 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005d28:	f001 fb04 	bl	8007334 <xPortStartScheduler>
 8005d2c:	e00e      	b.n	8005d4c <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d10a      	bne.n	8005d4c <vTaskStartScheduler+0xa0>
        __asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	607b      	str	r3, [r7, #4]
    }
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <vTaskStartScheduler+0xc8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000440 	.word	0x20000440
 8005d5c:	0800dca4 	.word	0x0800dca4
 8005d60:	08006681 	.word	0x08006681
 8005d64:	2000043c 	.word	0x2000043c
 8005d68:	20000428 	.word	0x20000428
 8005d6c:	20000420 	.word	0x20000420
 8005d70:	20000344 	.word	0x20000344
 8005d74:	20000010 	.word	0x20000010

08005d78 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005d7c:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <vTaskSuspendAll+0x18>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	4a03      	ldr	r2, [pc, #12]	; (8005d90 <vTaskSuspendAll+0x18>)
 8005d84:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005d86:	bf00      	nop
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	20000444 	.word	0x20000444

08005d94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005da2:	4b73      	ldr	r3, [pc, #460]	; (8005f70 <xTaskResumeAll+0x1dc>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <xTaskResumeAll+0x2c>
        __asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	607b      	str	r3, [r7, #4]
    }
 8005dbc:	bf00      	nop
 8005dbe:	e7fe      	b.n	8005dbe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005dc0:	f001 fb5a 	bl	8007478 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005dc4:	4b6a      	ldr	r3, [pc, #424]	; (8005f70 <xTaskResumeAll+0x1dc>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	4a69      	ldr	r2, [pc, #420]	; (8005f70 <xTaskResumeAll+0x1dc>)
 8005dcc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dce:	4b68      	ldr	r3, [pc, #416]	; (8005f70 <xTaskResumeAll+0x1dc>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f040 80c4 	bne.w	8005f60 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dd8:	4b66      	ldr	r3, [pc, #408]	; (8005f74 <xTaskResumeAll+0x1e0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 80bf 	beq.w	8005f60 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005de2:	e08e      	b.n	8005f02 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de4:	4b64      	ldr	r3, [pc, #400]	; (8005f78 <xTaskResumeAll+0x1e4>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	6a12      	ldr	r2, [r2, #32]
 8005dfa:	609a      	str	r2, [r3, #8]
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	69fa      	ldr	r2, [r7, #28]
 8005e02:	69d2      	ldr	r2, [r2, #28]
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	3318      	adds	r3, #24
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d103      	bne.n	8005e1a <xTaskResumeAll+0x86>
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	6a1a      	ldr	r2, [r3, #32]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	1e5a      	subs	r2, r3, #1
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	68d2      	ldr	r2, [r2, #12]
 8005e38:	609a      	str	r2, [r3, #8]
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	6892      	ldr	r2, [r2, #8]
 8005e42:	605a      	str	r2, [r3, #4]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d103      	bne.n	8005e58 <xTaskResumeAll+0xc4>
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	605a      	str	r2, [r3, #4]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	615a      	str	r2, [r3, #20]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	1e5a      	subs	r2, r3, #1
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f004 f9a2 	bl	800a1b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	2201      	movs	r2, #1
 8005e76:	409a      	lsls	r2, r3
 8005e78:	4b40      	ldr	r3, [pc, #256]	; (8005f7c <xTaskResumeAll+0x1e8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	4a3f      	ldr	r2, [pc, #252]	; (8005f7c <xTaskResumeAll+0x1e8>)
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e86:	493e      	ldr	r1, [pc, #248]	; (8005f80 <xTaskResumeAll+0x1ec>)
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	3304      	adds	r3, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60bb      	str	r3, [r7, #8]
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	609a      	str	r2, [r3, #8]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	60da      	str	r2, [r3, #12]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	3204      	adds	r2, #4
 8005eae:	605a      	str	r2, [r3, #4]
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	1d1a      	adds	r2, r3, #4
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	609a      	str	r2, [r3, #8]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4a2e      	ldr	r2, [pc, #184]	; (8005f80 <xTaskResumeAll+0x1ec>)
 8005ec6:	441a      	add	r2, r3
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	615a      	str	r2, [r3, #20]
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed0:	492b      	ldr	r1, [pc, #172]	; (8005f80 <xTaskResumeAll+0x1ec>)
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	1c59      	adds	r1, r3, #1
 8005ee0:	4827      	ldr	r0, [pc, #156]	; (8005f80 <xTaskResumeAll+0x1ec>)
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4403      	add	r3, r0
 8005eec:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef2:	4b24      	ldr	r3, [pc, #144]	; (8005f84 <xTaskResumeAll+0x1f0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d302      	bcc.n	8005f02 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8005efc:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <xTaskResumeAll+0x1f4>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f02:	4b1d      	ldr	r3, [pc, #116]	; (8005f78 <xTaskResumeAll+0x1e4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f47f af6c 	bne.w	8005de4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005f12:	f000 fc4b 	bl	80067ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f16:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <xTaskResumeAll+0x1f8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d010      	beq.n	8005f44 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005f22:	f000 f859 	bl	8005fd8 <xTaskIncrementTick>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8005f2c:	4b16      	ldr	r3, [pc, #88]	; (8005f88 <xTaskResumeAll+0x1f4>)
 8005f2e:	2201      	movs	r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1f1      	bne.n	8005f22 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8005f3e:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <xTaskResumeAll+0x1f8>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005f44:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <xTaskResumeAll+0x1f4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d009      	beq.n	8005f60 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005f50:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <xTaskResumeAll+0x1fc>)
 8005f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005f60:	f001 faba 	bl	80074d8 <vPortExitCritical>

    return xAlreadyYielded;
 8005f64:	69bb      	ldr	r3, [r7, #24]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3720      	adds	r7, #32
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000444 	.word	0x20000444
 8005f74:	2000041c 	.word	0x2000041c
 8005f78:	200003dc 	.word	0x200003dc
 8005f7c:	20000424 	.word	0x20000424
 8005f80:	20000348 	.word	0x20000348
 8005f84:	20000344 	.word	0x20000344
 8005f88:	20000430 	.word	0x20000430
 8005f8c:	2000042c 	.word	0x2000042c
 8005f90:	e000ed04 	.word	0xe000ed04

08005f94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005f9a:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <xTaskGetTickCount+0x1c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005fa0:	687b      	ldr	r3, [r7, #4]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20000420 	.word	0x20000420

08005fb4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fba:	f001 fb47 	bl	800764c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005fc2:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <xTaskGetTickCountFromISR+0x20>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005fc8:	683b      	ldr	r3, [r7, #0]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000420 	.word	0x20000420

08005fd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08a      	sub	sp, #40	; 0x28
 8005fdc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fe2:	4b7f      	ldr	r3, [pc, #508]	; (80061e0 <xTaskIncrementTick+0x208>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f040 80f0 	bne.w	80061cc <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fec:	4b7d      	ldr	r3, [pc, #500]	; (80061e4 <xTaskIncrementTick+0x20c>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005ff4:	4a7b      	ldr	r2, [pc, #492]	; (80061e4 <xTaskIncrementTick+0x20c>)
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d120      	bne.n	8006042 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006000:	4b79      	ldr	r3, [pc, #484]	; (80061e8 <xTaskIncrementTick+0x210>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <xTaskIncrementTick+0x48>
        __asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	607b      	str	r3, [r7, #4]
    }
 800601c:	bf00      	nop
 800601e:	e7fe      	b.n	800601e <xTaskIncrementTick+0x46>
 8006020:	4b71      	ldr	r3, [pc, #452]	; (80061e8 <xTaskIncrementTick+0x210>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	4b71      	ldr	r3, [pc, #452]	; (80061ec <xTaskIncrementTick+0x214>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a6f      	ldr	r2, [pc, #444]	; (80061e8 <xTaskIncrementTick+0x210>)
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	4a6f      	ldr	r2, [pc, #444]	; (80061ec <xTaskIncrementTick+0x214>)
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	4b6e      	ldr	r3, [pc, #440]	; (80061f0 <xTaskIncrementTick+0x218>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3301      	adds	r3, #1
 800603a:	4a6d      	ldr	r2, [pc, #436]	; (80061f0 <xTaskIncrementTick+0x218>)
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	f000 fbb5 	bl	80067ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006042:	4b6c      	ldr	r3, [pc, #432]	; (80061f4 <xTaskIncrementTick+0x21c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6a3a      	ldr	r2, [r7, #32]
 8006048:	429a      	cmp	r2, r3
 800604a:	f0c0 80aa 	bcc.w	80061a2 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800604e:	4b66      	ldr	r3, [pc, #408]	; (80061e8 <xTaskIncrementTick+0x210>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006058:	4b66      	ldr	r3, [pc, #408]	; (80061f4 <xTaskIncrementTick+0x21c>)
 800605a:	f04f 32ff 	mov.w	r2, #4294967295
 800605e:	601a      	str	r2, [r3, #0]
                    break;
 8006060:	e09f      	b.n	80061a2 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006062:	4b61      	ldr	r3, [pc, #388]	; (80061e8 <xTaskIncrementTick+0x210>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006072:	6a3a      	ldr	r2, [r7, #32]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	429a      	cmp	r2, r3
 8006078:	d203      	bcs.n	8006082 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800607a:	4a5e      	ldr	r2, [pc, #376]	; (80061f4 <xTaskIncrementTick+0x21c>)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006080:	e08f      	b.n	80061a2 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	68d2      	ldr	r2, [r2, #12]
 8006090:	609a      	str	r2, [r3, #8]
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	6892      	ldr	r2, [r2, #8]
 800609a:	605a      	str	r2, [r3, #4]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	3304      	adds	r3, #4
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d103      	bne.n	80060b0 <xTaskIncrementTick+0xd8>
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	605a      	str	r2, [r3, #4]
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2200      	movs	r2, #0
 80060b4:	615a      	str	r2, [r3, #20]
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	1e5a      	subs	r2, r3, #1
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01e      	beq.n	8006106 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	6a12      	ldr	r2, [r2, #32]
 80060d6:	609a      	str	r2, [r3, #8]
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	69d2      	ldr	r2, [r2, #28]
 80060e0:	605a      	str	r2, [r3, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	3318      	adds	r3, #24
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d103      	bne.n	80060f6 <xTaskIncrementTick+0x11e>
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	6a1a      	ldr	r2, [r3, #32]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	605a      	str	r2, [r3, #4]
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2200      	movs	r2, #0
 80060fa:	629a      	str	r2, [r3, #40]	; 0x28
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	1e5a      	subs	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	4618      	mov	r0, r3
 800610a:	f004 f853 	bl	800a1b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	2201      	movs	r2, #1
 8006114:	409a      	lsls	r2, r3
 8006116:	4b38      	ldr	r3, [pc, #224]	; (80061f8 <xTaskIncrementTick+0x220>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4313      	orrs	r3, r2
 800611c:	4a36      	ldr	r2, [pc, #216]	; (80061f8 <xTaskIncrementTick+0x220>)
 800611e:	6013      	str	r3, [r2, #0]
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006124:	4935      	ldr	r1, [pc, #212]	; (80061fc <xTaskIncrementTick+0x224>)
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	3304      	adds	r3, #4
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	609a      	str	r2, [r3, #8]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	60da      	str	r2, [r3, #12]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	3204      	adds	r2, #4
 800614c:	605a      	str	r2, [r3, #4]
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	1d1a      	adds	r2, r3, #4
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	609a      	str	r2, [r3, #8]
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4a26      	ldr	r2, [pc, #152]	; (80061fc <xTaskIncrementTick+0x224>)
 8006164:	441a      	add	r2, r3
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	615a      	str	r2, [r3, #20]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616e:	4923      	ldr	r1, [pc, #140]	; (80061fc <xTaskIncrementTick+0x224>)
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	1c59      	adds	r1, r3, #1
 800617e:	481f      	ldr	r0, [pc, #124]	; (80061fc <xTaskIncrementTick+0x224>)
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4403      	add	r3, r0
 800618a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006190:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <xTaskIncrementTick+0x228>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	429a      	cmp	r2, r3
 8006198:	f67f af59 	bls.w	800604e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061a0:	e755      	b.n	800604e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061a2:	4b17      	ldr	r3, [pc, #92]	; (8006200 <xTaskIncrementTick+0x228>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	4914      	ldr	r1, [pc, #80]	; (80061fc <xTaskIncrementTick+0x224>)
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d901      	bls.n	80061be <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80061ba:	2301      	movs	r3, #1
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <xTaskIncrementTick+0x22c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80061c6:	2301      	movs	r3, #1
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ca:	e004      	b.n	80061d6 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80061cc:	4b0e      	ldr	r3, [pc, #56]	; (8006208 <xTaskIncrementTick+0x230>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3301      	adds	r3, #1
 80061d2:	4a0d      	ldr	r2, [pc, #52]	; (8006208 <xTaskIncrementTick+0x230>)
 80061d4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3728      	adds	r7, #40	; 0x28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20000444 	.word	0x20000444
 80061e4:	20000420 	.word	0x20000420
 80061e8:	200003d4 	.word	0x200003d4
 80061ec:	200003d8 	.word	0x200003d8
 80061f0:	20000434 	.word	0x20000434
 80061f4:	2000043c 	.word	0x2000043c
 80061f8:	20000424 	.word	0x20000424
 80061fc:	20000348 	.word	0x20000348
 8006200:	20000344 	.word	0x20000344
 8006204:	20000430 	.word	0x20000430
 8006208:	2000042c 	.word	0x2000042c

0800620c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006212:	4b2f      	ldr	r3, [pc, #188]	; (80062d0 <vTaskSwitchContext+0xc4>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800621a:	4b2e      	ldr	r3, [pc, #184]	; (80062d4 <vTaskSwitchContext+0xc8>)
 800621c:	2201      	movs	r2, #1
 800621e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006220:	e052      	b.n	80062c8 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8006222:	4b2c      	ldr	r3, [pc, #176]	; (80062d4 <vTaskSwitchContext+0xc8>)
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006228:	4b2b      	ldr	r3, [pc, #172]	; (80062d8 <vTaskSwitchContext+0xcc>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	fab3 f383 	clz	r3, r3
 8006234:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	f1c3 031f 	rsb	r3, r3, #31
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	4927      	ldr	r1, [pc, #156]	; (80062dc <vTaskSwitchContext+0xd0>)
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <vTaskSwitchContext+0x5c>
        __asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	607b      	str	r3, [r7, #4]
    }
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <vTaskSwitchContext+0x5a>
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4a1a      	ldr	r2, [pc, #104]	; (80062dc <vTaskSwitchContext+0xd0>)
 8006274:	4413      	add	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	3308      	adds	r3, #8
 800628a:	429a      	cmp	r2, r3
 800628c:	d104      	bne.n	8006298 <vTaskSwitchContext+0x8c>
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	605a      	str	r2, [r3, #4]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	4a10      	ldr	r2, [pc, #64]	; (80062e0 <vTaskSwitchContext+0xd4>)
 80062a0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80062a2:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <vTaskSwitchContext+0xd4>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3334      	adds	r3, #52	; 0x34
 80062a8:	2205      	movs	r2, #5
 80062aa:	490e      	ldr	r1, [pc, #56]	; (80062e4 <vTaskSwitchContext+0xd8>)
 80062ac:	4618      	mov	r0, r3
 80062ae:	f004 f993 	bl	800a5d8 <memcmp>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <vTaskSwitchContext+0xb8>
 80062b8:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <vTaskSwitchContext+0xd4>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4618      	mov	r0, r3
 80062be:	f003 ff37 	bl	800a130 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80062c2:	e001      	b.n	80062c8 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 80062c4:	f003 fed6 	bl	800a074 <SEGGER_SYSVIEW_OnIdle>
}
 80062c8:	bf00      	nop
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20000444 	.word	0x20000444
 80062d4:	20000430 	.word	0x20000430
 80062d8:	20000424 	.word	0x20000424
 80062dc:	20000348 	.word	0x20000348
 80062e0:	20000344 	.word	0x20000344
 80062e4:	0800dca4 	.word	0x0800dca4

080062e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	60fb      	str	r3, [r7, #12]
    }
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800630e:	4b07      	ldr	r3, [pc, #28]	; (800632c <vTaskPlaceOnEventList+0x44>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3318      	adds	r3, #24
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fe ffad 	bl	8005276 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800631c:	2101      	movs	r1, #1
 800631e:	6838      	ldr	r0, [r7, #0]
 8006320:	f000 fc74 	bl	8006c0c <prvAddCurrentTaskToDelayedList>
}
 8006324:	bf00      	nop
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	20000344 	.word	0x20000344

08006330 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	613b      	str	r3, [r7, #16]
    }
 8006354:	bf00      	nop
 8006356:	e7fe      	b.n	8006356 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	4b17      	ldr	r3, [pc, #92]	; (80063bc <vTaskPlaceOnEventListRestricted+0x8c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	61da      	str	r2, [r3, #28]
 8006366:	4b15      	ldr	r3, [pc, #84]	; (80063bc <vTaskPlaceOnEventListRestricted+0x8c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	6892      	ldr	r2, [r2, #8]
 800636e:	621a      	str	r2, [r3, #32]
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <vTaskPlaceOnEventListRestricted+0x8c>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	3218      	adds	r2, #24
 800637a:	605a      	str	r2, [r3, #4]
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <vTaskPlaceOnEventListRestricted+0x8c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f103 0218 	add.w	r2, r3, #24
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	609a      	str	r2, [r3, #8]
 8006388:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <vTaskPlaceOnEventListRestricted+0x8c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	629a      	str	r2, [r3, #40]	; 0x28
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80063a0:	f04f 33ff 	mov.w	r3, #4294967295
 80063a4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80063a6:	2024      	movs	r0, #36	; 0x24
 80063a8:	f003 f8b6 	bl	8009518 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	68b8      	ldr	r0, [r7, #8]
 80063b0:	f000 fc2c 	bl	8006c0c <prvAddCurrentTaskToDelayedList>
    }
 80063b4:	bf00      	nop
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20000344 	.word	0x20000344

080063c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08a      	sub	sp, #40	; 0x28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	60fb      	str	r3, [r7, #12]
    }
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f0:	61fb      	str	r3, [r7, #28]
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	6a3a      	ldr	r2, [r7, #32]
 80063f8:	6a12      	ldr	r2, [r2, #32]
 80063fa:	609a      	str	r2, [r3, #8]
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	6a3a      	ldr	r2, [r7, #32]
 8006402:	69d2      	ldr	r2, [r2, #28]
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	3318      	adds	r3, #24
 800640e:	429a      	cmp	r2, r3
 8006410:	d103      	bne.n	800641a <xTaskRemoveFromEventList+0x5a>
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	6a1a      	ldr	r2, [r3, #32]
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	2200      	movs	r2, #0
 800641e:	629a      	str	r2, [r3, #40]	; 0x28
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	1e5a      	subs	r2, r3, #1
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800642a:	4b4b      	ldr	r3, [pc, #300]	; (8006558 <xTaskRemoveFromEventList+0x198>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d162      	bne.n	80064f8 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	6a3a      	ldr	r2, [r7, #32]
 800643e:	68d2      	ldr	r2, [r2, #12]
 8006440:	609a      	str	r2, [r3, #8]
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	6a3a      	ldr	r2, [r7, #32]
 8006448:	6892      	ldr	r2, [r2, #8]
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	3304      	adds	r3, #4
 8006454:	429a      	cmp	r2, r3
 8006456:	d103      	bne.n	8006460 <xTaskRemoveFromEventList+0xa0>
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	605a      	str	r2, [r3, #4]
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	2200      	movs	r2, #0
 8006464:	615a      	str	r2, [r3, #20]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	1e5a      	subs	r2, r3, #1
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	4618      	mov	r0, r3
 8006474:	f003 fe9e 	bl	800a1b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	2201      	movs	r2, #1
 800647e:	409a      	lsls	r2, r3
 8006480:	4b36      	ldr	r3, [pc, #216]	; (800655c <xTaskRemoveFromEventList+0x19c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4313      	orrs	r3, r2
 8006486:	4a35      	ldr	r2, [pc, #212]	; (800655c <xTaskRemoveFromEventList+0x19c>)
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648e:	4934      	ldr	r1, [pc, #208]	; (8006560 <xTaskRemoveFromEventList+0x1a0>)
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	3304      	adds	r3, #4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	609a      	str	r2, [r3, #8]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	60da      	str	r2, [r3, #12]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	6a3a      	ldr	r2, [r7, #32]
 80064b4:	3204      	adds	r2, #4
 80064b6:	605a      	str	r2, [r3, #4]
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	1d1a      	adds	r2, r3, #4
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	609a      	str	r2, [r3, #8]
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4a24      	ldr	r2, [pc, #144]	; (8006560 <xTaskRemoveFromEventList+0x1a0>)
 80064ce:	441a      	add	r2, r3
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	615a      	str	r2, [r3, #20]
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d8:	4921      	ldr	r1, [pc, #132]	; (8006560 <xTaskRemoveFromEventList+0x1a0>)
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	1c59      	adds	r1, r3, #1
 80064e8:	481d      	ldr	r0, [pc, #116]	; (8006560 <xTaskRemoveFromEventList+0x1a0>)
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4403      	add	r3, r0
 80064f4:	6019      	str	r1, [r3, #0]
 80064f6:	e01b      	b.n	8006530 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064f8:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <xTaskRemoveFromEventList+0x1a4>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	61da      	str	r2, [r3, #28]
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	621a      	str	r2, [r3, #32]
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	6a3a      	ldr	r2, [r7, #32]
 8006512:	3218      	adds	r2, #24
 8006514:	605a      	str	r2, [r3, #4]
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	f103 0218 	add.w	r2, r3, #24
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	609a      	str	r2, [r3, #8]
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	4a10      	ldr	r2, [pc, #64]	; (8006564 <xTaskRemoveFromEventList+0x1a4>)
 8006524:	629a      	str	r2, [r3, #40]	; 0x28
 8006526:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <xTaskRemoveFromEventList+0x1a4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	4a0d      	ldr	r2, [pc, #52]	; (8006564 <xTaskRemoveFromEventList+0x1a4>)
 800652e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <xTaskRemoveFromEventList+0x1a8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	429a      	cmp	r2, r3
 800653c:	d905      	bls.n	800654a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800653e:	2301      	movs	r3, #1
 8006540:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006542:	4b0a      	ldr	r3, [pc, #40]	; (800656c <xTaskRemoveFromEventList+0x1ac>)
 8006544:	2201      	movs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	e001      	b.n	800654e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800654a:	2300      	movs	r3, #0
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006550:	4618      	mov	r0, r3
 8006552:	3728      	adds	r7, #40	; 0x28
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20000444 	.word	0x20000444
 800655c:	20000424 	.word	0x20000424
 8006560:	20000348 	.word	0x20000348
 8006564:	200003dc 	.word	0x200003dc
 8006568:	20000344 	.word	0x20000344
 800656c:	20000430 	.word	0x20000430

08006570 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006578:	4b06      	ldr	r3, [pc, #24]	; (8006594 <vTaskInternalSetTimeOutState+0x24>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006580:	4b05      	ldr	r3, [pc, #20]	; (8006598 <vTaskInternalSetTimeOutState+0x28>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	605a      	str	r2, [r3, #4]
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	20000434 	.word	0x20000434
 8006598:	20000420 	.word	0x20000420

0800659c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	613b      	str	r3, [r7, #16]
    }
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	60fb      	str	r3, [r7, #12]
    }
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80065de:	f000 ff4b 	bl	8007478 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80065e2:	4b1f      	ldr	r3, [pc, #124]	; (8006660 <xTaskCheckForTimeOut+0xc4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d102      	bne.n	8006602 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	61fb      	str	r3, [r7, #28]
 8006600:	e026      	b.n	8006650 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4b17      	ldr	r3, [pc, #92]	; (8006664 <xTaskCheckForTimeOut+0xc8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d00a      	beq.n	8006624 <xTaskCheckForTimeOut+0x88>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	429a      	cmp	r2, r3
 8006616:	d305      	bcc.n	8006624 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006618:	2301      	movs	r3, #1
 800661a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2200      	movs	r2, #0
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e015      	b.n	8006650 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	429a      	cmp	r2, r3
 800662c:	d20b      	bcs.n	8006646 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	1ad2      	subs	r2, r2, r3
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff ff98 	bl	8006570 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	e004      	b.n	8006650 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800664c:	2301      	movs	r3, #1
 800664e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006650:	f000 ff42 	bl	80074d8 <vPortExitCritical>

    return xReturn;
 8006654:	69fb      	ldr	r3, [r7, #28]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3720      	adds	r7, #32
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20000420 	.word	0x20000420
 8006664:	20000434 	.word	0x20000434

08006668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800666c:	4b03      	ldr	r3, [pc, #12]	; (800667c <vTaskMissedYield+0x14>)
 800666e:	2201      	movs	r2, #1
 8006670:	601a      	str	r2, [r3, #0]
}
 8006672:	bf00      	nop
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	20000430 	.word	0x20000430

08006680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006688:	f000 f852 	bl	8006730 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <prvIdleTask+0x28>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d9f9      	bls.n	8006688 <prvIdleTask+0x8>
            {
                taskYIELD();
 8006694:	4b05      	ldr	r3, [pc, #20]	; (80066ac <prvIdleTask+0x2c>)
 8006696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80066a4:	e7f0      	b.n	8006688 <prvIdleTask+0x8>
 80066a6:	bf00      	nop
 80066a8:	20000348 	.word	0x20000348
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066b6:	2300      	movs	r3, #0
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	e00c      	b.n	80066d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4a12      	ldr	r2, [pc, #72]	; (8006710 <prvInitialiseTaskLists+0x60>)
 80066c8:	4413      	add	r3, r2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe fda6 	bl	800521c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3301      	adds	r3, #1
 80066d4:	607b      	str	r3, [r7, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d9ef      	bls.n	80066bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80066dc:	480d      	ldr	r0, [pc, #52]	; (8006714 <prvInitialiseTaskLists+0x64>)
 80066de:	f7fe fd9d 	bl	800521c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80066e2:	480d      	ldr	r0, [pc, #52]	; (8006718 <prvInitialiseTaskLists+0x68>)
 80066e4:	f7fe fd9a 	bl	800521c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80066e8:	480c      	ldr	r0, [pc, #48]	; (800671c <prvInitialiseTaskLists+0x6c>)
 80066ea:	f7fe fd97 	bl	800521c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80066ee:	480c      	ldr	r0, [pc, #48]	; (8006720 <prvInitialiseTaskLists+0x70>)
 80066f0:	f7fe fd94 	bl	800521c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80066f4:	480b      	ldr	r0, [pc, #44]	; (8006724 <prvInitialiseTaskLists+0x74>)
 80066f6:	f7fe fd91 	bl	800521c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80066fa:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <prvInitialiseTaskLists+0x78>)
 80066fc:	4a05      	ldr	r2, [pc, #20]	; (8006714 <prvInitialiseTaskLists+0x64>)
 80066fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <prvInitialiseTaskLists+0x7c>)
 8006702:	4a05      	ldr	r2, [pc, #20]	; (8006718 <prvInitialiseTaskLists+0x68>)
 8006704:	601a      	str	r2, [r3, #0]
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000348 	.word	0x20000348
 8006714:	200003ac 	.word	0x200003ac
 8006718:	200003c0 	.word	0x200003c0
 800671c:	200003dc 	.word	0x200003dc
 8006720:	200003f0 	.word	0x200003f0
 8006724:	20000408 	.word	0x20000408
 8006728:	200003d4 	.word	0x200003d4
 800672c:	200003d8 	.word	0x200003d8

08006730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006736:	e019      	b.n	800676c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8006738:	f000 fe9e 	bl	8007478 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800673c:	4b10      	ldr	r3, [pc, #64]	; (8006780 <prvCheckTasksWaitingTermination+0x50>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3304      	adds	r3, #4
 8006748:	4618      	mov	r0, r3
 800674a:	f7fe fdcd 	bl	80052e8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800674e:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <prvCheckTasksWaitingTermination+0x54>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3b01      	subs	r3, #1
 8006754:	4a0b      	ldr	r2, [pc, #44]	; (8006784 <prvCheckTasksWaitingTermination+0x54>)
 8006756:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <prvCheckTasksWaitingTermination+0x58>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3b01      	subs	r3, #1
 800675e:	4a0a      	ldr	r2, [pc, #40]	; (8006788 <prvCheckTasksWaitingTermination+0x58>)
 8006760:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8006762:	f000 feb9 	bl	80074d8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f810 	bl	800678c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <prvCheckTasksWaitingTermination+0x58>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e1      	bne.n	8006738 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	200003f0 	.word	0x200003f0
 8006784:	2000041c 	.word	0x2000041c
 8006788:	20000404 	.word	0x20000404

0800678c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	4618      	mov	r0, r3
 800679a:	f001 f851 	bl	8007840 <vPortFree>
            vPortFree( pxTCB );
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 f84e 	bl	8007840 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b0:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <prvResetNextTaskUnblockTime+0x30>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <prvResetNextTaskUnblockTime+0x34>)
 80067bc:	f04f 32ff 	mov.w	r2, #4294967295
 80067c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80067c2:	e005      	b.n	80067d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <prvResetNextTaskUnblockTime+0x30>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a04      	ldr	r2, [pc, #16]	; (80067e0 <prvResetNextTaskUnblockTime+0x34>)
 80067ce:	6013      	str	r3, [r2, #0]
}
 80067d0:	bf00      	nop
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	200003d4 	.word	0x200003d4
 80067e0:	2000043c 	.word	0x2000043c

080067e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80067ea:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <xTaskGetSchedulerState+0x34>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d102      	bne.n	80067f8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80067f2:	2301      	movs	r3, #1
 80067f4:	607b      	str	r3, [r7, #4]
 80067f6:	e008      	b.n	800680a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067f8:	4b08      	ldr	r3, [pc, #32]	; (800681c <xTaskGetSchedulerState+0x38>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006800:	2302      	movs	r3, #2
 8006802:	607b      	str	r3, [r7, #4]
 8006804:	e001      	b.n	800680a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006806:	2300      	movs	r3, #0
 8006808:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800680a:	687b      	ldr	r3, [r7, #4]
    }
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	20000428 	.word	0x20000428
 800681c:	20000444 	.word	0x20000444

08006820 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	613b      	str	r3, [r7, #16]
    }
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800684a:	f000 fe15 	bl	8007478 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800684e:	4b36      	ldr	r3, [pc, #216]	; (8006928 <xTaskGenericNotifyWait+0x108>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	3354      	adds	r3, #84	; 0x54
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d022      	beq.n	80068a6 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006860:	4b31      	ldr	r3, [pc, #196]	; (8006928 <xTaskGenericNotifyWait+0x108>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	3214      	adds	r2, #20
 8006868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	43d2      	mvns	r2, r2
 8006870:	4011      	ands	r1, r2
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	3214      	adds	r2, #20
 8006876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800687a:	4b2b      	ldr	r3, [pc, #172]	; (8006928 <xTaskGenericNotifyWait+0x108>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	3354      	adds	r3, #84	; 0x54
 8006884:	2201      	movs	r2, #1
 8006886:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800688e:	2101      	movs	r1, #1
 8006890:	6a38      	ldr	r0, [r7, #32]
 8006892:	f000 f9bb 	bl	8006c0c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006896:	4b25      	ldr	r3, [pc, #148]	; (800692c <xTaskGenericNotifyWait+0x10c>)
 8006898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80068a6:	f000 fe17 	bl	80074d8 <vPortExitCritical>

        taskENTER_CRITICAL();
 80068aa:	f000 fde5 	bl	8007478 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	2040      	movs	r0, #64	; 0x40
 80068bc:	f002 ff56 	bl	800976c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d007      	beq.n	80068d6 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80068c6:	4b18      	ldr	r3, [pc, #96]	; (8006928 <xTaskGenericNotifyWait+0x108>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	3214      	adds	r2, #20
 80068ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80068d6:	4b14      	ldr	r3, [pc, #80]	; (8006928 <xTaskGenericNotifyWait+0x108>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	3354      	adds	r3, #84	; 0x54
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d002      	beq.n	80068ee <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e00e      	b.n	800690c <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80068ee:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <xTaskGenericNotifyWait+0x108>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	3214      	adds	r2, #20
 80068f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	43d2      	mvns	r2, r2
 80068fe:	4011      	ands	r1, r2
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	3214      	adds	r2, #20
 8006904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006908:	2301      	movs	r3, #1
 800690a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <xTaskGenericNotifyWait+0x108>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	3354      	adds	r3, #84	; 0x54
 8006916:	2200      	movs	r2, #0
 8006918:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800691a:	f000 fddd 	bl	80074d8 <vPortExitCritical>

        return xReturn;
 800691e:	697b      	ldr	r3, [r7, #20]
    }
 8006920:	4618      	mov	r0, r3
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20000344 	.word	0x20000344
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006930:	b580      	push	{r7, lr}
 8006932:	b094      	sub	sp, #80	; 0x50
 8006934:	af02      	add	r7, sp, #8
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800693e:	2301      	movs	r3, #1
 8006940:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800695a:	bf00      	nop
 800695c:	e7fe      	b.n	800695c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800697a:	f000 fe67 	bl	800764c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006982:	f3ef 8211 	mrs	r2, BASEPRI
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	623a      	str	r2, [r7, #32]
 8006998:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800699a:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800699e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d006      	beq.n	80069b2 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80069a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	3214      	adds	r2, #20
 80069aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80069b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	4413      	add	r3, r2
 80069b8:	3354      	adds	r3, #84	; 0x54
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80069c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	4413      	add	r3, r2
 80069c6:	3354      	adds	r3, #84	; 0x54
 80069c8:	2202      	movs	r2, #2
 80069ca:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d83b      	bhi.n	8006a4a <xTaskGenericNotifyFromISR+0x11a>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <xTaskGenericNotifyFromISR+0xa8>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a69 	.word	0x08006a69
 80069dc:	080069ed 	.word	0x080069ed
 80069e0:	08006a09 	.word	0x08006a09
 80069e4:	08006a21 	.word	0x08006a21
 80069e8:	08006a2f 	.word	0x08006a2f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80069ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	3214      	adds	r2, #20
 80069f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	ea42 0103 	orr.w	r1, r2, r3
 80069fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	3214      	adds	r2, #20
 8006a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006a06:	e032      	b.n	8006a6e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	3214      	adds	r2, #20
 8006a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a12:	1c59      	adds	r1, r3, #1
 8006a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	3214      	adds	r2, #20
 8006a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006a1e:	e026      	b.n	8006a6e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	3214      	adds	r2, #20
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006a2c:	e01f      	b.n	8006a6e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006a2e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d006      	beq.n	8006a44 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	3214      	adds	r2, #20
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006a42:	e014      	b.n	8006a6e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8006a48:	e011      	b.n	8006a6e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006a4a:	4b69      	ldr	r3, [pc, #420]	; (8006bf0 <xTaskGenericNotifyFromISR+0x2c0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00c      	beq.n	8006a6c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	61bb      	str	r3, [r7, #24]
    }
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006a68:	bf00      	nop
 8006a6a:	e000      	b.n	8006a6e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006a6c:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8006a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a70:	4618      	mov	r0, r3
 8006a72:	f003 fbe1 	bl	800a238 <SEGGER_SYSVIEW_ShrinkId>
 8006a76:	78f9      	ldrb	r1, [r7, #3]
 8006a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a7c:	9201      	str	r2, [sp, #4]
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	460b      	mov	r3, r1
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	4601      	mov	r1, r0
 8006a86:	203f      	movs	r0, #63	; 0x3f
 8006a88:	f002 ff02 	bl	8009890 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006a8c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	f040 80a2 	bne.w	8006bda <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	617b      	str	r3, [r7, #20]
    }
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab4:	4b4f      	ldr	r3, [pc, #316]	; (8006bf4 <xTaskGenericNotifyFromISR+0x2c4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d162      	bne.n	8006b82 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ac8:	68d2      	ldr	r2, [r2, #12]
 8006aca:	609a      	str	r2, [r3, #8]
 8006acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad2:	6892      	ldr	r2, [r2, #8]
 8006ad4:	605a      	str	r2, [r3, #4]
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006adc:	3304      	adds	r3, #4
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d103      	bne.n	8006aea <xTaskGenericNotifyFromISR+0x1ba>
 8006ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	605a      	str	r2, [r3, #4]
 8006aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aec:	2200      	movs	r2, #0
 8006aee:	615a      	str	r2, [r3, #20]
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	1e5a      	subs	r2, r3, #1
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006afc:	4618      	mov	r0, r3
 8006afe:	f003 fb59 	bl	800a1b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	2201      	movs	r2, #1
 8006b08:	409a      	lsls	r2, r3
 8006b0a:	4b3b      	ldr	r3, [pc, #236]	; (8006bf8 <xTaskGenericNotifyFromISR+0x2c8>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	4a39      	ldr	r2, [pc, #228]	; (8006bf8 <xTaskGenericNotifyFromISR+0x2c8>)
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b18:	4938      	ldr	r1, [pc, #224]	; (8006bfc <xTaskGenericNotifyFromISR+0x2cc>)
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	440b      	add	r3, r1
 8006b24:	3304      	adds	r3, #4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b2e:	609a      	str	r2, [r3, #8]
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b36:	60da      	str	r2, [r3, #12]
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b3e:	3204      	adds	r2, #4
 8006b40:	605a      	str	r2, [r3, #4]
 8006b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b44:	1d1a      	adds	r2, r3, #4
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	609a      	str	r2, [r3, #8]
 8006b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4a29      	ldr	r2, [pc, #164]	; (8006bfc <xTaskGenericNotifyFromISR+0x2cc>)
 8006b58:	441a      	add	r2, r3
 8006b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5c:	615a      	str	r2, [r3, #20]
 8006b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b62:	4926      	ldr	r1, [pc, #152]	; (8006bfc <xTaskGenericNotifyFromISR+0x2cc>)
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	1c59      	adds	r1, r3, #1
 8006b72:	4822      	ldr	r0, [pc, #136]	; (8006bfc <xTaskGenericNotifyFromISR+0x2cc>)
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4403      	add	r3, r0
 8006b7e:	6019      	str	r1, [r3, #0]
 8006b80:	e01b      	b.n	8006bba <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006b82:	4b1f      	ldr	r3, [pc, #124]	; (8006c00 <xTaskGenericNotifyFromISR+0x2d0>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	637b      	str	r3, [r7, #52]	; 0x34
 8006b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b8c:	61da      	str	r2, [r3, #28]
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b94:	621a      	str	r2, [r3, #32]
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b9c:	3218      	adds	r2, #24
 8006b9e:	605a      	str	r2, [r3, #4]
 8006ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba2:	f103 0218 	add.w	r2, r3, #24
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba8:	609a      	str	r2, [r3, #8]
 8006baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bac:	4a14      	ldr	r2, [pc, #80]	; (8006c00 <xTaskGenericNotifyFromISR+0x2d0>)
 8006bae:	629a      	str	r2, [r3, #40]	; 0x28
 8006bb0:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <xTaskGenericNotifyFromISR+0x2d0>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	4a12      	ldr	r2, [pc, #72]	; (8006c00 <xTaskGenericNotifyFromISR+0x2d0>)
 8006bb8:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbe:	4b11      	ldr	r3, [pc, #68]	; (8006c04 <xTaskGenericNotifyFromISR+0x2d4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d908      	bls.n	8006bda <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <xTaskGenericNotifyFromISR+0x2d8>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bdc:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006be4:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8006be8:	4618      	mov	r0, r3
 8006bea:	3748      	adds	r7, #72	; 0x48
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20000420 	.word	0x20000420
 8006bf4:	20000444 	.word	0x20000444
 8006bf8:	20000424 	.word	0x20000424
 8006bfc:	20000348 	.word	0x20000348
 8006c00:	200003dc 	.word	0x200003dc
 8006c04:	20000344 	.word	0x20000344
 8006c08:	20000430 	.word	0x20000430

08006c0c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006c16:	4b36      	ldr	r3, [pc, #216]	; (8006cf0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c1c:	4b35      	ldr	r3, [pc, #212]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3304      	adds	r3, #4
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe fb60 	bl	80052e8 <uxListRemove>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10b      	bne.n	8006c46 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c2e:	4b31      	ldr	r3, [pc, #196]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	2201      	movs	r2, #1
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	43da      	mvns	r2, r3
 8006c3c:	4b2e      	ldr	r3, [pc, #184]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xec>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4013      	ands	r3, r2
 8006c42:	4a2d      	ldr	r2, [pc, #180]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xec>)
 8006c44:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d124      	bne.n	8006c98 <prvAddCurrentTaskToDelayedList+0x8c>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d021      	beq.n	8006c98 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c54:	4b29      	ldr	r3, [pc, #164]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xf0>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	4b26      	ldr	r3, [pc, #152]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	609a      	str	r2, [r3, #8]
 8006c62:	4b24      	ldr	r3, [pc, #144]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	6892      	ldr	r2, [r2, #8]
 8006c6a:	60da      	str	r2, [r3, #12]
 8006c6c:	4b21      	ldr	r3, [pc, #132]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	3204      	adds	r2, #4
 8006c76:	605a      	str	r2, [r3, #4]
 8006c78:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	1d1a      	adds	r2, r3, #4
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	609a      	str	r2, [r3, #8]
 8006c82:	4b1c      	ldr	r3, [pc, #112]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1d      	ldr	r2, [pc, #116]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xf0>)
 8006c88:	615a      	str	r2, [r3, #20]
 8006c8a:	4b1c      	ldr	r3, [pc, #112]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xf0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	4a1a      	ldr	r2, [pc, #104]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xf0>)
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006c96:	e026      	b.n	8006ce6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ca0:	4b14      	ldr	r3, [pc, #80]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d209      	bcs.n	8006cc4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cb0:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	4b0f      	ldr	r3, [pc, #60]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	f7fe fada 	bl	8005276 <vListInsert>
}
 8006cc2:	e010      	b.n	8006ce6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cc4:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	4b0a      	ldr	r3, [pc, #40]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	f7fe fad0 	bl	8005276 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	; (8006d08 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d202      	bcs.n	8006ce6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8006ce0:	4a09      	ldr	r2, [pc, #36]	; (8006d08 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6013      	str	r3, [r2, #0]
}
 8006ce6:	bf00      	nop
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000420 	.word	0x20000420
 8006cf4:	20000344 	.word	0x20000344
 8006cf8:	20000424 	.word	0x20000424
 8006cfc:	20000408 	.word	0x20000408
 8006d00:	200003d8 	.word	0x200003d8
 8006d04:	200003d4 	.word	0x200003d4
 8006d08:	2000043c 	.word	0x2000043c

08006d0c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006d16:	f000 fa47 	bl	80071a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006d1a:	4b11      	ldr	r3, [pc, #68]	; (8006d60 <xTimerCreateTimerTask+0x54>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00b      	beq.n	8006d3a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8006d22:	4b10      	ldr	r3, [pc, #64]	; (8006d64 <xTimerCreateTimerTask+0x58>)
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	2302      	movs	r3, #2
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006d30:	490d      	ldr	r1, [pc, #52]	; (8006d68 <xTimerCreateTimerTask+0x5c>)
 8006d32:	480e      	ldr	r0, [pc, #56]	; (8006d6c <xTimerCreateTimerTask+0x60>)
 8006d34:	f7fe fe32 	bl	800599c <xTaskCreate>
 8006d38:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10a      	bne.n	8006d56 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	603b      	str	r3, [r7, #0]
    }
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006d56:	687b      	ldr	r3, [r7, #4]
    }
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20000478 	.word	0x20000478
 8006d64:	2000047c 	.word	0x2000047c
 8006d68:	0800dcac 	.word	0x0800dcac
 8006d6c:	08006e15 	.word	0x08006e15

08006d70 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006d7c:	e008      	b.n	8006d90 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	4413      	add	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	699a      	ldr	r2, [r3, #24]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	18d1      	adds	r1, r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f8dd 	bl	8006f5c <prvInsertTimerInActiveList>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1ea      	bne.n	8006d7e <prvReloadTimer+0xe>
        }
    }
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dbe:	4b14      	ldr	r3, [pc, #80]	; (8006e10 <prvProcessExpiredTimer+0x5c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fe fa8b 	bl	80052e8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff ffc3 	bl	8006d70 <prvReloadTimer>
 8006dea:	e008      	b.n	8006dfe <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	4798      	blx	r3
    }
 8006e06:	bf00      	nop
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000470 	.word	0x20000470

08006e14 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e1c:	f107 0308 	add.w	r3, r7, #8
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f857 	bl	8006ed4 <prvGetNextExpireTime>
 8006e26:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f803 	bl	8006e38 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006e32:	f000 f8d5 	bl	8006fe0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e36:	e7f1      	b.n	8006e1c <prvTimerTask+0x8>

08006e38 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006e42:	f7fe ff99 	bl	8005d78 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e46:	f107 0308 	add.w	r3, r7, #8
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 f866 	bl	8006f1c <prvSampleTimeNow>
 8006e50:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d130      	bne.n	8006eba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <prvProcessTimerOrBlockTask+0x3c>
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d806      	bhi.n	8006e74 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006e66:	f7fe ff95 	bl	8005d94 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e6a:	68f9      	ldr	r1, [r7, #12]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff ffa1 	bl	8006db4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006e72:	e024      	b.n	8006ebe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d008      	beq.n	8006e8c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e7a:	4b13      	ldr	r3, [pc, #76]	; (8006ec8 <prvProcessTimerOrBlockTask+0x90>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <prvProcessTimerOrBlockTask+0x50>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <prvProcessTimerOrBlockTask+0x52>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <prvProcessTimerOrBlockTask+0x94>)
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	f7fe fd4b 	bl	8005934 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006e9e:	f7fe ff79 	bl	8005d94 <xTaskResumeAll>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006ea8:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <prvProcessTimerOrBlockTask+0x98>)
 8006eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	f3bf 8f6f 	isb	sy
    }
 8006eb8:	e001      	b.n	8006ebe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006eba:	f7fe ff6b 	bl	8005d94 <xTaskResumeAll>
    }
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000474 	.word	0x20000474
 8006ecc:	20000478 	.word	0x20000478
 8006ed0:	e000ed04 	.word	0xe000ed04

08006ed4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006edc:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <prvGetNextExpireTime+0x44>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <prvGetNextExpireTime+0x16>
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	e000      	b.n	8006eec <prvGetNextExpireTime+0x18>
 8006eea:	2200      	movs	r2, #0
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d105      	bne.n	8006f04 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ef8:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <prvGetNextExpireTime+0x44>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	e001      	b.n	8006f08 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006f08:	68fb      	ldr	r3, [r7, #12]
    }
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000470 	.word	0x20000470

08006f1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006f24:	f7ff f836 	bl	8005f94 <xTaskGetTickCount>
 8006f28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006f2a:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <prvSampleTimeNow+0x3c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d205      	bcs.n	8006f40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006f34:	f000 f912 	bl	800715c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e002      	b.n	8006f46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006f46:	4a04      	ldr	r2, [pc, #16]	; (8006f58 <prvSampleTimeNow+0x3c>)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
    }
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20000480 	.word	0x20000480

08006f5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d812      	bhi.n	8006fa8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	1ad2      	subs	r2, r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d302      	bcc.n	8006f96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e01b      	b.n	8006fce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f96:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <prvInsertTimerInActiveList+0x7c>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fe f968 	bl	8005276 <vListInsert>
 8006fa6:	e012      	b.n	8006fce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d206      	bcs.n	8006fbe <prvInsertTimerInActiveList+0x62>
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d302      	bcc.n	8006fbe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	e007      	b.n	8006fce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fbe:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <prvInsertTimerInActiveList+0x80>)
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	f7fe f954 	bl	8005276 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006fce:	697b      	ldr	r3, [r7, #20]
    }
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	20000474 	.word	0x20000474
 8006fdc:	20000470 	.word	0x20000470

08006fe0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fe6:	e0a6      	b.n	8007136 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f2c0 80a2 	blt.w	8007134 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	3304      	adds	r3, #4
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe f971 	bl	80052e8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007006:	1d3b      	adds	r3, r7, #4
 8007008:	4618      	mov	r0, r3
 800700a:	f7ff ff87 	bl	8006f1c <prvSampleTimeNow>
 800700e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	3b01      	subs	r3, #1
 8007014:	2b08      	cmp	r3, #8
 8007016:	f200 808e 	bhi.w	8007136 <prvProcessReceivedCommands+0x156>
 800701a:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <prvProcessReceivedCommands+0x40>)
 800701c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007020:	08007045 	.word	0x08007045
 8007024:	08007045 	.word	0x08007045
 8007028:	080070ad 	.word	0x080070ad
 800702c:	080070c1 	.word	0x080070c1
 8007030:	0800710b 	.word	0x0800710b
 8007034:	08007045 	.word	0x08007045
 8007038:	08007045 	.word	0x08007045
 800703c:	080070ad 	.word	0x080070ad
 8007040:	080070c1 	.word	0x080070c1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800704a:	f043 0301 	orr.w	r3, r3, #1
 800704e:	b2da      	uxtb	r2, r3
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	18d1      	adds	r1, r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	69f8      	ldr	r0, [r7, #28]
 8007064:	f7ff ff7a 	bl	8006f5c <prvInsertTimerInActiveList>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d063      	beq.n	8007136 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d009      	beq.n	8007090 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	4413      	add	r3, r2
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	4619      	mov	r1, r3
 8007088:	69f8      	ldr	r0, [r7, #28]
 800708a:	f7ff fe71 	bl	8006d70 <prvReloadTimer>
 800708e:	e008      	b.n	80070a2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	b2da      	uxtb	r2, r3
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	69f8      	ldr	r0, [r7, #28]
 80070a8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80070aa:	e044      	b.n	8007136 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070b2:	f023 0301 	bic.w	r3, r3, #1
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80070be:	e03a      	b.n	8007136 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c6:	f043 0301 	orr.w	r3, r3, #1
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	617b      	str	r3, [r7, #20]
    }
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	18d1      	adds	r1, r2, r3
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	69f8      	ldr	r0, [r7, #28]
 8007104:	f7ff ff2a 	bl	8006f5c <prvInsertTimerInActiveList>
                        break;
 8007108:	e015      	b.n	8007136 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8007118:	69f8      	ldr	r0, [r7, #28]
 800711a:	f000 fb91 	bl	8007840 <vPortFree>
 800711e:	e00a      	b.n	8007136 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007126:	f023 0301 	bic.w	r3, r3, #1
 800712a:	b2da      	uxtb	r2, r3
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007132:	e000      	b.n	8007136 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007134:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007136:	4b08      	ldr	r3, [pc, #32]	; (8007158 <prvProcessReceivedCommands+0x178>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f107 0108 	add.w	r1, r7, #8
 800713e:	2200      	movs	r2, #0
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fa03 	bl	800554c <xQueueReceive>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	f47f af4d 	bne.w	8006fe8 <prvProcessReceivedCommands+0x8>
        }
    }
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	3720      	adds	r7, #32
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20000478 	.word	0x20000478

0800715c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007162:	e009      	b.n	8007178 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007164:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <prvSwitchTimerLists+0x44>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800716e:	f04f 31ff 	mov.w	r1, #4294967295
 8007172:	6838      	ldr	r0, [r7, #0]
 8007174:	f7ff fe1e 	bl	8006db4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007178:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <prvSwitchTimerLists+0x44>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f0      	bne.n	8007164 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007182:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <prvSwitchTimerLists+0x44>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007188:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <prvSwitchTimerLists+0x48>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a04      	ldr	r2, [pc, #16]	; (80071a0 <prvSwitchTimerLists+0x44>)
 800718e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007190:	4a04      	ldr	r2, [pc, #16]	; (80071a4 <prvSwitchTimerLists+0x48>)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6013      	str	r3, [r2, #0]
    }
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000470 	.word	0x20000470
 80071a4:	20000474 	.word	0x20000474

080071a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80071ac:	f000 f964 	bl	8007478 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80071b0:	4b12      	ldr	r3, [pc, #72]	; (80071fc <prvCheckForValidListAndQueue+0x54>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d11d      	bne.n	80071f4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80071b8:	4811      	ldr	r0, [pc, #68]	; (8007200 <prvCheckForValidListAndQueue+0x58>)
 80071ba:	f7fe f82f 	bl	800521c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80071be:	4811      	ldr	r0, [pc, #68]	; (8007204 <prvCheckForValidListAndQueue+0x5c>)
 80071c0:	f7fe f82c 	bl	800521c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80071c4:	4b10      	ldr	r3, [pc, #64]	; (8007208 <prvCheckForValidListAndQueue+0x60>)
 80071c6:	4a0e      	ldr	r2, [pc, #56]	; (8007200 <prvCheckForValidListAndQueue+0x58>)
 80071c8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80071ca:	4b10      	ldr	r3, [pc, #64]	; (800720c <prvCheckForValidListAndQueue+0x64>)
 80071cc:	4a0d      	ldr	r2, [pc, #52]	; (8007204 <prvCheckForValidListAndQueue+0x5c>)
 80071ce:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80071d0:	2200      	movs	r2, #0
 80071d2:	210c      	movs	r1, #12
 80071d4:	200a      	movs	r0, #10
 80071d6:	f7fe f941 	bl	800545c <xQueueGenericCreate>
 80071da:	4603      	mov	r3, r0
 80071dc:	4a07      	ldr	r2, [pc, #28]	; (80071fc <prvCheckForValidListAndQueue+0x54>)
 80071de:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80071e0:	4b06      	ldr	r3, [pc, #24]	; (80071fc <prvCheckForValidListAndQueue+0x54>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d005      	beq.n	80071f4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071e8:	4b04      	ldr	r3, [pc, #16]	; (80071fc <prvCheckForValidListAndQueue+0x54>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4908      	ldr	r1, [pc, #32]	; (8007210 <prvCheckForValidListAndQueue+0x68>)
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe fb4a 	bl	8005888 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80071f4:	f000 f970 	bl	80074d8 <vPortExitCritical>
    }
 80071f8:	bf00      	nop
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000478 	.word	0x20000478
 8007200:	20000448 	.word	0x20000448
 8007204:	2000045c 	.word	0x2000045c
 8007208:	20000470 	.word	0x20000470
 800720c:	20000474 	.word	0x20000474
 8007210:	0800dcb4 	.word	0x0800dcb4

08007214 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3b04      	subs	r3, #4
 8007224:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800722c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3b04      	subs	r3, #4
 8007232:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f023 0201 	bic.w	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3b04      	subs	r3, #4
 8007242:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007244:	4a0c      	ldr	r2, [pc, #48]	; (8007278 <pxPortInitialiseStack+0x64>)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3b14      	subs	r3, #20
 800724e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3b04      	subs	r3, #4
 800725a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f06f 0202 	mvn.w	r2, #2
 8007262:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3b20      	subs	r3, #32
 8007268:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800726a:	68fb      	ldr	r3, [r7, #12]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	0800727d 	.word	0x0800727d

0800727c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007286:	4b12      	ldr	r3, [pc, #72]	; (80072d0 <prvTaskExitError+0x54>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728e:	d00a      	beq.n	80072a6 <prvTaskExitError+0x2a>
        __asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	60fb      	str	r3, [r7, #12]
    }
 80072a2:	bf00      	nop
 80072a4:	e7fe      	b.n	80072a4 <prvTaskExitError+0x28>
        __asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	60bb      	str	r3, [r7, #8]
    }
 80072b8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80072ba:	bf00      	nop
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0fc      	beq.n	80072bc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80072c2:	bf00      	nop
 80072c4:	bf00      	nop
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	20000014 	.word	0x20000014
	...

080072e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80072e0:	4b07      	ldr	r3, [pc, #28]	; (8007300 <pxCurrentTCBConst2>)
 80072e2:	6819      	ldr	r1, [r3, #0]
 80072e4:	6808      	ldr	r0, [r1, #0]
 80072e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ea:	f380 8809 	msr	PSP, r0
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f04f 0000 	mov.w	r0, #0
 80072f6:	f380 8811 	msr	BASEPRI, r0
 80072fa:	4770      	bx	lr
 80072fc:	f3af 8000 	nop.w

08007300 <pxCurrentTCBConst2>:
 8007300:	20000344 	.word	0x20000344
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop

08007308 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007308:	4808      	ldr	r0, [pc, #32]	; (800732c <prvPortStartFirstTask+0x24>)
 800730a:	6800      	ldr	r0, [r0, #0]
 800730c:	6800      	ldr	r0, [r0, #0]
 800730e:	f380 8808 	msr	MSP, r0
 8007312:	f04f 0000 	mov.w	r0, #0
 8007316:	f380 8814 	msr	CONTROL, r0
 800731a:	b662      	cpsie	i
 800731c:	b661      	cpsie	f
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	df00      	svc	0
 8007328:	bf00      	nop
 800732a:	0000      	.short	0x0000
 800732c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop

08007334 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800733a:	4b46      	ldr	r3, [pc, #280]	; (8007454 <xPortStartScheduler+0x120>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a46      	ldr	r2, [pc, #280]	; (8007458 <xPortStartScheduler+0x124>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d10a      	bne.n	800735a <xPortStartScheduler+0x26>
        __asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	613b      	str	r3, [r7, #16]
    }
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800735a:	4b3e      	ldr	r3, [pc, #248]	; (8007454 <xPortStartScheduler+0x120>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a3f      	ldr	r2, [pc, #252]	; (800745c <xPortStartScheduler+0x128>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d10a      	bne.n	800737a <xPortStartScheduler+0x46>
        __asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	60fb      	str	r3, [r7, #12]
    }
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800737a:	4b39      	ldr	r3, [pc, #228]	; (8007460 <xPortStartScheduler+0x12c>)
 800737c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	22ff      	movs	r2, #255	; 0xff
 800738a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	b2db      	uxtb	r3, r3
 8007398:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800739c:	b2da      	uxtb	r2, r3
 800739e:	4b31      	ldr	r3, [pc, #196]	; (8007464 <xPortStartScheduler+0x130>)
 80073a0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073a2:	4b31      	ldr	r3, [pc, #196]	; (8007468 <xPortStartScheduler+0x134>)
 80073a4:	2207      	movs	r2, #7
 80073a6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073a8:	e009      	b.n	80073be <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80073aa:	4b2f      	ldr	r3, [pc, #188]	; (8007468 <xPortStartScheduler+0x134>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	4a2d      	ldr	r2, [pc, #180]	; (8007468 <xPortStartScheduler+0x134>)
 80073b2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c6:	2b80      	cmp	r3, #128	; 0x80
 80073c8:	d0ef      	beq.n	80073aa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073ca:	4b27      	ldr	r3, [pc, #156]	; (8007468 <xPortStartScheduler+0x134>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f1c3 0307 	rsb	r3, r3, #7
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d00a      	beq.n	80073ec <xPortStartScheduler+0xb8>
        __asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	60bb      	str	r3, [r7, #8]
    }
 80073e8:	bf00      	nop
 80073ea:	e7fe      	b.n	80073ea <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073ec:	4b1e      	ldr	r3, [pc, #120]	; (8007468 <xPortStartScheduler+0x134>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	4a1d      	ldr	r2, [pc, #116]	; (8007468 <xPortStartScheduler+0x134>)
 80073f4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073f6:	4b1c      	ldr	r3, [pc, #112]	; (8007468 <xPortStartScheduler+0x134>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073fe:	4a1a      	ldr	r2, [pc, #104]	; (8007468 <xPortStartScheduler+0x134>)
 8007400:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	b2da      	uxtb	r2, r3
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800740a:	4b18      	ldr	r3, [pc, #96]	; (800746c <xPortStartScheduler+0x138>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a17      	ldr	r2, [pc, #92]	; (800746c <xPortStartScheduler+0x138>)
 8007410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007414:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007416:	4b15      	ldr	r3, [pc, #84]	; (800746c <xPortStartScheduler+0x138>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a14      	ldr	r2, [pc, #80]	; (800746c <xPortStartScheduler+0x138>)
 800741c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007420:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007422:	f000 f8e3 	bl	80075ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007426:	4b12      	ldr	r3, [pc, #72]	; (8007470 <xPortStartScheduler+0x13c>)
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800742c:	f000 f902 	bl	8007634 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007430:	4b10      	ldr	r3, [pc, #64]	; (8007474 <xPortStartScheduler+0x140>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a0f      	ldr	r2, [pc, #60]	; (8007474 <xPortStartScheduler+0x140>)
 8007436:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800743a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800743c:	f7ff ff64 	bl	8007308 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007440:	f7fe fee4 	bl	800620c <vTaskSwitchContext>
    prvTaskExitError();
 8007444:	f7ff ff1a 	bl	800727c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	e000ed00 	.word	0xe000ed00
 8007458:	410fc271 	.word	0x410fc271
 800745c:	410fc270 	.word	0x410fc270
 8007460:	e000e400 	.word	0xe000e400
 8007464:	20000484 	.word	0x20000484
 8007468:	20000488 	.word	0x20000488
 800746c:	e000ed20 	.word	0xe000ed20
 8007470:	20000014 	.word	0x20000014
 8007474:	e000ef34 	.word	0xe000ef34

08007478 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
        __asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	607b      	str	r3, [r7, #4]
    }
 8007490:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007492:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <vPortEnterCritical+0x58>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3301      	adds	r3, #1
 8007498:	4a0d      	ldr	r2, [pc, #52]	; (80074d0 <vPortEnterCritical+0x58>)
 800749a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800749c:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <vPortEnterCritical+0x58>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d10f      	bne.n	80074c4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074a4:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <vPortEnterCritical+0x5c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <vPortEnterCritical+0x4c>
        __asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	603b      	str	r3, [r7, #0]
    }
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <vPortEnterCritical+0x4a>
    }
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	20000014 	.word	0x20000014
 80074d4:	e000ed04 	.word	0xe000ed04

080074d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <vPortExitCritical+0x50>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <vPortExitCritical+0x24>
        __asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	607b      	str	r3, [r7, #4]
    }
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <vPortExitCritical+0x50>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3b01      	subs	r3, #1
 8007502:	4a09      	ldr	r2, [pc, #36]	; (8007528 <vPortExitCritical+0x50>)
 8007504:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007506:	4b08      	ldr	r3, [pc, #32]	; (8007528 <vPortExitCritical+0x50>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d105      	bne.n	800751a <vPortExitCritical+0x42>
 800750e:	2300      	movs	r3, #0
 8007510:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	f383 8811 	msr	BASEPRI, r3
    }
 8007518:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	20000014 	.word	0x20000014
 800752c:	00000000 	.word	0x00000000

08007530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007530:	f3ef 8009 	mrs	r0, PSP
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	4b15      	ldr	r3, [pc, #84]	; (8007590 <pxCurrentTCBConst>)
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	f01e 0f10 	tst.w	lr, #16
 8007540:	bf08      	it	eq
 8007542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754a:	6010      	str	r0, [r2, #0]
 800754c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007550:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007554:	f380 8811 	msr	BASEPRI, r0
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f7fe fe54 	bl	800620c <vTaskSwitchContext>
 8007564:	f04f 0000 	mov.w	r0, #0
 8007568:	f380 8811 	msr	BASEPRI, r0
 800756c:	bc09      	pop	{r0, r3}
 800756e:	6819      	ldr	r1, [r3, #0]
 8007570:	6808      	ldr	r0, [r1, #0]
 8007572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007576:	f01e 0f10 	tst.w	lr, #16
 800757a:	bf08      	it	eq
 800757c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007580:	f380 8809 	msr	PSP, r0
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	f3af 8000 	nop.w

08007590 <pxCurrentTCBConst>:
 8007590:	20000344 	.word	0x20000344
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop

08007598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
        __asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	607b      	str	r3, [r7, #4]
    }
 80075b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80075b2:	f002 fce5 	bl	8009f80 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80075b6:	f7fe fd0f 	bl	8005fd8 <xTaskIncrementTick>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d006      	beq.n	80075ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80075c0:	f002 fd3c 	bl	800a03c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075c4:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <SysTick_Handler+0x50>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	e001      	b.n	80075d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80075ce:	f002 fd19 	bl	800a004 <SEGGER_SYSVIEW_RecordExitISR>
 80075d2:	2300      	movs	r3, #0
 80075d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	f383 8811 	msr	BASEPRI, r3
    }
 80075dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <vPortSetupTimerInterrupt+0x34>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075f6:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <vPortSetupTimerInterrupt+0x38>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <vPortSetupTimerInterrupt+0x3c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0a      	ldr	r2, [pc, #40]	; (800762c <vPortSetupTimerInterrupt+0x40>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	099b      	lsrs	r3, r3, #6
 8007608:	4a09      	ldr	r2, [pc, #36]	; (8007630 <vPortSetupTimerInterrupt+0x44>)
 800760a:	3b01      	subs	r3, #1
 800760c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800760e:	4b04      	ldr	r3, [pc, #16]	; (8007620 <vPortSetupTimerInterrupt+0x34>)
 8007610:	2207      	movs	r2, #7
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	bf00      	nop
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	e000e010 	.word	0xe000e010
 8007624:	e000e018 	.word	0xe000e018
 8007628:	20000004 	.word	0x20000004
 800762c:	10624dd3 	.word	0x10624dd3
 8007630:	e000e014 	.word	0xe000e014

08007634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007644 <vPortEnableVFP+0x10>
 8007638:	6801      	ldr	r1, [r0, #0]
 800763a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800763e:	6001      	str	r1, [r0, #0]
 8007640:	4770      	bx	lr
 8007642:	0000      	.short	0x0000
 8007644:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007648:	bf00      	nop
 800764a:	bf00      	nop

0800764c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007652:	f3ef 8305 	mrs	r3, IPSR
 8007656:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b0f      	cmp	r3, #15
 800765c:	d914      	bls.n	8007688 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800765e:	4a17      	ldr	r2, [pc, #92]	; (80076bc <vPortValidateInterruptPriority+0x70>)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007668:	4b15      	ldr	r3, [pc, #84]	; (80076c0 <vPortValidateInterruptPriority+0x74>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	7afa      	ldrb	r2, [r7, #11]
 800766e:	429a      	cmp	r2, r3
 8007670:	d20a      	bcs.n	8007688 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	607b      	str	r3, [r7, #4]
    }
 8007684:	bf00      	nop
 8007686:	e7fe      	b.n	8007686 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007688:	4b0e      	ldr	r3, [pc, #56]	; (80076c4 <vPortValidateInterruptPriority+0x78>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007690:	4b0d      	ldr	r3, [pc, #52]	; (80076c8 <vPortValidateInterruptPriority+0x7c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d90a      	bls.n	80076ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	603b      	str	r3, [r7, #0]
    }
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <vPortValidateInterruptPriority+0x60>
    }
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	e000e3f0 	.word	0xe000e3f0
 80076c0:	20000484 	.word	0x20000484
 80076c4:	e000ed0c 	.word	0xe000ed0c
 80076c8:	20000488 	.word	0x20000488

080076cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	; 0x28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80076d8:	f7fe fb4e 	bl	8005d78 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80076dc:	4b53      	ldr	r3, [pc, #332]	; (800782c <pvPortMalloc+0x160>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80076e4:	f000 f908 	bl	80078f8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d012      	beq.n	8007714 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80076ee:	2208      	movs	r2, #8
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	3308      	adds	r3, #8
 80076fa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	43db      	mvns	r3, r3
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	429a      	cmp	r2, r3
 8007704:	d804      	bhi.n	8007710 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	4413      	add	r3, r2
 800770c:	607b      	str	r3, [r7, #4]
 800770e:	e001      	b.n	8007714 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	db70      	blt.n	80077fc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d06d      	beq.n	80077fc <pvPortMalloc+0x130>
 8007720:	4b43      	ldr	r3, [pc, #268]	; (8007830 <pvPortMalloc+0x164>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	d868      	bhi.n	80077fc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800772a:	4b42      	ldr	r3, [pc, #264]	; (8007834 <pvPortMalloc+0x168>)
 800772c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800772e:	4b41      	ldr	r3, [pc, #260]	; (8007834 <pvPortMalloc+0x168>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007734:	e004      	b.n	8007740 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	429a      	cmp	r2, r3
 8007748:	d903      	bls.n	8007752 <pvPortMalloc+0x86>
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1f1      	bne.n	8007736 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007752:	4b36      	ldr	r3, [pc, #216]	; (800782c <pvPortMalloc+0x160>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007758:	429a      	cmp	r2, r3
 800775a:	d04f      	beq.n	80077fc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2208      	movs	r2, #8
 8007762:	4413      	add	r3, r2
 8007764:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	1ad2      	subs	r2, r2, r3
 8007776:	2308      	movs	r3, #8
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	429a      	cmp	r2, r3
 800777c:	d91f      	bls.n	80077be <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800777e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4413      	add	r3, r2
 8007784:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00a      	beq.n	80077a6 <pvPortMalloc+0xda>
        __asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	613b      	str	r3, [r7, #16]
    }
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	1ad2      	subs	r2, r2, r3
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077b8:	6978      	ldr	r0, [r7, #20]
 80077ba:	f000 f8f9 	bl	80079b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077be:	4b1c      	ldr	r3, [pc, #112]	; (8007830 <pvPortMalloc+0x164>)
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	4a19      	ldr	r2, [pc, #100]	; (8007830 <pvPortMalloc+0x164>)
 80077ca:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077cc:	4b18      	ldr	r3, [pc, #96]	; (8007830 <pvPortMalloc+0x164>)
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	4b19      	ldr	r3, [pc, #100]	; (8007838 <pvPortMalloc+0x16c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d203      	bcs.n	80077e0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077d8:	4b15      	ldr	r3, [pc, #84]	; (8007830 <pvPortMalloc+0x164>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a16      	ldr	r2, [pc, #88]	; (8007838 <pvPortMalloc+0x16c>)
 80077de:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80077f2:	4b12      	ldr	r3, [pc, #72]	; (800783c <pvPortMalloc+0x170>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	4a10      	ldr	r2, [pc, #64]	; (800783c <pvPortMalloc+0x170>)
 80077fa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80077fc:	f7fe faca 	bl	8005d94 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <pvPortMalloc+0x154>
        __asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	60fb      	str	r3, [r7, #12]
    }
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <pvPortMalloc+0x152>
    return pvReturn;
 8007820:	69fb      	ldr	r3, [r7, #28]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3728      	adds	r7, #40	; 0x28
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20013094 	.word	0x20013094
 8007830:	20013098 	.word	0x20013098
 8007834:	2001308c 	.word	0x2001308c
 8007838:	2001309c 	.word	0x2001309c
 800783c:	200130a0 	.word	0x200130a0

08007840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d049      	beq.n	80078e6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007852:	2308      	movs	r3, #8
 8007854:	425b      	negs	r3, r3
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4413      	add	r3, r2
 800785a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	db0a      	blt.n	800787e <vPortFree+0x3e>
        __asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	60fb      	str	r3, [r7, #12]
    }
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <vPortFree+0x5c>
        __asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	60bb      	str	r3, [r7, #8]
    }
 8007898:	bf00      	nop
 800789a:	e7fe      	b.n	800789a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	0fdb      	lsrs	r3, r3, #31
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01c      	beq.n	80078e6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d118      	bne.n	80078e6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80078c0:	f7fe fa5a 	bl	8005d78 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <vPortFree+0xb0>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4413      	add	r3, r2
 80078ce:	4a08      	ldr	r2, [pc, #32]	; (80078f0 <vPortFree+0xb0>)
 80078d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078d2:	6938      	ldr	r0, [r7, #16]
 80078d4:	f000 f86c 	bl	80079b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80078d8:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <vPortFree+0xb4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	4a05      	ldr	r2, [pc, #20]	; (80078f4 <vPortFree+0xb4>)
 80078e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80078e2:	f7fe fa57 	bl	8005d94 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80078e6:	bf00      	nop
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20013098 	.word	0x20013098
 80078f4:	200130a4 	.word	0x200130a4

080078f8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078fe:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007902:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007904:	4b25      	ldr	r3, [pc, #148]	; (800799c <prvHeapInit+0xa4>)
 8007906:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00c      	beq.n	800792c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3307      	adds	r3, #7
 8007916:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f023 0307 	bic.w	r3, r3, #7
 800791e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	4a1d      	ldr	r2, [pc, #116]	; (800799c <prvHeapInit+0xa4>)
 8007928:	4413      	add	r3, r2
 800792a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007930:	4a1b      	ldr	r2, [pc, #108]	; (80079a0 <prvHeapInit+0xa8>)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007936:	4b1a      	ldr	r3, [pc, #104]	; (80079a0 <prvHeapInit+0xa8>)
 8007938:	2200      	movs	r2, #0
 800793a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	4413      	add	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007944:	2208      	movs	r2, #8
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	1a9b      	subs	r3, r3, r2
 800794a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 0307 	bic.w	r3, r3, #7
 8007952:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <prvHeapInit+0xac>)
 8007958:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800795a:	4b12      	ldr	r3, [pc, #72]	; (80079a4 <prvHeapInit+0xac>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2200      	movs	r2, #0
 8007960:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007962:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <prvHeapInit+0xac>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	1ad2      	subs	r2, r2, r3
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007978:	4b0a      	ldr	r3, [pc, #40]	; (80079a4 <prvHeapInit+0xac>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	4a08      	ldr	r2, [pc, #32]	; (80079a8 <prvHeapInit+0xb0>)
 8007986:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	4a07      	ldr	r2, [pc, #28]	; (80079ac <prvHeapInit+0xb4>)
 800798e:	6013      	str	r3, [r2, #0]
}
 8007990:	bf00      	nop
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	2000048c 	.word	0x2000048c
 80079a0:	2001308c 	.word	0x2001308c
 80079a4:	20013094 	.word	0x20013094
 80079a8:	2001309c 	.word	0x2001309c
 80079ac:	20013098 	.word	0x20013098

080079b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079b8:	4b28      	ldr	r3, [pc, #160]	; (8007a5c <prvInsertBlockIntoFreeList+0xac>)
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	e002      	b.n	80079c4 <prvInsertBlockIntoFreeList+0x14>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d8f7      	bhi.n	80079be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	4413      	add	r3, r2
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d108      	bne.n	80079f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	441a      	add	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	441a      	add	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d118      	bne.n	8007a38 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	4b15      	ldr	r3, [pc, #84]	; (8007a60 <prvInsertBlockIntoFreeList+0xb0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d00d      	beq.n	8007a2e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	441a      	add	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	e008      	b.n	8007a40 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a2e:	4b0c      	ldr	r3, [pc, #48]	; (8007a60 <prvInsertBlockIntoFreeList+0xb0>)
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	e003      	b.n	8007a40 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d002      	beq.n	8007a4e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007a4e:	bf00      	nop
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	2001308c 	.word	0x2001308c
 8007a60:	20013094 	.word	0x20013094

08007a64 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007a68:	4803      	ldr	r0, [pc, #12]	; (8007a78 <_cbSendSystemDesc+0x14>)
 8007a6a:	f002 fa33 	bl	8009ed4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007a6e:	4803      	ldr	r0, [pc, #12]	; (8007a7c <_cbSendSystemDesc+0x18>)
 8007a70:	f002 fa30 	bl	8009ed4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8007a74:	bf00      	nop
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	0800dcbc 	.word	0x0800dcbc
 8007a7c:	0800dcfc 	.word	0x0800dcfc

08007a80 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007a84:	4b06      	ldr	r3, [pc, #24]	; (8007aa0 <SEGGER_SYSVIEW_Conf+0x20>)
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <SEGGER_SYSVIEW_Conf+0x20>)
 8007a8a:	6819      	ldr	r1, [r3, #0]
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <SEGGER_SYSVIEW_Conf+0x24>)
 8007a8e:	4a06      	ldr	r2, [pc, #24]	; (8007aa8 <SEGGER_SYSVIEW_Conf+0x28>)
 8007a90:	f001 fcee 	bl	8009470 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007a94:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007a98:	f001 fd2e 	bl	80094f8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007a9c:	bf00      	nop
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20000004 	.word	0x20000004
 8007aa4:	08007a65 	.word	0x08007a65
 8007aa8:	0800dd98 	.word	0x0800dd98

08007aac <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8007aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	607b      	str	r3, [r7, #4]
 8007ab6:	e033      	b.n	8007b20 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8007ab8:	491e      	ldr	r1, [pc, #120]	; (8007b34 <_cbSendTaskList+0x88>)
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	440b      	add	r3, r1
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	491a      	ldr	r1, [pc, #104]	; (8007b34 <_cbSendTaskList+0x88>)
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	6819      	ldr	r1, [r3, #0]
 8007ada:	4c16      	ldr	r4, [pc, #88]	; (8007b34 <_cbSendTaskList+0x88>)
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4423      	add	r3, r4
 8007ae8:	3308      	adds	r3, #8
 8007aea:	681c      	ldr	r4, [r3, #0]
 8007aec:	4d11      	ldr	r5, [pc, #68]	; (8007b34 <_cbSendTaskList+0x88>)
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	4613      	mov	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	442b      	add	r3, r5
 8007afa:	330c      	adds	r3, #12
 8007afc:	681d      	ldr	r5, [r3, #0]
 8007afe:	4e0d      	ldr	r6, [pc, #52]	; (8007b34 <_cbSendTaskList+0x88>)
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4433      	add	r3, r6
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	462b      	mov	r3, r5
 8007b14:	4622      	mov	r2, r4
 8007b16:	f000 f8bd 	bl	8007c94 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	607b      	str	r3, [r7, #4]
 8007b20:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <_cbSendTaskList+0x8c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d3c6      	bcc.n	8007ab8 <_cbSendTaskList+0xc>
  }
}
 8007b2a:	bf00      	nop
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b34:	200130a8 	.word	0x200130a8
 8007b38:	20013148 	.word	0x20013148

08007b3c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b40:	b082      	sub	sp, #8
 8007b42:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007b44:	f7fe fa36 	bl	8005fb4 <xTaskGetTickCountFromISR>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	469a      	mov	sl, r3
 8007b4e:	4693      	mov	fp, r2
 8007b50:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007b54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	f04f 0a00 	mov.w	sl, #0
 8007b60:	f04f 0b00 	mov.w	fp, #0
 8007b64:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8007b68:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8007b6c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007b70:	4652      	mov	r2, sl
 8007b72:	465b      	mov	r3, fp
 8007b74:	1a14      	subs	r4, r2, r0
 8007b76:	eb63 0501 	sbc.w	r5, r3, r1
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	f04f 0300 	mov.w	r3, #0
 8007b82:	00ab      	lsls	r3, r5, #2
 8007b84:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8007b88:	00a2      	lsls	r2, r4, #2
 8007b8a:	4614      	mov	r4, r2
 8007b8c:	461d      	mov	r5, r3
 8007b8e:	eb14 0800 	adds.w	r8, r4, r0
 8007b92:	eb45 0901 	adc.w	r9, r5, r1
 8007b96:	f04f 0200 	mov.w	r2, #0
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007baa:	4690      	mov	r8, r2
 8007bac:	4699      	mov	r9, r3
 8007bae:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8007bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	4619      	mov	r1, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08007bc4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
 8007bd0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007bd2:	2205      	movs	r2, #5
 8007bd4:	492b      	ldr	r1, [pc, #172]	; (8007c84 <SYSVIEW_AddTask+0xc0>)
 8007bd6:	68b8      	ldr	r0, [r7, #8]
 8007bd8:	f002 fcfe 	bl	800a5d8 <memcmp>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d04b      	beq.n	8007c7a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007be2:	4b29      	ldr	r3, [pc, #164]	; (8007c88 <SYSVIEW_AddTask+0xc4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b07      	cmp	r3, #7
 8007be8:	d903      	bls.n	8007bf2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8007bea:	4828      	ldr	r0, [pc, #160]	; (8007c8c <SYSVIEW_AddTask+0xc8>)
 8007bec:	f002 fc2e 	bl	800a44c <SEGGER_SYSVIEW_Warn>
    return;
 8007bf0:	e044      	b.n	8007c7c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007bf2:	4b25      	ldr	r3, [pc, #148]	; (8007c88 <SYSVIEW_AddTask+0xc4>)
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	4926      	ldr	r1, [pc, #152]	; (8007c90 <SYSVIEW_AddTask+0xcc>)
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	440b      	add	r3, r1
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8007c06:	4b20      	ldr	r3, [pc, #128]	; (8007c88 <SYSVIEW_AddTask+0xc4>)
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	4921      	ldr	r1, [pc, #132]	; (8007c90 <SYSVIEW_AddTask+0xcc>)
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	440b      	add	r3, r1
 8007c16:	3304      	adds	r3, #4
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007c1c:	4b1a      	ldr	r3, [pc, #104]	; (8007c88 <SYSVIEW_AddTask+0xc4>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	491b      	ldr	r1, [pc, #108]	; (8007c90 <SYSVIEW_AddTask+0xcc>)
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <SYSVIEW_AddTask+0xc4>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	4916      	ldr	r1, [pc, #88]	; (8007c90 <SYSVIEW_AddTask+0xcc>)
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	330c      	adds	r3, #12
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8007c48:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <SYSVIEW_AddTask+0xc4>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	4910      	ldr	r1, [pc, #64]	; (8007c90 <SYSVIEW_AddTask+0xcc>)
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	3310      	adds	r3, #16
 8007c5a:	69ba      	ldr	r2, [r7, #24]
 8007c5c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007c5e:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <SYSVIEW_AddTask+0xc4>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	4a08      	ldr	r2, [pc, #32]	; (8007c88 <SYSVIEW_AddTask+0xc4>)
 8007c66:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 f80e 	bl	8007c94 <SYSVIEW_SendTaskInfo>
 8007c78:	e000      	b.n	8007c7c <SYSVIEW_AddTask+0xb8>
    return;
 8007c7a:	bf00      	nop

}
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	0800dd0c 	.word	0x0800dd0c
 8007c88:	20013148 	.word	0x20013148
 8007c8c:	0800dd14 	.word	0x0800dd14
 8007c90:	200130a8 	.word	0x200130a8

08007c94 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007ca2:	f107 0314 	add.w	r3, r7, #20
 8007ca6:	2214      	movs	r2, #20
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f002 fcb2 	bl	800a614 <memset>
  TaskInfo.TaskID     = TaskID;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007cc4:	f107 0314 	add.w	r3, r7, #20
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f002 f80b 	bl	8009ce4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007cce:	bf00      	nop
 8007cd0:	3728      	adds	r7, #40	; 0x28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <__NVIC_EnableIRQ>:
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	4603      	mov	r3, r0
 8007ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	db0b      	blt.n	8007d02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	f003 021f 	and.w	r2, r3, #31
 8007cf0:	4907      	ldr	r1, [pc, #28]	; (8007d10 <__NVIC_EnableIRQ+0x38>)
 8007cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cf6:	095b      	lsrs	r3, r3, #5
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8007cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	e000e100 	.word	0xe000e100

08007d14 <__NVIC_SetPriority>:
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	6039      	str	r1, [r7, #0]
 8007d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	db0a      	blt.n	8007d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	490c      	ldr	r1, [pc, #48]	; (8007d60 <__NVIC_SetPriority+0x4c>)
 8007d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d32:	0112      	lsls	r2, r2, #4
 8007d34:	b2d2      	uxtb	r2, r2
 8007d36:	440b      	add	r3, r1
 8007d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007d3c:	e00a      	b.n	8007d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	4908      	ldr	r1, [pc, #32]	; (8007d64 <__NVIC_SetPriority+0x50>)
 8007d44:	79fb      	ldrb	r3, [r7, #7]
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	3b04      	subs	r3, #4
 8007d4c:	0112      	lsls	r2, r2, #4
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	440b      	add	r3, r1
 8007d52:	761a      	strb	r2, [r3, #24]
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	e000e100 	.word	0xe000e100
 8007d64:	e000ed00 	.word	0xe000ed00

08007d68 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8007d6e:	f002 fbc9 	bl	800a504 <SEGGER_SYSVIEW_IsStarted>
 8007d72:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8007d7a:	f001 fe37 	bl	80099ec <SEGGER_SYSVIEW_Start>
  }
}
 8007d7e:	bf00      	nop
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8007d92:	4b0c      	ldr	r3, [pc, #48]	; (8007dc4 <_cbOnUARTRx+0x3c>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d806      	bhi.n	8007da8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <_cbOnUARTRx+0x3c>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <_cbOnUARTRx+0x3c>)
 8007da4:	701a      	strb	r2, [r3, #0]
    goto Done;
 8007da6:	e009      	b.n	8007dbc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8007da8:	f7ff ffde 	bl	8007d68 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8007dac:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <_cbOnUARTRx+0x3c>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	4618      	mov	r0, r3
 8007db2:	1dfb      	adds	r3, r7, #7
 8007db4:	2201      	movs	r2, #1
 8007db6:	4619      	mov	r1, r3
 8007db8:	f000 fbec 	bl	8008594 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8007dbc:	bf00      	nop
}
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20000018 	.word	0x20000018

08007dc8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8007dd0:	4b14      	ldr	r3, [pc, #80]	; (8007e24 <_cbOnUARTTx+0x5c>)
 8007dd2:	785b      	ldrb	r3, [r3, #1]
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d80f      	bhi.n	8007df8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8007dd8:	4b12      	ldr	r3, [pc, #72]	; (8007e24 <_cbOnUARTTx+0x5c>)
 8007dda:	785b      	ldrb	r3, [r3, #1]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	4b12      	ldr	r3, [pc, #72]	; (8007e28 <_cbOnUARTTx+0x60>)
 8007de0:	5c9a      	ldrb	r2, [r3, r2]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8007de6:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <_cbOnUARTTx+0x5c>)
 8007de8:	785b      	ldrb	r3, [r3, #1]
 8007dea:	3301      	adds	r3, #1
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <_cbOnUARTTx+0x5c>)
 8007df0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8007df2:	2301      	movs	r3, #1
 8007df4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8007df6:	e00f      	b.n	8007e18 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8007df8:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <_cbOnUARTTx+0x5c>)
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	6879      	ldr	r1, [r7, #4]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 fa1b 	bl	800823c <SEGGER_RTT_ReadUpBufferNoLock>
 8007e06:	4603      	mov	r3, r0
 8007e08:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	da02      	bge.n	8007e16 <_cbOnUARTTx+0x4e>
    r = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	e000      	b.n	8007e18 <_cbOnUARTTx+0x50>
  }
Done:
 8007e16:	bf00      	nop
  return r;
 8007e18:	68fb      	ldr	r3, [r7, #12]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20000018 	.word	0x20000018
 8007e28:	0800dda0 	.word	0x0800dda0

08007e2c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8007e34:	4a04      	ldr	r2, [pc, #16]	; (8007e48 <SEGGER_UART_init+0x1c>)
 8007e36:	4905      	ldr	r1, [pc, #20]	; (8007e4c <SEGGER_UART_init+0x20>)
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f863 	bl	8007f04 <HIF_UART_Init>
}
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	08007d89 	.word	0x08007d89
 8007e4c:	08007dc9 	.word	0x08007dc9

08007e50 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8007e56:	4b1e      	ldr	r3, [pc, #120]	; (8007ed0 <USART2_IRQHandler+0x80>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d011      	beq.n	8007e8a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8007e66:	4b1b      	ldr	r3, [pc, #108]	; (8007ed4 <USART2_IRQHandler+0x84>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f003 030b 	and.w	r3, r3, #11
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d108      	bne.n	8007e8a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8007e78:	4b17      	ldr	r3, [pc, #92]	; (8007ed8 <USART2_IRQHandler+0x88>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d004      	beq.n	8007e8a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8007e80:	4b15      	ldr	r3, [pc, #84]	; (8007ed8 <USART2_IRQHandler+0x88>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	79fa      	ldrb	r2, [r7, #7]
 8007e86:	4610      	mov	r0, r2
 8007e88:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d01a      	beq.n	8007eca <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8007e94:	4b11      	ldr	r3, [pc, #68]	; (8007edc <USART2_IRQHandler+0x8c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d015      	beq.n	8007ec8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8007e9c:	4b0f      	ldr	r3, [pc, #60]	; (8007edc <USART2_IRQHandler+0x8c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	1dfa      	adds	r2, r7, #7
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	4798      	blx	r3
 8007ea6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8007eae:	4b0c      	ldr	r3, [pc, #48]	; (8007ee0 <USART2_IRQHandler+0x90>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a0b      	ldr	r2, [pc, #44]	; (8007ee0 <USART2_IRQHandler+0x90>)
 8007eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	e006      	b.n	8007eca <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8007ebc:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <USART2_IRQHandler+0x80>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8007ec0:	79fa      	ldrb	r2, [r7, #7]
 8007ec2:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <USART2_IRQHandler+0x84>)
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	e000      	b.n	8007eca <USART2_IRQHandler+0x7a>
      return;
 8007ec8:	bf00      	nop
    }
  }
}
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40004400 	.word	0x40004400
 8007ed4:	40004404 	.word	0x40004404
 8007ed8:	2001314c 	.word	0x2001314c
 8007edc:	20013150 	.word	0x20013150
 8007ee0:	4000440c 	.word	0x4000440c

08007ee4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8007ee4:	b480      	push	{r7}
 8007ee6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8007ee8:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a04      	ldr	r2, [pc, #16]	; (8007f00 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef2:	6013      	str	r3, [r2, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	4000440c 	.word	0x4000440c

08007f04 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8007f10:	4b2e      	ldr	r3, [pc, #184]	; (8007fcc <HIF_UART_Init+0xc8>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a2d      	ldr	r2, [pc, #180]	; (8007fcc <HIF_UART_Init+0xc8>)
 8007f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f1a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8007f1c:	4b2c      	ldr	r3, [pc, #176]	; (8007fd0 <HIF_UART_Init+0xcc>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a2b      	ldr	r2, [pc, #172]	; (8007fd0 <HIF_UART_Init+0xcc>)
 8007f22:	f043 0301 	orr.w	r3, r3, #1
 8007f26:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8007f28:	4b2a      	ldr	r3, [pc, #168]	; (8007fd4 <HIF_UART_Init+0xd0>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f34:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8007f3c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8007f3e:	4a25      	ldr	r2, [pc, #148]	; (8007fd4 <HIF_UART_Init+0xd0>)
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8007f44:	4b24      	ldr	r3, [pc, #144]	; (8007fd8 <HIF_UART_Init+0xd4>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f50:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8007f58:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8007f5a:	4a1f      	ldr	r2, [pc, #124]	; (8007fd8 <HIF_UART_Init+0xd4>)
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8007f60:	4b1e      	ldr	r3, [pc, #120]	; (8007fdc <HIF_UART_Init+0xd8>)
 8007f62:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8007f66:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8007f68:	4b1d      	ldr	r3, [pc, #116]	; (8007fe0 <HIF_UART_Init+0xdc>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8007f6e:	4b1d      	ldr	r3, [pc, #116]	; (8007fe4 <HIF_UART_Init+0xe0>)
 8007f70:	2280      	movs	r2, #128	; 0x80
 8007f72:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8007f7a:	4a1b      	ldr	r2, [pc, #108]	; (8007fe8 <HIF_UART_Init+0xe4>)
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f82:	3301      	adds	r3, #1
 8007f84:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	085b      	lsrs	r3, r3, #1
 8007f8a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f92:	d302      	bcc.n	8007f9a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8007f94:	f640 73ff 	movw	r3, #4095	; 0xfff
 8007f98:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	4a11      	ldr	r2, [pc, #68]	; (8007fec <HIF_UART_Init+0xe8>)
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8007faa:	4a11      	ldr	r2, [pc, #68]	; (8007ff0 <HIF_UART_Init+0xec>)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8007fb0:	4a10      	ldr	r2, [pc, #64]	; (8007ff4 <HIF_UART_Init+0xf0>)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8007fb6:	2106      	movs	r1, #6
 8007fb8:	2026      	movs	r0, #38	; 0x26
 8007fba:	f7ff feab 	bl	8007d14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8007fbe:	2026      	movs	r0, #38	; 0x26
 8007fc0:	f7ff fe8a 	bl	8007cd8 <__NVIC_EnableIRQ>
}
 8007fc4:	bf00      	nop
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	40023840 	.word	0x40023840
 8007fd0:	40023830 	.word	0x40023830
 8007fd4:	40020020 	.word	0x40020020
 8007fd8:	40020000 	.word	0x40020000
 8007fdc:	4000440c 	.word	0x4000440c
 8007fe0:	40004410 	.word	0x40004410
 8007fe4:	40004414 	.word	0x40004414
 8007fe8:	00f42400 	.word	0x00f42400
 8007fec:	40004408 	.word	0x40004408
 8007ff0:	2001314c 	.word	0x2001314c
 8007ff4:	20013150 	.word	0x20013150

08007ff8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007ffe:	4b26      	ldr	r3, [pc, #152]	; (8008098 <_DoInit+0xa0>)
 8008000:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8008002:	22a8      	movs	r2, #168	; 0xa8
 8008004:	2100      	movs	r1, #0
 8008006:	6838      	ldr	r0, [r7, #0]
 8008008:	f002 fb04 	bl	800a614 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2203      	movs	r2, #3
 8008010:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2203      	movs	r2, #3
 8008016:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	4a20      	ldr	r2, [pc, #128]	; (800809c <_DoInit+0xa4>)
 800801c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	4a1f      	ldr	r2, [pc, #124]	; (80080a0 <_DoInit+0xa8>)
 8008022:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800802a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2200      	movs	r2, #0
 8008030:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2200      	movs	r2, #0
 8008036:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2200      	movs	r2, #0
 800803c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	4a16      	ldr	r2, [pc, #88]	; (800809c <_DoInit+0xa4>)
 8008042:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	4a17      	ldr	r2, [pc, #92]	; (80080a4 <_DoInit+0xac>)
 8008048:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2210      	movs	r2, #16
 800804e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2200      	movs	r2, #0
 8008054:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2200      	movs	r2, #0
 800805a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2200      	movs	r2, #0
 8008060:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008062:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008066:	2300      	movs	r3, #0
 8008068:	607b      	str	r3, [r7, #4]
 800806a:	e00c      	b.n	8008086 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f1c3 030f 	rsb	r3, r3, #15
 8008072:	4a0d      	ldr	r2, [pc, #52]	; (80080a8 <_DoInit+0xb0>)
 8008074:	5cd1      	ldrb	r1, [r2, r3]
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4413      	add	r3, r2
 800807c:	460a      	mov	r2, r1
 800807e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3301      	adds	r3, #1
 8008084:	607b      	str	r3, [r7, #4]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b0f      	cmp	r3, #15
 800808a:	d9ef      	bls.n	800806c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800808c:	f3bf 8f5f 	dmb	sy
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20013154 	.word	0x20013154
 800809c:	0800dd64 	.word	0x0800dd64
 80080a0:	200131fc 	.word	0x200131fc
 80080a4:	200135fc 	.word	0x200135fc
 80080a8:	0800dda4 	.word	0x0800dda4

080080ac <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08a      	sub	sp, #40	; 0x28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80080b8:	2300      	movs	r3, #0
 80080ba:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d905      	bls.n	80080dc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
 80080da:	e007      	b.n	80080ec <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	69b9      	ldr	r1, [r7, #24]
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	1acb      	subs	r3, r1, r3
 80080e6:	4413      	add	r3, r2
 80080e8:	3b01      	subs	r3, #1
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f6:	4293      	cmp	r3, r2
 80080f8:	bf28      	it	cs
 80080fa:	4613      	movcs	r3, r2
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80080fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4293      	cmp	r3, r2
 8008104:	bf28      	it	cs
 8008106:	4613      	movcs	r3, r2
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	4413      	add	r3, r2
 8008112:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8008114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008116:	68b9      	ldr	r1, [r7, #8]
 8008118:	6978      	ldr	r0, [r7, #20]
 800811a:	f002 fa6d 	bl	800a5f8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800811e:	6a3a      	ldr	r2, [r7, #32]
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	4413      	add	r3, r2
 8008124:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	4413      	add	r3, r2
 800812c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	4413      	add	r3, r2
 800813c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	69fa      	ldr	r2, [r7, #28]
 8008144:	429a      	cmp	r2, r3
 8008146:	d101      	bne.n	800814c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8008148:	2300      	movs	r3, #0
 800814a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800814c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1b2      	bne.n	80080c2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800815c:	6a3b      	ldr	r3, [r7, #32]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3728      	adds	r7, #40	; 0x28
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008166:	b580      	push	{r7, lr}
 8008168:	b088      	sub	sp, #32
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	429a      	cmp	r2, r3
 8008188:	d911      	bls.n	80081ae <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	4413      	add	r3, r2
 8008192:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	6938      	ldr	r0, [r7, #16]
 800819a:	f002 fa2d 	bl	800a5f8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800819e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	441a      	add	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80081ac:	e01f      	b.n	80081ee <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	4413      	add	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	6938      	ldr	r0, [r7, #16]
 80081c2:	f002 fa19 	bl	800a5f8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	4413      	add	r3, r2
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	4619      	mov	r1, r3
 80081de:	6938      	ldr	r0, [r7, #16]
 80081e0:	f002 fa0a 	bl	800a5f8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80081e4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	60da      	str	r2, [r3, #12]
}
 80081ee:	bf00      	nop
 80081f0:	3720      	adds	r7, #32
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80081f6:	b480      	push	{r7}
 80081f8:	b087      	sub	sp, #28
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	429a      	cmp	r2, r3
 8008210:	d808      	bhi.n	8008224 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689a      	ldr	r2, [r3, #8]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	1ad2      	subs	r2, r2, r3
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	4413      	add	r3, r2
 800821e:	3b01      	subs	r3, #1
 8008220:	617b      	str	r3, [r7, #20]
 8008222:	e004      	b.n	800822e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800822e:	697b      	ldr	r3, [r7, #20]
}
 8008230:	4618      	mov	r0, r3
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800823c:	b580      	push	{r7, lr}
 800823e:	b08c      	sub	sp, #48	; 0x30
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8008248:	4b3e      	ldr	r3, [pc, #248]	; (8008344 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800824a:	623b      	str	r3, [r7, #32]
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b53      	cmp	r3, #83	; 0x53
 8008254:	d001      	beq.n	800825a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8008256:	f7ff fecf 	bl	8007ff8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	4613      	mov	r3, r2
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	4413      	add	r3, r2
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	4a37      	ldr	r2, [pc, #220]	; (8008344 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8008268:	4413      	add	r3, r2
 800826a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800827c:	2300      	movs	r3, #0
 800827e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	429a      	cmp	r2, r3
 8008286:	d92b      	bls.n	80082e0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	689a      	ldr	r2, [r3, #8]
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4293      	cmp	r3, r2
 8008298:	bf28      	it	cs
 800829a:	4613      	movcs	r3, r2
 800829c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	4413      	add	r3, r2
 80082a6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	6939      	ldr	r1, [r7, #16]
 80082ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082ae:	f002 f9a3 	bl	800a5f8 <memcpy>
    NumBytesRead += NumBytesRem;
 80082b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	4413      	add	r3, r2
 80082b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80082ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	4413      	add	r3, r2
 80082c0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80082ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	4413      	add	r3, r2
 80082d0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d8:	429a      	cmp	r2, r3
 80082da:	d101      	bne.n	80082e0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80082dc:	2300      	movs	r3, #0
 80082de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4293      	cmp	r3, r2
 80082ee:	bf28      	it	cs
 80082f0:	4613      	movcs	r3, r2
 80082f2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d019      	beq.n	800832e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	4413      	add	r3, r2
 8008302:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	6939      	ldr	r1, [r7, #16]
 8008308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800830a:	f002 f975 	bl	800a5f8 <memcpy>
    NumBytesRead += NumBytesRem;
 800830e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	4413      	add	r3, r2
 8008314:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	4413      	add	r3, r2
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	4413      	add	r3, r2
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008338:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800833a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800833c:	4618      	mov	r0, r3
 800833e:	3730      	adds	r7, #48	; 0x30
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20013154 	.word	0x20013154

08008348 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008348:	b580      	push	{r7, lr}
 800834a:	b08c      	sub	sp, #48	; 0x30
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008354:	4b3e      	ldr	r3, [pc, #248]	; (8008450 <SEGGER_RTT_ReadNoLock+0x108>)
 8008356:	623b      	str	r3, [r7, #32]
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b53      	cmp	r3, #83	; 0x53
 8008360:	d001      	beq.n	8008366 <SEGGER_RTT_ReadNoLock+0x1e>
 8008362:	f7ff fe49 	bl	8007ff8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	4613      	mov	r3, r2
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	4413      	add	r3, r2
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	3360      	adds	r3, #96	; 0x60
 8008372:	4a37      	ldr	r2, [pc, #220]	; (8008450 <SEGGER_RTT_ReadNoLock+0x108>)
 8008374:	4413      	add	r3, r2
 8008376:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008388:	2300      	movs	r3, #0
 800838a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800838c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	429a      	cmp	r2, r3
 8008392:	d92b      	bls.n	80083ec <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4293      	cmp	r3, r2
 80083a4:	bf28      	it	cs
 80083a6:	4613      	movcs	r3, r2
 80083a8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	4413      	add	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	6939      	ldr	r1, [r7, #16]
 80083b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083ba:	f002 f91d 	bl	800a5f8 <memcpy>
    NumBytesRead += NumBytesRem;
 80083be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	4413      	add	r3, r2
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80083c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	4413      	add	r3, r2
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80083d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	4413      	add	r3, r2
 80083dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d101      	bne.n	80083ec <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80083e8:	2300      	movs	r3, #0
 80083ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4293      	cmp	r3, r2
 80083fa:	bf28      	it	cs
 80083fc:	4613      	movcs	r3, r2
 80083fe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d019      	beq.n	800843a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	4413      	add	r3, r2
 800840e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	6939      	ldr	r1, [r7, #16]
 8008414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008416:	f002 f8ef 	bl	800a5f8 <memcpy>
    NumBytesRead += NumBytesRem;
 800841a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	4413      	add	r3, r2
 8008420:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	4413      	add	r3, r2
 8008428:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	4413      	add	r3, r2
 8008438:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008444:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008448:	4618      	mov	r0, r3
 800844a:	3730      	adds	r7, #48	; 0x30
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	20013154 	.word	0x20013154

08008454 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	4613      	mov	r3, r2
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	4413      	add	r3, r2
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	3360      	adds	r3, #96	; 0x60
 8008470:	4a1f      	ldr	r2, [pc, #124]	; (80084f0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8008472:	4413      	add	r3, r2
 8008474:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d029      	beq.n	80084d2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800847e:	2b02      	cmp	r3, #2
 8008480:	d82e      	bhi.n	80084e0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8008486:	2b01      	cmp	r3, #1
 8008488:	d013      	beq.n	80084b2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800848a:	e029      	b.n	80084e0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800848c:	6978      	ldr	r0, [r7, #20]
 800848e:	f7ff feb2 	bl	80081f6 <_GetAvailWriteSpace>
 8008492:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	429a      	cmp	r2, r3
 800849a:	d202      	bcs.n	80084a2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800849c:	2300      	movs	r3, #0
 800849e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80084a0:	e021      	b.n	80084e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	69b9      	ldr	r1, [r7, #24]
 80084aa:	6978      	ldr	r0, [r7, #20]
 80084ac:	f7ff fe5b 	bl	8008166 <_WriteNoCheck>
    break;
 80084b0:	e019      	b.n	80084e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80084b2:	6978      	ldr	r0, [r7, #20]
 80084b4:	f7ff fe9f 	bl	80081f6 <_GetAvailWriteSpace>
 80084b8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	4293      	cmp	r3, r2
 80084c0:	bf28      	it	cs
 80084c2:	4613      	movcs	r3, r2
 80084c4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80084c6:	69fa      	ldr	r2, [r7, #28]
 80084c8:	69b9      	ldr	r1, [r7, #24]
 80084ca:	6978      	ldr	r0, [r7, #20]
 80084cc:	f7ff fe4b 	bl	8008166 <_WriteNoCheck>
    break;
 80084d0:	e009      	b.n	80084e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	69b9      	ldr	r1, [r7, #24]
 80084d6:	6978      	ldr	r0, [r7, #20]
 80084d8:	f7ff fde8 	bl	80080ac <_WriteBlocking>
 80084dc:	61f8      	str	r0, [r7, #28]
    break;
 80084de:	e002      	b.n	80084e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80084e0:	2300      	movs	r3, #0
 80084e2:	61fb      	str	r3, [r7, #28]
    break;
 80084e4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80084e6:	69fb      	ldr	r3, [r7, #28]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3720      	adds	r7, #32
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20013154 	.word	0x20013154

080084f4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	4613      	mov	r3, r2
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	4413      	add	r3, r2
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	4a1f      	ldr	r2, [pc, #124]	; (8008590 <SEGGER_RTT_WriteNoLock+0x9c>)
 8008512:	4413      	add	r3, r2
 8008514:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	2b02      	cmp	r3, #2
 800851c:	d029      	beq.n	8008572 <SEGGER_RTT_WriteNoLock+0x7e>
 800851e:	2b02      	cmp	r3, #2
 8008520:	d82e      	bhi.n	8008580 <SEGGER_RTT_WriteNoLock+0x8c>
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <SEGGER_RTT_WriteNoLock+0x38>
 8008526:	2b01      	cmp	r3, #1
 8008528:	d013      	beq.n	8008552 <SEGGER_RTT_WriteNoLock+0x5e>
 800852a:	e029      	b.n	8008580 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800852c:	6978      	ldr	r0, [r7, #20]
 800852e:	f7ff fe62 	bl	80081f6 <_GetAvailWriteSpace>
 8008532:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	429a      	cmp	r2, r3
 800853a:	d202      	bcs.n	8008542 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800853c:	2300      	movs	r3, #0
 800853e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8008540:	e021      	b.n	8008586 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	69b9      	ldr	r1, [r7, #24]
 800854a:	6978      	ldr	r0, [r7, #20]
 800854c:	f7ff fe0b 	bl	8008166 <_WriteNoCheck>
    break;
 8008550:	e019      	b.n	8008586 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008552:	6978      	ldr	r0, [r7, #20]
 8008554:	f7ff fe4f 	bl	80081f6 <_GetAvailWriteSpace>
 8008558:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	4293      	cmp	r3, r2
 8008560:	bf28      	it	cs
 8008562:	4613      	movcs	r3, r2
 8008564:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8008566:	69fa      	ldr	r2, [r7, #28]
 8008568:	69b9      	ldr	r1, [r7, #24]
 800856a:	6978      	ldr	r0, [r7, #20]
 800856c:	f7ff fdfb 	bl	8008166 <_WriteNoCheck>
    break;
 8008570:	e009      	b.n	8008586 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	69b9      	ldr	r1, [r7, #24]
 8008576:	6978      	ldr	r0, [r7, #20]
 8008578:	f7ff fd98 	bl	80080ac <_WriteBlocking>
 800857c:	61f8      	str	r0, [r7, #28]
    break;
 800857e:	e002      	b.n	8008586 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8008580:	2300      	movs	r3, #0
 8008582:	61fb      	str	r3, [r7, #28]
    break;
 8008584:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8008586:	69fb      	ldr	r3, [r7, #28]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3720      	adds	r7, #32
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20013154 	.word	0x20013154

08008594 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80085a0:	4b0e      	ldr	r3, [pc, #56]	; (80085dc <SEGGER_RTT_WriteDownBuffer+0x48>)
 80085a2:	61fb      	str	r3, [r7, #28]
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b53      	cmp	r3, #83	; 0x53
 80085ac:	d001      	beq.n	80085b2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80085ae:	f7ff fd23 	bl	8007ff8 <_DoInit>
  SEGGER_RTT_LOCK();
 80085b2:	f3ef 8311 	mrs	r3, BASEPRI
 80085b6:	f04f 0120 	mov.w	r1, #32
 80085ba:	f381 8811 	msr	BASEPRI, r1
 80085be:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	68b9      	ldr	r1, [r7, #8]
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f7ff ff45 	bl	8008454 <SEGGER_RTT_WriteDownBufferNoLock>
 80085ca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80085d2:	697b      	ldr	r3, [r7, #20]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3720      	adds	r7, #32
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20013154 	.word	0x20013154

080085e0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b088      	sub	sp, #32
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80085ec:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <SEGGER_RTT_Write+0x48>)
 80085ee:	61fb      	str	r3, [r7, #28]
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b53      	cmp	r3, #83	; 0x53
 80085f8:	d001      	beq.n	80085fe <SEGGER_RTT_Write+0x1e>
 80085fa:	f7ff fcfd 	bl	8007ff8 <_DoInit>
  SEGGER_RTT_LOCK();
 80085fe:	f3ef 8311 	mrs	r3, BASEPRI
 8008602:	f04f 0120 	mov.w	r1, #32
 8008606:	f381 8811 	msr	BASEPRI, r1
 800860a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	68b9      	ldr	r1, [r7, #8]
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f7ff ff6f 	bl	80084f4 <SEGGER_RTT_WriteNoLock>
 8008616:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800861e:	697b      	ldr	r3, [r7, #20]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20013154 	.word	0x20013154

0800862c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800863a:	4b3d      	ldr	r3, [pc, #244]	; (8008730 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800863c:	61bb      	str	r3, [r7, #24]
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b53      	cmp	r3, #83	; 0x53
 8008646:	d001      	beq.n	800864c <SEGGER_RTT_AllocUpBuffer+0x20>
 8008648:	f7ff fcd6 	bl	8007ff8 <_DoInit>
  SEGGER_RTT_LOCK();
 800864c:	f3ef 8311 	mrs	r3, BASEPRI
 8008650:	f04f 0120 	mov.w	r1, #32
 8008654:	f381 8811 	msr	BASEPRI, r1
 8008658:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800865a:	4b35      	ldr	r3, [pc, #212]	; (8008730 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800865c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8008662:	6939      	ldr	r1, [r7, #16]
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	1c5a      	adds	r2, r3, #1
 8008668:	4613      	mov	r3, r2
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	4413      	add	r3, r2
 800866e:	00db      	lsls	r3, r3, #3
 8008670:	440b      	add	r3, r1
 8008672:	3304      	adds	r3, #4
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d008      	beq.n	800868c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	3301      	adds	r3, #1
 800867e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	429a      	cmp	r2, r3
 8008688:	dbeb      	blt.n	8008662 <SEGGER_RTT_AllocUpBuffer+0x36>
 800868a:	e000      	b.n	800868e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800868c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	429a      	cmp	r2, r3
 8008696:	da3f      	bge.n	8008718 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8008698:	6939      	ldr	r1, [r7, #16]
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	4613      	mov	r3, r2
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	4413      	add	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	440b      	add	r3, r1
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80086ac:	6939      	ldr	r1, [r7, #16]
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	4613      	mov	r3, r2
 80086b4:	005b      	lsls	r3, r3, #1
 80086b6:	4413      	add	r3, r2
 80086b8:	00db      	lsls	r3, r3, #3
 80086ba:	440b      	add	r3, r1
 80086bc:	3304      	adds	r3, #4
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80086c2:	6939      	ldr	r1, [r7, #16]
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	4613      	mov	r3, r2
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	4413      	add	r3, r2
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	440b      	add	r3, r1
 80086d0:	3320      	adds	r3, #32
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80086d6:	6939      	ldr	r1, [r7, #16]
 80086d8:	69fa      	ldr	r2, [r7, #28]
 80086da:	4613      	mov	r3, r2
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	4413      	add	r3, r2
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	440b      	add	r3, r1
 80086e4:	3328      	adds	r3, #40	; 0x28
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80086ea:	6939      	ldr	r1, [r7, #16]
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	4613      	mov	r3, r2
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	4413      	add	r3, r2
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	440b      	add	r3, r1
 80086f8:	3324      	adds	r3, #36	; 0x24
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80086fe:	6939      	ldr	r1, [r7, #16]
 8008700:	69fa      	ldr	r2, [r7, #28]
 8008702:	4613      	mov	r3, r2
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	4413      	add	r3, r2
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	440b      	add	r3, r1
 800870c:	332c      	adds	r3, #44	; 0x2c
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008712:	f3bf 8f5f 	dmb	sy
 8008716:	e002      	b.n	800871e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8008718:	f04f 33ff 	mov.w	r3, #4294967295
 800871c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8008724:	69fb      	ldr	r3, [r7, #28]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3720      	adds	r7, #32
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20013154 	.word	0x20013154

08008734 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008734:	b580      	push	{r7, lr}
 8008736:	b08a      	sub	sp, #40	; 0x28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8008742:	4b21      	ldr	r3, [pc, #132]	; (80087c8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008744:	623b      	str	r3, [r7, #32]
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b53      	cmp	r3, #83	; 0x53
 800874e:	d001      	beq.n	8008754 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008750:	f7ff fc52 	bl	8007ff8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008754:	4b1c      	ldr	r3, [pc, #112]	; (80087c8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008756:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b02      	cmp	r3, #2
 800875c:	d82c      	bhi.n	80087b8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800875e:	f3ef 8311 	mrs	r3, BASEPRI
 8008762:	f04f 0120 	mov.w	r1, #32
 8008766:	f381 8811 	msr	BASEPRI, r1
 800876a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4613      	mov	r3, r2
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	4413      	add	r3, r2
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	3360      	adds	r3, #96	; 0x60
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	4413      	add	r3, r2
 800877c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00e      	beq.n	80087a2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2200      	movs	r2, #0
 800879a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2200      	movs	r2, #0
 80087a0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087a6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80087a8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	627b      	str	r3, [r7, #36]	; 0x24
 80087b6:	e002      	b.n	80087be <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80087b8:	f04f 33ff 	mov.w	r3, #4294967295
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3728      	adds	r7, #40	; 0x28
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20013154 	.word	0x20013154

080087cc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	60fa      	str	r2, [r7, #12]
 80087e2:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b80      	cmp	r3, #128	; 0x80
 80087e8:	d90a      	bls.n	8008800 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80087ea:	2380      	movs	r3, #128	; 0x80
 80087ec:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80087ee:	e007      	b.n	8008800 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	1c53      	adds	r3, r2, #1
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	1c59      	adds	r1, r3, #1
 80087fa:	60f9      	str	r1, [r7, #12]
 80087fc:	7812      	ldrb	r2, [r2, #0]
 80087fe:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	1e5a      	subs	r2, r3, #1
 8008804:	607a      	str	r2, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <_EncodeStr+0x46>
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1ee      	bne.n	80087f0 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	b2da      	uxtb	r2, r3
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800881e:	68fb      	ldr	r3, [r7, #12]
}
 8008820:	4618      	mov	r0, r3
 8008822:	371c      	adds	r7, #28
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3307      	adds	r3, #7
}
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800884a:	4b35      	ldr	r3, [pc, #212]	; (8008920 <_HandleIncomingPacket+0xdc>)
 800884c:	7e1b      	ldrb	r3, [r3, #24]
 800884e:	4618      	mov	r0, r3
 8008850:	1cfb      	adds	r3, r7, #3
 8008852:	2201      	movs	r2, #1
 8008854:	4619      	mov	r1, r3
 8008856:	f7ff fd77 	bl	8008348 <SEGGER_RTT_ReadNoLock>
 800885a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d052      	beq.n	8008908 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8008862:	78fb      	ldrb	r3, [r7, #3]
 8008864:	2b80      	cmp	r3, #128	; 0x80
 8008866:	d031      	beq.n	80088cc <_HandleIncomingPacket+0x88>
 8008868:	2b80      	cmp	r3, #128	; 0x80
 800886a:	dc40      	bgt.n	80088ee <_HandleIncomingPacket+0xaa>
 800886c:	2b07      	cmp	r3, #7
 800886e:	dc15      	bgt.n	800889c <_HandleIncomingPacket+0x58>
 8008870:	2b00      	cmp	r3, #0
 8008872:	dd3c      	ble.n	80088ee <_HandleIncomingPacket+0xaa>
 8008874:	3b01      	subs	r3, #1
 8008876:	2b06      	cmp	r3, #6
 8008878:	d839      	bhi.n	80088ee <_HandleIncomingPacket+0xaa>
 800887a:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <_HandleIncomingPacket+0x3c>)
 800887c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008880:	080088a3 	.word	0x080088a3
 8008884:	080088a9 	.word	0x080088a9
 8008888:	080088af 	.word	0x080088af
 800888c:	080088b5 	.word	0x080088b5
 8008890:	080088bb 	.word	0x080088bb
 8008894:	080088c1 	.word	0x080088c1
 8008898:	080088c7 	.word	0x080088c7
 800889c:	2b7f      	cmp	r3, #127	; 0x7f
 800889e:	d035      	beq.n	800890c <_HandleIncomingPacket+0xc8>
 80088a0:	e025      	b.n	80088ee <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80088a2:	f001 f8a3 	bl	80099ec <SEGGER_SYSVIEW_Start>
      break;
 80088a6:	e036      	b.n	8008916 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80088a8:	f001 f95c 	bl	8009b64 <SEGGER_SYSVIEW_Stop>
      break;
 80088ac:	e033      	b.n	8008916 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80088ae:	f001 fb35 	bl	8009f1c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80088b2:	e030      	b.n	8008916 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80088b4:	f001 fafa 	bl	8009eac <SEGGER_SYSVIEW_SendTaskList>
      break;
 80088b8:	e02d      	b.n	8008916 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80088ba:	f001 f979 	bl	8009bb0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80088be:	e02a      	b.n	8008916 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80088c0:	f001 fd72 	bl	800a3a8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80088c4:	e027      	b.n	8008916 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80088c6:	f001 fd51 	bl	800a36c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80088ca:	e024      	b.n	8008916 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80088cc:	4b14      	ldr	r3, [pc, #80]	; (8008920 <_HandleIncomingPacket+0xdc>)
 80088ce:	7e1b      	ldrb	r3, [r3, #24]
 80088d0:	4618      	mov	r0, r3
 80088d2:	1cfb      	adds	r3, r7, #3
 80088d4:	2201      	movs	r2, #1
 80088d6:	4619      	mov	r1, r3
 80088d8:	f7ff fd36 	bl	8008348 <SEGGER_RTT_ReadNoLock>
 80088dc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d015      	beq.n	8008910 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 fcb6 	bl	800a258 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80088ec:	e010      	b.n	8008910 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80088ee:	78fb      	ldrb	r3, [r7, #3]
 80088f0:	b25b      	sxtb	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	da0e      	bge.n	8008914 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80088f6:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <_HandleIncomingPacket+0xdc>)
 80088f8:	7e1b      	ldrb	r3, [r3, #24]
 80088fa:	4618      	mov	r0, r3
 80088fc:	1cfb      	adds	r3, r7, #3
 80088fe:	2201      	movs	r2, #1
 8008900:	4619      	mov	r1, r3
 8008902:	f7ff fd21 	bl	8008348 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8008906:	e005      	b.n	8008914 <_HandleIncomingPacket+0xd0>
    }
  }
 8008908:	bf00      	nop
 800890a:	e004      	b.n	8008916 <_HandleIncomingPacket+0xd2>
      break;
 800890c:	bf00      	nop
 800890e:	e002      	b.n	8008916 <_HandleIncomingPacket+0xd2>
      break;
 8008910:	bf00      	nop
 8008912:	e000      	b.n	8008916 <_HandleIncomingPacket+0xd2>
      break;
 8008914:	bf00      	nop
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20014614 	.word	0x20014614

08008924 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008924:	b580      	push	{r7, lr}
 8008926:	b08c      	sub	sp, #48	; 0x30
 8008928:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800892a:	2301      	movs	r3, #1
 800892c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800892e:	1d3b      	adds	r3, r7, #4
 8008930:	3301      	adds	r3, #1
 8008932:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008938:	4b32      	ldr	r3, [pc, #200]	; (8008a04 <_TrySendOverflowPacket+0xe0>)
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	62bb      	str	r3, [r7, #40]	; 0x28
 800893e:	e00b      	b.n	8008958 <_TrySendOverflowPacket+0x34>
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	b2da      	uxtb	r2, r3
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	1c59      	adds	r1, r3, #1
 8008948:	62f9      	str	r1, [r7, #44]	; 0x2c
 800894a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800894e:	b2d2      	uxtb	r2, r2
 8008950:	701a      	strb	r2, [r3, #0]
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	09db      	lsrs	r3, r3, #7
 8008956:	62bb      	str	r3, [r7, #40]	; 0x28
 8008958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895a:	2b7f      	cmp	r3, #127	; 0x7f
 800895c:	d8f0      	bhi.n	8008940 <_TrySendOverflowPacket+0x1c>
 800895e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008960:	1c5a      	adds	r2, r3, #1
 8008962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008966:	b2d2      	uxtb	r2, r2
 8008968:	701a      	strb	r2, [r3, #0]
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800896e:	4b26      	ldr	r3, [pc, #152]	; (8008a08 <_TrySendOverflowPacket+0xe4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008974:	4b23      	ldr	r3, [pc, #140]	; (8008a04 <_TrySendOverflowPacket+0xe0>)
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	623b      	str	r3, [r7, #32]
 8008986:	e00b      	b.n	80089a0 <_TrySendOverflowPacket+0x7c>
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	b2da      	uxtb	r2, r3
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	1c59      	adds	r1, r3, #1
 8008990:	6279      	str	r1, [r7, #36]	; 0x24
 8008992:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008996:	b2d2      	uxtb	r2, r2
 8008998:	701a      	strb	r2, [r3, #0]
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	09db      	lsrs	r3, r3, #7
 800899e:	623b      	str	r3, [r7, #32]
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	2b7f      	cmp	r3, #127	; 0x7f
 80089a4:	d8f0      	bhi.n	8008988 <_TrySendOverflowPacket+0x64>
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	627a      	str	r2, [r7, #36]	; 0x24
 80089ac:	6a3a      	ldr	r2, [r7, #32]
 80089ae:	b2d2      	uxtb	r2, r2
 80089b0:	701a      	strb	r2, [r3, #0]
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80089b6:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <_TrySendOverflowPacket+0xe0>)
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	4618      	mov	r0, r3
 80089bc:	1d3b      	adds	r3, r7, #4
 80089be:	69fa      	ldr	r2, [r7, #28]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	461a      	mov	r2, r3
 80089c4:	1d3b      	adds	r3, r7, #4
 80089c6:	4619      	mov	r1, r3
 80089c8:	f7f7 fc22 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80089cc:	4603      	mov	r3, r0
 80089ce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80089d0:	f7ff fa88 	bl	8007ee4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80089da:	4a0a      	ldr	r2, [pc, #40]	; (8008a04 <_TrySendOverflowPacket+0xe0>)
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80089e0:	4b08      	ldr	r3, [pc, #32]	; (8008a04 <_TrySendOverflowPacket+0xe0>)
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <_TrySendOverflowPacket+0xe0>)
 80089ea:	701a      	strb	r2, [r3, #0]
 80089ec:	e004      	b.n	80089f8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80089ee:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <_TrySendOverflowPacket+0xe0>)
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	3301      	adds	r3, #1
 80089f4:	4a03      	ldr	r2, [pc, #12]	; (8008a04 <_TrySendOverflowPacket+0xe0>)
 80089f6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80089f8:	693b      	ldr	r3, [r7, #16]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3730      	adds	r7, #48	; 0x30
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20014614 	.word	0x20014614
 8008a08:	e0001004 	.word	0xe0001004

08008a0c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	; 0x28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008a18:	4b96      	ldr	r3, [pc, #600]	; (8008c74 <_SendPacket+0x268>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d010      	beq.n	8008a42 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008a20:	4b94      	ldr	r3, [pc, #592]	; (8008c74 <_SendPacket+0x268>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 8130 	beq.w	8008c8a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8008a2a:	4b92      	ldr	r3, [pc, #584]	; (8008c74 <_SendPacket+0x268>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d109      	bne.n	8008a46 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8008a32:	f7ff ff77 	bl	8008924 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8008a36:	4b8f      	ldr	r3, [pc, #572]	; (8008c74 <_SendPacket+0x268>)
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	f040 8127 	bne.w	8008c8e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8008a40:	e001      	b.n	8008a46 <_SendPacket+0x3a>
    goto Send;
 8008a42:	bf00      	nop
 8008a44:	e000      	b.n	8008a48 <_SendPacket+0x3c>
Send:
 8008a46:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b1f      	cmp	r3, #31
 8008a4c:	d809      	bhi.n	8008a62 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8008a4e:	4b89      	ldr	r3, [pc, #548]	; (8008c74 <_SendPacket+0x268>)
 8008a50:	69da      	ldr	r2, [r3, #28]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	fa22 f303 	lsr.w	r3, r2, r3
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f040 8118 	bne.w	8008c92 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b17      	cmp	r3, #23
 8008a66:	d807      	bhi.n	8008a78 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	e0c4      	b.n	8008c02 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	2b7f      	cmp	r3, #127	; 0x7f
 8008a84:	d912      	bls.n	8008aac <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	09da      	lsrs	r2, r3, #7
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	b2d2      	uxtb	r2, r2
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	3a01      	subs	r2, #1
 8008a9e:	60fa      	str	r2, [r7, #12]
 8008aa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	701a      	strb	r2, [r3, #0]
 8008aaa:	e006      	b.n	8008aba <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b7e      	cmp	r3, #126	; 0x7e
 8008abe:	d807      	bhi.n	8008ad0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	701a      	strb	r2, [r3, #0]
 8008ace:	e098      	b.n	8008c02 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ad6:	d212      	bcs.n	8008afe <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	09da      	lsrs	r2, r3, #7
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]
 8008ae2:	b2d2      	uxtb	r2, r2
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	3a01      	subs	r2, #1
 8008af0:	60fa      	str	r2, [r7, #12]
 8008af2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	701a      	strb	r2, [r3, #0]
 8008afc:	e081      	b.n	8008c02 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b04:	d21d      	bcs.n	8008b42 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	0b9a      	lsrs	r2, r3, #14
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	b2d2      	uxtb	r2, r2
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	09db      	lsrs	r3, r3, #7
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	3a01      	subs	r2, #1
 8008b20:	60fa      	str	r2, [r7, #12]
 8008b22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	3a01      	subs	r2, #1
 8008b34:	60fa      	str	r2, [r7, #12]
 8008b36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	701a      	strb	r2, [r3, #0]
 8008b40:	e05f      	b.n	8008c02 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b48:	d228      	bcs.n	8008b9c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	0d5a      	lsrs	r2, r3, #21
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	b2d2      	uxtb	r2, r2
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	0b9b      	lsrs	r3, r3, #14
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	3a01      	subs	r2, #1
 8008b64:	60fa      	str	r2, [r7, #12]
 8008b66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	09db      	lsrs	r3, r3, #7
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	3a01      	subs	r2, #1
 8008b7a:	60fa      	str	r2, [r7, #12]
 8008b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	3a01      	subs	r2, #1
 8008b8e:	60fa      	str	r2, [r7, #12]
 8008b90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	701a      	strb	r2, [r3, #0]
 8008b9a:	e032      	b.n	8008c02 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	0f1a      	lsrs	r2, r3, #28
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	0d5b      	lsrs	r3, r3, #21
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	3a01      	subs	r2, #1
 8008bb6:	60fa      	str	r2, [r7, #12]
 8008bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	0b9b      	lsrs	r3, r3, #14
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	3a01      	subs	r2, #1
 8008bcc:	60fa      	str	r2, [r7, #12]
 8008bce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	09db      	lsrs	r3, r3, #7
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	3a01      	subs	r2, #1
 8008be2:	60fa      	str	r2, [r7, #12]
 8008be4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	3a01      	subs	r2, #1
 8008bf6:	60fa      	str	r2, [r7, #12]
 8008bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008c02:	4b1d      	ldr	r3, [pc, #116]	; (8008c78 <_SendPacket+0x26c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008c08:	4b1a      	ldr	r3, [pc, #104]	; (8008c74 <_SendPacket+0x268>)
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	623b      	str	r3, [r7, #32]
 8008c1a:	e00b      	b.n	8008c34 <_SendPacket+0x228>
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	1c59      	adds	r1, r3, #1
 8008c24:	6279      	str	r1, [r7, #36]	; 0x24
 8008c26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c2a:	b2d2      	uxtb	r2, r2
 8008c2c:	701a      	strb	r2, [r3, #0]
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	09db      	lsrs	r3, r3, #7
 8008c32:	623b      	str	r3, [r7, #32]
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	2b7f      	cmp	r3, #127	; 0x7f
 8008c38:	d8f0      	bhi.n	8008c1c <_SendPacket+0x210>
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	1c5a      	adds	r2, r3, #1
 8008c3e:	627a      	str	r2, [r7, #36]	; 0x24
 8008c40:	6a3a      	ldr	r2, [r7, #32]
 8008c42:	b2d2      	uxtb	r2, r2
 8008c44:	701a      	strb	r2, [r3, #0]
 8008c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c48:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8008c4a:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <_SendPacket+0x268>)
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	461a      	mov	r2, r3
 8008c58:	68f9      	ldr	r1, [r7, #12]
 8008c5a:	f7f7 fad9 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008c5e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8008c60:	f7ff f940 	bl	8007ee4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d008      	beq.n	8008c7c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008c6a:	4a02      	ldr	r2, [pc, #8]	; (8008c74 <_SendPacket+0x268>)
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	60d3      	str	r3, [r2, #12]
 8008c70:	e010      	b.n	8008c94 <_SendPacket+0x288>
 8008c72:	bf00      	nop
 8008c74:	20014614 	.word	0x20014614
 8008c78:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8008c7c:	4b19      	ldr	r3, [pc, #100]	; (8008ce4 <_SendPacket+0x2d8>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	3301      	adds	r3, #1
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	4b17      	ldr	r3, [pc, #92]	; (8008ce4 <_SendPacket+0x2d8>)
 8008c86:	701a      	strb	r2, [r3, #0]
 8008c88:	e004      	b.n	8008c94 <_SendPacket+0x288>
    goto SendDone;
 8008c8a:	bf00      	nop
 8008c8c:	e002      	b.n	8008c94 <_SendPacket+0x288>
      goto SendDone;
 8008c8e:	bf00      	nop
 8008c90:	e000      	b.n	8008c94 <_SendPacket+0x288>
      goto SendDone;
 8008c92:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8008c94:	4b13      	ldr	r3, [pc, #76]	; (8008ce4 <_SendPacket+0x2d8>)
 8008c96:	7e1b      	ldrb	r3, [r3, #24]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4a13      	ldr	r2, [pc, #76]	; (8008ce8 <_SendPacket+0x2dc>)
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	440b      	add	r3, r1
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	4413      	add	r3, r2
 8008ca6:	336c      	adds	r3, #108	; 0x6c
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	4b0e      	ldr	r3, [pc, #56]	; (8008ce4 <_SendPacket+0x2d8>)
 8008cac:	7e1b      	ldrb	r3, [r3, #24]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	490d      	ldr	r1, [pc, #52]	; (8008ce8 <_SendPacket+0x2dc>)
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	4403      	add	r3, r0
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	440b      	add	r3, r1
 8008cbc:	3370      	adds	r3, #112	; 0x70
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d00b      	beq.n	8008cdc <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008cc4:	4b07      	ldr	r3, [pc, #28]	; (8008ce4 <_SendPacket+0x2d8>)
 8008cc6:	789b      	ldrb	r3, [r3, #2]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d107      	bne.n	8008cdc <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008ccc:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <_SendPacket+0x2d8>)
 8008cce:	2201      	movs	r2, #1
 8008cd0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008cd2:	f7ff fdb7 	bl	8008844 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8008cd6:	4b03      	ldr	r3, [pc, #12]	; (8008ce4 <_SendPacket+0x2d8>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8008cdc:	bf00      	nop
 8008cde:	3728      	adds	r7, #40	; 0x28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	20014614 	.word	0x20014614
 8008ce8:	20013154 	.word	0x20013154

08008cec <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08a      	sub	sp, #40	; 0x28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	3301      	adds	r3, #1
 8008d02:	2b80      	cmp	r3, #128	; 0x80
 8008d04:	d80a      	bhi.n	8008d1c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	1c59      	adds	r1, r3, #1
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	6051      	str	r1, [r2, #4]
 8008d10:	78fa      	ldrb	r2, [r7, #3]
 8008d12:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	2b80      	cmp	r3, #128	; 0x80
 8008d22:	d15a      	bne.n	8008dda <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	691a      	ldr	r2, [r3, #16]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	b2d2      	uxtb	r2, r2
 8008d2e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	623b      	str	r3, [r7, #32]
 8008d44:	e00b      	b.n	8008d5e <_StoreChar+0x72>
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	1c59      	adds	r1, r3, #1
 8008d4e:	6279      	str	r1, [r7, #36]	; 0x24
 8008d50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d54:	b2d2      	uxtb	r2, r2
 8008d56:	701a      	strb	r2, [r3, #0]
 8008d58:	6a3b      	ldr	r3, [r7, #32]
 8008d5a:	09db      	lsrs	r3, r3, #7
 8008d5c:	623b      	str	r3, [r7, #32]
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	2b7f      	cmp	r3, #127	; 0x7f
 8008d62:	d8f0      	bhi.n	8008d46 <_StoreChar+0x5a>
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	627a      	str	r2, [r7, #36]	; 0x24
 8008d6a:	6a3a      	ldr	r2, [r7, #32]
 8008d6c:	b2d2      	uxtb	r2, r2
 8008d6e:	701a      	strb	r2, [r3, #0]
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	61fb      	str	r3, [r7, #28]
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	e00b      	b.n	8008d96 <_StoreChar+0xaa>
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	1c59      	adds	r1, r3, #1
 8008d86:	61f9      	str	r1, [r7, #28]
 8008d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d8c:	b2d2      	uxtb	r2, r2
 8008d8e:	701a      	strb	r2, [r3, #0]
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	09db      	lsrs	r3, r3, #7
 8008d94:	61bb      	str	r3, [r7, #24]
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	2b7f      	cmp	r3, #127	; 0x7f
 8008d9a:	d8f0      	bhi.n	8008d7e <_StoreChar+0x92>
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	61fa      	str	r2, [r7, #28]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	b2d2      	uxtb	r2, r2
 8008da6:	701a      	strb	r2, [r3, #0]
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	221a      	movs	r2, #26
 8008db2:	6939      	ldr	r1, [r7, #16]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff fe29 	bl	8008a0c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff fd34 	bl	800882c <_PreparePacket>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	611a      	str	r2, [r3, #16]
  }
}
 8008dda:	bf00      	nop
 8008ddc:	3728      	adds	r7, #40	; 0x28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08a      	sub	sp, #40	; 0x28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8008df6:	2301      	movs	r3, #1
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8008dfe:	e007      	b.n	8008e10 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8008e00:	6a3a      	ldr	r2, [r7, #32]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e08:	623b      	str	r3, [r7, #32]
    Width++;
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8008e10:	6a3a      	ldr	r2, [r7, #32]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d2f3      	bcs.n	8008e00 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d901      	bls.n	8008e24 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8008e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d11f      	bne.n	8008e6e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d01c      	beq.n	8008e6e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8008e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d005      	beq.n	8008e4a <_PrintUnsigned+0x66>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d102      	bne.n	8008e4a <_PrintUnsigned+0x66>
        c = '0';
 8008e44:	2330      	movs	r3, #48	; 0x30
 8008e46:	76fb      	strb	r3, [r7, #27]
 8008e48:	e001      	b.n	8008e4e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8008e4a:	2320      	movs	r3, #32
 8008e4c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008e4e:	e007      	b.n	8008e60 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8008e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e52:	3b01      	subs	r3, #1
 8008e54:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8008e56:	7efb      	ldrb	r3, [r7, #27]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f7ff ff46 	bl	8008cec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <_PrintUnsigned+0x8a>
 8008e66:	69fa      	ldr	r2, [r7, #28]
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d3f0      	bcc.n	8008e50 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d903      	bls.n	8008e7c <_PrintUnsigned+0x98>
      NumDigits--;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	603b      	str	r3, [r7, #0]
 8008e7a:	e009      	b.n	8008e90 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e84:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d200      	bcs.n	8008e90 <_PrintUnsigned+0xac>
        break;
 8008e8e:	e005      	b.n	8008e9c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	fb02 f303 	mul.w	r3, r2, r3
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8008e9a:	e7e8      	b.n	8008e6e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eaa:	fb02 f303 	mul.w	r3, r2, r3
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8008eb4:	4a15      	ldr	r2, [pc, #84]	; (8008f0c <_PrintUnsigned+0x128>)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	4413      	add	r3, r2
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7ff ff14 	bl	8008cec <_StoreChar>
    Digit /= Base;
 8008ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ecc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e3      	bne.n	8008e9c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8008ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d011      	beq.n	8008f02 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00e      	beq.n	8008f02 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008ee4:	e006      	b.n	8008ef4 <_PrintUnsigned+0x110>
        FieldWidth--;
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8008eec:	2120      	movs	r1, #32
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f7ff fefc 	bl	8008cec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <_PrintUnsigned+0x11e>
 8008efa:	69fa      	ldr	r2, [r7, #28]
 8008efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d3f1      	bcc.n	8008ee6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8008f02:	bf00      	nop
 8008f04:	3728      	adds	r7, #40	; 0x28
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	0800ddc4 	.word	0x0800ddc4

08008f10 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b088      	sub	sp, #32
 8008f14:	af02      	add	r7, sp, #8
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	bfb8      	it	lt
 8008f24:	425b      	neglt	r3, r3
 8008f26:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8008f2c:	e007      	b.n	8008f3e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8008f36:	613b      	str	r3, [r7, #16]
    Width++;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	daf3      	bge.n	8008f2e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d901      	bls.n	8008f52 <_PrintInt+0x42>
    Width = NumDigits;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00a      	beq.n	8008f6e <_PrintInt+0x5e>
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	db04      	blt.n	8008f68 <_PrintInt+0x58>
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <_PrintInt+0x5e>
    FieldWidth--;
 8008f68:	6a3b      	ldr	r3, [r7, #32]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <_PrintInt+0x6e>
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d016      	beq.n	8008fac <_PrintInt+0x9c>
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d111      	bne.n	8008fac <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00e      	beq.n	8008fac <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008f8e:	e006      	b.n	8008f9e <_PrintInt+0x8e>
        FieldWidth--;
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8008f96:	2120      	movs	r1, #32
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f7ff fea7 	bl	8008cec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <_PrintInt+0x9c>
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d3f1      	bcc.n	8008f90 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	da07      	bge.n	8008fc2 <_PrintInt+0xb2>
    v = -v;
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	425b      	negs	r3, r3
 8008fb6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8008fb8:	212d      	movs	r1, #45	; 0x2d
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f7ff fe96 	bl	8008cec <_StoreChar>
 8008fc0:	e008      	b.n	8008fd4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	f003 0304 	and.w	r3, r3, #4
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d003      	beq.n	8008fd4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8008fcc:	212b      	movs	r1, #43	; 0x2b
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f7ff fe8c 	bl	8008cec <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d019      	beq.n	8009012 <_PrintInt+0x102>
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d114      	bne.n	8009012 <_PrintInt+0x102>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d111      	bne.n	8009012 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8008fee:	6a3b      	ldr	r3, [r7, #32]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00e      	beq.n	8009012 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008ff4:	e006      	b.n	8009004 <_PrintInt+0xf4>
        FieldWidth--;
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8008ffc:	2130      	movs	r1, #48	; 0x30
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f7ff fe74 	bl	8008cec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <_PrintInt+0x102>
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	429a      	cmp	r2, r3
 8009010:	d3f1      	bcc.n	8008ff6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8009012:	68b9      	ldr	r1, [r7, #8]
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	9301      	str	r3, [sp, #4]
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f7ff fedf 	bl	8008de4 <_PrintUnsigned>
}
 8009026:	bf00      	nop
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8009030:	b580      	push	{r7, lr}
 8009032:	b098      	sub	sp, #96	; 0x60
 8009034:	af02      	add	r7, sp, #8
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800903c:	f3ef 8311 	mrs	r3, BASEPRI
 8009040:	f04f 0120 	mov.w	r1, #32
 8009044:	f381 8811 	msr	BASEPRI, r1
 8009048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800904a:	48b7      	ldr	r0, [pc, #732]	; (8009328 <_VPrintTarget+0x2f8>)
 800904c:	f7ff fbee 	bl	800882c <_PreparePacket>
 8009050:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8009052:	4bb5      	ldr	r3, [pc, #724]	; (8009328 <_VPrintTarget+0x2f8>)
 8009054:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8009056:	2300      	movs	r3, #0
 8009058:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	3301      	adds	r3, #1
 8009062:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3301      	adds	r3, #1
 8009074:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8009076:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 81a8 	beq.w	80093d0 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8009080:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009084:	2b25      	cmp	r3, #37	; 0x25
 8009086:	f040 8195 	bne.w	80093b4 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800908a:	2300      	movs	r3, #0
 800908c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800908e:	2301      	movs	r3, #1
 8009090:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800909a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800909e:	3b23      	subs	r3, #35	; 0x23
 80090a0:	2b0d      	cmp	r3, #13
 80090a2:	d83f      	bhi.n	8009124 <_VPrintTarget+0xf4>
 80090a4:	a201      	add	r2, pc, #4	; (adr r2, 80090ac <_VPrintTarget+0x7c>)
 80090a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090aa:	bf00      	nop
 80090ac:	08009115 	.word	0x08009115
 80090b0:	08009125 	.word	0x08009125
 80090b4:	08009125 	.word	0x08009125
 80090b8:	08009125 	.word	0x08009125
 80090bc:	08009125 	.word	0x08009125
 80090c0:	08009125 	.word	0x08009125
 80090c4:	08009125 	.word	0x08009125
 80090c8:	08009125 	.word	0x08009125
 80090cc:	08009105 	.word	0x08009105
 80090d0:	08009125 	.word	0x08009125
 80090d4:	080090e5 	.word	0x080090e5
 80090d8:	08009125 	.word	0x08009125
 80090dc:	08009125 	.word	0x08009125
 80090e0:	080090f5 	.word	0x080090f5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80090e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090e6:	f043 0301 	orr.w	r3, r3, #1
 80090ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	3301      	adds	r3, #1
 80090f0:	60fb      	str	r3, [r7, #12]
 80090f2:	e01a      	b.n	800912a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80090f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f6:	f043 0302 	orr.w	r3, r3, #2
 80090fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3301      	adds	r3, #1
 8009100:	60fb      	str	r3, [r7, #12]
 8009102:	e012      	b.n	800912a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8009104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009106:	f043 0304 	orr.w	r3, r3, #4
 800910a:	64bb      	str	r3, [r7, #72]	; 0x48
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	3301      	adds	r3, #1
 8009110:	60fb      	str	r3, [r7, #12]
 8009112:	e00a      	b.n	800912a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8009114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009116:	f043 0308 	orr.w	r3, r3, #8
 800911a:	64bb      	str	r3, [r7, #72]	; 0x48
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	3301      	adds	r3, #1
 8009120:	60fb      	str	r3, [r7, #12]
 8009122:	e002      	b.n	800912a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8009124:	2300      	movs	r3, #0
 8009126:	653b      	str	r3, [r7, #80]	; 0x50
 8009128:	bf00      	nop
        }
      } while (v);
 800912a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1b0      	bne.n	8009092 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8009130:	2300      	movs	r3, #0
 8009132:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800913c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009140:	2b2f      	cmp	r3, #47	; 0x2f
 8009142:	d912      	bls.n	800916a <_VPrintTarget+0x13a>
 8009144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009148:	2b39      	cmp	r3, #57	; 0x39
 800914a:	d80e      	bhi.n	800916a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3301      	adds	r3, #1
 8009150:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8009152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009154:	4613      	mov	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	461a      	mov	r2, r3
 800915e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009162:	4413      	add	r3, r2
 8009164:	3b30      	subs	r3, #48	; 0x30
 8009166:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8009168:	e7e4      	b.n	8009134 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800916a:	2300      	movs	r3, #0
 800916c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8009176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800917a:	2b2e      	cmp	r3, #46	; 0x2e
 800917c:	d11d      	bne.n	80091ba <_VPrintTarget+0x18a>
        sFormat++;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	3301      	adds	r3, #1
 8009182:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800918c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009190:	2b2f      	cmp	r3, #47	; 0x2f
 8009192:	d912      	bls.n	80091ba <_VPrintTarget+0x18a>
 8009194:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009198:	2b39      	cmp	r3, #57	; 0x39
 800919a:	d80e      	bhi.n	80091ba <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	3301      	adds	r3, #1
 80091a0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80091a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	461a      	mov	r2, r3
 80091ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091b2:	4413      	add	r3, r2
 80091b4:	3b30      	subs	r3, #48	; 0x30
 80091b6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80091b8:	e7e4      	b.n	8009184 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80091c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091c6:	2b6c      	cmp	r3, #108	; 0x6c
 80091c8:	d003      	beq.n	80091d2 <_VPrintTarget+0x1a2>
 80091ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091ce:	2b68      	cmp	r3, #104	; 0x68
 80091d0:	d107      	bne.n	80091e2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3301      	adds	r3, #1
 80091de:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80091e0:	e7ef      	b.n	80091c2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80091e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091e6:	2b25      	cmp	r3, #37	; 0x25
 80091e8:	f000 80d8 	beq.w	800939c <_VPrintTarget+0x36c>
 80091ec:	2b25      	cmp	r3, #37	; 0x25
 80091ee:	f2c0 80dc 	blt.w	80093aa <_VPrintTarget+0x37a>
 80091f2:	2b78      	cmp	r3, #120	; 0x78
 80091f4:	f300 80d9 	bgt.w	80093aa <_VPrintTarget+0x37a>
 80091f8:	2b58      	cmp	r3, #88	; 0x58
 80091fa:	f2c0 80d6 	blt.w	80093aa <_VPrintTarget+0x37a>
 80091fe:	3b58      	subs	r3, #88	; 0x58
 8009200:	2b20      	cmp	r3, #32
 8009202:	f200 80d2 	bhi.w	80093aa <_VPrintTarget+0x37a>
 8009206:	a201      	add	r2, pc, #4	; (adr r2, 800920c <_VPrintTarget+0x1dc>)
 8009208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920c:	08009303 	.word	0x08009303
 8009210:	080093ab 	.word	0x080093ab
 8009214:	080093ab 	.word	0x080093ab
 8009218:	080093ab 	.word	0x080093ab
 800921c:	080093ab 	.word	0x080093ab
 8009220:	080093ab 	.word	0x080093ab
 8009224:	080093ab 	.word	0x080093ab
 8009228:	080093ab 	.word	0x080093ab
 800922c:	080093ab 	.word	0x080093ab
 8009230:	080093ab 	.word	0x080093ab
 8009234:	080093ab 	.word	0x080093ab
 8009238:	08009291 	.word	0x08009291
 800923c:	080092b7 	.word	0x080092b7
 8009240:	080093ab 	.word	0x080093ab
 8009244:	080093ab 	.word	0x080093ab
 8009248:	080093ab 	.word	0x080093ab
 800924c:	080093ab 	.word	0x080093ab
 8009250:	080093ab 	.word	0x080093ab
 8009254:	080093ab 	.word	0x080093ab
 8009258:	080093ab 	.word	0x080093ab
 800925c:	080093ab 	.word	0x080093ab
 8009260:	080093ab 	.word	0x080093ab
 8009264:	080093ab 	.word	0x080093ab
 8009268:	080093ab 	.word	0x080093ab
 800926c:	08009377 	.word	0x08009377
 8009270:	080093ab 	.word	0x080093ab
 8009274:	080093ab 	.word	0x080093ab
 8009278:	0800932d 	.word	0x0800932d
 800927c:	080093ab 	.word	0x080093ab
 8009280:	080092dd 	.word	0x080092dd
 8009284:	080093ab 	.word	0x080093ab
 8009288:	080093ab 	.word	0x080093ab
 800928c:	08009303 	.word	0x08009303
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	1d19      	adds	r1, r3, #4
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	6011      	str	r1, [r2, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800929e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80092a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80092a8:	f107 0310 	add.w	r3, r7, #16
 80092ac:	4611      	mov	r1, r2
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff fd1c 	bl	8008cec <_StoreChar>
        break;
 80092b4:	e07a      	b.n	80093ac <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	1d19      	adds	r1, r3, #4
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6011      	str	r1, [r2, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80092c4:	f107 0010 	add.w	r0, r7, #16
 80092c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ca:	9301      	str	r3, [sp, #4]
 80092cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d2:	220a      	movs	r2, #10
 80092d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092d6:	f7ff fe1b 	bl	8008f10 <_PrintInt>
        break;
 80092da:	e067      	b.n	80093ac <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	1d19      	adds	r1, r3, #4
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	6011      	str	r1, [r2, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80092ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092ec:	f107 0010 	add.w	r0, r7, #16
 80092f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092fa:	220a      	movs	r2, #10
 80092fc:	f7ff fd72 	bl	8008de4 <_PrintUnsigned>
        break;
 8009300:	e054      	b.n	80093ac <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	1d19      	adds	r1, r3, #4
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6011      	str	r1, [r2, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8009310:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009312:	f107 0010 	add.w	r0, r7, #16
 8009316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009320:	2210      	movs	r2, #16
 8009322:	f7ff fd5f 	bl	8008de4 <_PrintUnsigned>
        break;
 8009326:	e041      	b.n	80093ac <_VPrintTarget+0x37c>
 8009328:	20014644 	.word	0x20014644
      case 's':
        s = va_arg(*pParamList, const char*);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	1d19      	adds	r1, r3, #4
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	6011      	str	r1, [r2, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800933a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <_VPrintTarget+0x314>
          s = "(null)";
 8009340:	4b4a      	ldr	r3, [pc, #296]	; (800946c <_VPrintTarget+0x43c>)
 8009342:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8009344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 800934c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800934e:	3301      	adds	r3, #1
 8009350:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8009352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00b      	beq.n	8009372 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800935a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800935e:	f107 0310 	add.w	r3, r7, #16
 8009362:	4611      	mov	r1, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff fcc1 	bl	8008cec <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	2b7f      	cmp	r3, #127	; 0x7f
 800936e:	d9e9      	bls.n	8009344 <_VPrintTarget+0x314>
        break;
 8009370:	e01c      	b.n	80093ac <_VPrintTarget+0x37c>
            break;
 8009372:	bf00      	nop
        break;
 8009374:	e01a      	b.n	80093ac <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	1d19      	adds	r1, r3, #4
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	6011      	str	r1, [r2, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8009384:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009386:	f107 0010 	add.w	r0, r7, #16
 800938a:	2300      	movs	r3, #0
 800938c:	9301      	str	r3, [sp, #4]
 800938e:	2308      	movs	r3, #8
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	2308      	movs	r3, #8
 8009394:	2210      	movs	r2, #16
 8009396:	f7ff fd25 	bl	8008de4 <_PrintUnsigned>
        break;
 800939a:	e007      	b.n	80093ac <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800939c:	f107 0310 	add.w	r3, r7, #16
 80093a0:	2125      	movs	r1, #37	; 0x25
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fca2 	bl	8008cec <_StoreChar>
        break;
 80093a8:	e000      	b.n	80093ac <_VPrintTarget+0x37c>
      default:
        break;
 80093aa:	bf00      	nop
      }
      sFormat++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	e007      	b.n	80093c4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80093b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80093b8:	f107 0310 	add.w	r3, r7, #16
 80093bc:	4611      	mov	r1, r2
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff fc94 	bl	8008cec <_StoreChar>
    }
  } while (*sFormat);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f47f ae4d 	bne.w	8009068 <_VPrintTarget+0x38>
 80093ce:	e000      	b.n	80093d2 <_VPrintTarget+0x3a2>
      break;
 80093d0:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d041      	beq.n	800945c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80093d8:	6a3a      	ldr	r2, [r7, #32]
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	b2d2      	uxtb	r2, r2
 80093de:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80093e8:	e00b      	b.n	8009402 <_VPrintTarget+0x3d2>
 80093ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f0:	1c59      	adds	r1, r3, #1
 80093f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80093f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093f8:	b2d2      	uxtb	r2, r2
 80093fa:	701a      	strb	r2, [r3, #0]
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	09db      	lsrs	r3, r3, #7
 8009400:	63bb      	str	r3, [r7, #56]	; 0x38
 8009402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009404:	2b7f      	cmp	r3, #127	; 0x7f
 8009406:	d8f0      	bhi.n	80093ea <_VPrintTarget+0x3ba>
 8009408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800940e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009410:	b2d2      	uxtb	r2, r2
 8009412:	701a      	strb	r2, [r3, #0]
 8009414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009416:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	637b      	str	r3, [r7, #52]	; 0x34
 800941c:	2300      	movs	r3, #0
 800941e:	633b      	str	r3, [r7, #48]	; 0x30
 8009420:	e00b      	b.n	800943a <_VPrintTarget+0x40a>
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	b2da      	uxtb	r2, r3
 8009426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009428:	1c59      	adds	r1, r3, #1
 800942a:	6379      	str	r1, [r7, #52]	; 0x34
 800942c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009430:	b2d2      	uxtb	r2, r2
 8009432:	701a      	strb	r2, [r3, #0]
 8009434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009436:	09db      	lsrs	r3, r3, #7
 8009438:	633b      	str	r3, [r7, #48]	; 0x30
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	2b7f      	cmp	r3, #127	; 0x7f
 800943e:	d8f0      	bhi.n	8009422 <_VPrintTarget+0x3f2>
 8009440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	637a      	str	r2, [r7, #52]	; 0x34
 8009446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009448:	b2d2      	uxtb	r2, r2
 800944a:	701a      	strb	r2, [r3, #0]
 800944c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800944e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	6979      	ldr	r1, [r7, #20]
 8009454:	221a      	movs	r2, #26
 8009456:	4618      	mov	r0, r3
 8009458:	f7ff fad8 	bl	8008a0c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8009462:	bf00      	nop
 8009464:	3758      	adds	r7, #88	; 0x58
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	0800dd70 	.word	0x0800dd70

08009470 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af02      	add	r7, sp, #8
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
 800947c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800947e:	2300      	movs	r3, #0
 8009480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009484:	4917      	ldr	r1, [pc, #92]	; (80094e4 <SEGGER_SYSVIEW_Init+0x74>)
 8009486:	4818      	ldr	r0, [pc, #96]	; (80094e8 <SEGGER_SYSVIEW_Init+0x78>)
 8009488:	f7ff f8d0 	bl	800862c <SEGGER_RTT_AllocUpBuffer>
 800948c:	4603      	mov	r3, r0
 800948e:	b2da      	uxtb	r2, r3
 8009490:	4b16      	ldr	r3, [pc, #88]	; (80094ec <SEGGER_SYSVIEW_Init+0x7c>)
 8009492:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8009494:	4b15      	ldr	r3, [pc, #84]	; (80094ec <SEGGER_SYSVIEW_Init+0x7c>)
 8009496:	785a      	ldrb	r2, [r3, #1]
 8009498:	4b14      	ldr	r3, [pc, #80]	; (80094ec <SEGGER_SYSVIEW_Init+0x7c>)
 800949a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800949c:	4b13      	ldr	r3, [pc, #76]	; (80094ec <SEGGER_SYSVIEW_Init+0x7c>)
 800949e:	7e1b      	ldrb	r3, [r3, #24]
 80094a0:	4618      	mov	r0, r3
 80094a2:	2300      	movs	r3, #0
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	2308      	movs	r3, #8
 80094a8:	4a11      	ldr	r2, [pc, #68]	; (80094f0 <SEGGER_SYSVIEW_Init+0x80>)
 80094aa:	490f      	ldr	r1, [pc, #60]	; (80094e8 <SEGGER_SYSVIEW_Init+0x78>)
 80094ac:	f7ff f942 	bl	8008734 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80094b0:	4b0e      	ldr	r3, [pc, #56]	; (80094ec <SEGGER_SYSVIEW_Init+0x7c>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80094b6:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <SEGGER_SYSVIEW_Init+0x84>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a0c      	ldr	r2, [pc, #48]	; (80094ec <SEGGER_SYSVIEW_Init+0x7c>)
 80094bc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80094be:	4a0b      	ldr	r2, [pc, #44]	; (80094ec <SEGGER_SYSVIEW_Init+0x7c>)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80094c4:	4a09      	ldr	r2, [pc, #36]	; (80094ec <SEGGER_SYSVIEW_Init+0x7c>)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80094ca:	4a08      	ldr	r2, [pc, #32]	; (80094ec <SEGGER_SYSVIEW_Init+0x7c>)
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80094d0:	4a06      	ldr	r2, [pc, #24]	; (80094ec <SEGGER_SYSVIEW_Init+0x7c>)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80094d6:	4b05      	ldr	r3, [pc, #20]	; (80094ec <SEGGER_SYSVIEW_Init+0x7c>)
 80094d8:	2200      	movs	r2, #0
 80094da:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80094dc:	bf00      	nop
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	2001360c 	.word	0x2001360c
 80094e8:	0800dd78 	.word	0x0800dd78
 80094ec:	20014614 	.word	0x20014614
 80094f0:	2001460c 	.word	0x2001460c
 80094f4:	e0001004 	.word	0xe0001004

080094f8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8009500:	4a04      	ldr	r2, [pc, #16]	; (8009514 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6113      	str	r3, [r2, #16]
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20014614 	.word	0x20014614

08009518 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009520:	f3ef 8311 	mrs	r3, BASEPRI
 8009524:	f04f 0120 	mov.w	r1, #32
 8009528:	f381 8811 	msr	BASEPRI, r1
 800952c:	60fb      	str	r3, [r7, #12]
 800952e:	4808      	ldr	r0, [pc, #32]	; (8009550 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8009530:	f7ff f97c 	bl	800882c <_PreparePacket>
 8009534:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	68b9      	ldr	r1, [r7, #8]
 800953a:	68b8      	ldr	r0, [r7, #8]
 800953c:	f7ff fa66 	bl	8008a0c <_SendPacket>
  RECORD_END();
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f383 8811 	msr	BASEPRI, r3
}
 8009546:	bf00      	nop
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20014644 	.word	0x20014644

08009554 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800955e:	f3ef 8311 	mrs	r3, BASEPRI
 8009562:	f04f 0120 	mov.w	r1, #32
 8009566:	f381 8811 	msr	BASEPRI, r1
 800956a:	617b      	str	r3, [r7, #20]
 800956c:	4816      	ldr	r0, [pc, #88]	; (80095c8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800956e:	f7ff f95d 	bl	800882c <_PreparePacket>
 8009572:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	61fb      	str	r3, [r7, #28]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	61bb      	str	r3, [r7, #24]
 8009580:	e00b      	b.n	800959a <SEGGER_SYSVIEW_RecordU32+0x46>
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	b2da      	uxtb	r2, r3
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	1c59      	adds	r1, r3, #1
 800958a:	61f9      	str	r1, [r7, #28]
 800958c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009590:	b2d2      	uxtb	r2, r2
 8009592:	701a      	strb	r2, [r3, #0]
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	09db      	lsrs	r3, r3, #7
 8009598:	61bb      	str	r3, [r7, #24]
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	2b7f      	cmp	r3, #127	; 0x7f
 800959e:	d8f0      	bhi.n	8009582 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	1c5a      	adds	r2, r3, #1
 80095a4:	61fa      	str	r2, [r7, #28]
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	b2d2      	uxtb	r2, r2
 80095aa:	701a      	strb	r2, [r3, #0]
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	68f9      	ldr	r1, [r7, #12]
 80095b4:	6938      	ldr	r0, [r7, #16]
 80095b6:	f7ff fa29 	bl	8008a0c <_SendPacket>
  RECORD_END();
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f383 8811 	msr	BASEPRI, r3
}
 80095c0:	bf00      	nop
 80095c2:	3720      	adds	r7, #32
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	20014644 	.word	0x20014644

080095cc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08c      	sub	sp, #48	; 0x30
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80095d8:	f3ef 8311 	mrs	r3, BASEPRI
 80095dc:	f04f 0120 	mov.w	r1, #32
 80095e0:	f381 8811 	msr	BASEPRI, r1
 80095e4:	61fb      	str	r3, [r7, #28]
 80095e6:	4825      	ldr	r0, [pc, #148]	; (800967c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80095e8:	f7ff f920 	bl	800882c <_PreparePacket>
 80095ec:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095fa:	e00b      	b.n	8009614 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	1c59      	adds	r1, r3, #1
 8009604:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800960a:	b2d2      	uxtb	r2, r2
 800960c:	701a      	strb	r2, [r3, #0]
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	09db      	lsrs	r3, r3, #7
 8009612:	62bb      	str	r3, [r7, #40]	; 0x28
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	2b7f      	cmp	r3, #127	; 0x7f
 8009618:	d8f0      	bhi.n	80095fc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961c:	1c5a      	adds	r2, r3, #1
 800961e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009622:	b2d2      	uxtb	r2, r2
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009628:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	627b      	str	r3, [r7, #36]	; 0x24
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	623b      	str	r3, [r7, #32]
 8009632:	e00b      	b.n	800964c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	b2da      	uxtb	r2, r3
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	1c59      	adds	r1, r3, #1
 800963c:	6279      	str	r1, [r7, #36]	; 0x24
 800963e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009642:	b2d2      	uxtb	r2, r2
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	09db      	lsrs	r3, r3, #7
 800964a:	623b      	str	r3, [r7, #32]
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	2b7f      	cmp	r3, #127	; 0x7f
 8009650:	d8f0      	bhi.n	8009634 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8009652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	627a      	str	r2, [r7, #36]	; 0x24
 8009658:	6a3a      	ldr	r2, [r7, #32]
 800965a:	b2d2      	uxtb	r2, r2
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009660:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	6979      	ldr	r1, [r7, #20]
 8009666:	69b8      	ldr	r0, [r7, #24]
 8009668:	f7ff f9d0 	bl	8008a0c <_SendPacket>
  RECORD_END();
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	f383 8811 	msr	BASEPRI, r3
}
 8009672:	bf00      	nop
 8009674:	3730      	adds	r7, #48	; 0x30
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20014644 	.word	0x20014644

08009680 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8009680:	b580      	push	{r7, lr}
 8009682:	b08e      	sub	sp, #56	; 0x38
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800968e:	f3ef 8311 	mrs	r3, BASEPRI
 8009692:	f04f 0120 	mov.w	r1, #32
 8009696:	f381 8811 	msr	BASEPRI, r1
 800969a:	61fb      	str	r3, [r7, #28]
 800969c:	4832      	ldr	r0, [pc, #200]	; (8009768 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800969e:	f7ff f8c5 	bl	800882c <_PreparePacket>
 80096a2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	633b      	str	r3, [r7, #48]	; 0x30
 80096b0:	e00b      	b.n	80096ca <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b8:	1c59      	adds	r1, r3, #1
 80096ba:	6379      	str	r1, [r7, #52]	; 0x34
 80096bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096c0:	b2d2      	uxtb	r2, r2
 80096c2:	701a      	strb	r2, [r3, #0]
 80096c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c6:	09db      	lsrs	r3, r3, #7
 80096c8:	633b      	str	r3, [r7, #48]	; 0x30
 80096ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096cc:	2b7f      	cmp	r3, #127	; 0x7f
 80096ce:	d8f0      	bhi.n	80096b2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80096d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d2:	1c5a      	adds	r2, r3, #1
 80096d4:	637a      	str	r2, [r7, #52]	; 0x34
 80096d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d8:	b2d2      	uxtb	r2, r2
 80096da:	701a      	strb	r2, [r3, #0]
 80096dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80096e8:	e00b      	b.n	8009702 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f0:	1c59      	adds	r1, r3, #1
 80096f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80096f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096f8:	b2d2      	uxtb	r2, r2
 80096fa:	701a      	strb	r2, [r3, #0]
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	09db      	lsrs	r3, r3, #7
 8009700:	62bb      	str	r3, [r7, #40]	; 0x28
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	2b7f      	cmp	r3, #127	; 0x7f
 8009706:	d8f0      	bhi.n	80096ea <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800970e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009710:	b2d2      	uxtb	r2, r2
 8009712:	701a      	strb	r2, [r3, #0]
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	627b      	str	r3, [r7, #36]	; 0x24
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	623b      	str	r3, [r7, #32]
 8009720:	e00b      	b.n	800973a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	b2da      	uxtb	r2, r3
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	1c59      	adds	r1, r3, #1
 800972a:	6279      	str	r1, [r7, #36]	; 0x24
 800972c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009730:	b2d2      	uxtb	r2, r2
 8009732:	701a      	strb	r2, [r3, #0]
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	09db      	lsrs	r3, r3, #7
 8009738:	623b      	str	r3, [r7, #32]
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	2b7f      	cmp	r3, #127	; 0x7f
 800973e:	d8f0      	bhi.n	8009722 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	627a      	str	r2, [r7, #36]	; 0x24
 8009746:	6a3a      	ldr	r2, [r7, #32]
 8009748:	b2d2      	uxtb	r2, r2
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	6979      	ldr	r1, [r7, #20]
 8009754:	69b8      	ldr	r0, [r7, #24]
 8009756:	f7ff f959 	bl	8008a0c <_SendPacket>
  RECORD_END();
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	f383 8811 	msr	BASEPRI, r3
}
 8009760:	bf00      	nop
 8009762:	3738      	adds	r7, #56	; 0x38
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20014644 	.word	0x20014644

0800976c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800976c:	b580      	push	{r7, lr}
 800976e:	b090      	sub	sp, #64	; 0x40
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800977a:	f3ef 8311 	mrs	r3, BASEPRI
 800977e:	f04f 0120 	mov.w	r1, #32
 8009782:	f381 8811 	msr	BASEPRI, r1
 8009786:	61fb      	str	r3, [r7, #28]
 8009788:	4840      	ldr	r0, [pc, #256]	; (800988c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800978a:	f7ff f84f 	bl	800882c <_PreparePacket>
 800978e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	63bb      	str	r3, [r7, #56]	; 0x38
 800979c:	e00b      	b.n	80097b6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a4:	1c59      	adds	r1, r3, #1
 80097a6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80097a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80097ac:	b2d2      	uxtb	r2, r2
 80097ae:	701a      	strb	r2, [r3, #0]
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	09db      	lsrs	r3, r3, #7
 80097b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80097b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b8:	2b7f      	cmp	r3, #127	; 0x7f
 80097ba:	d8f0      	bhi.n	800979e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80097bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80097c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097c4:	b2d2      	uxtb	r2, r2
 80097c6:	701a      	strb	r2, [r3, #0]
 80097c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	637b      	str	r3, [r7, #52]	; 0x34
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	633b      	str	r3, [r7, #48]	; 0x30
 80097d4:	e00b      	b.n	80097ee <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097dc:	1c59      	adds	r1, r3, #1
 80097de:	6379      	str	r1, [r7, #52]	; 0x34
 80097e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80097e4:	b2d2      	uxtb	r2, r2
 80097e6:	701a      	strb	r2, [r3, #0]
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	09db      	lsrs	r3, r3, #7
 80097ec:	633b      	str	r3, [r7, #48]	; 0x30
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	2b7f      	cmp	r3, #127	; 0x7f
 80097f2:	d8f0      	bhi.n	80097d6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80097f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f6:	1c5a      	adds	r2, r3, #1
 80097f8:	637a      	str	r2, [r7, #52]	; 0x34
 80097fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097fc:	b2d2      	uxtb	r2, r2
 80097fe:	701a      	strb	r2, [r3, #0]
 8009800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009802:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	62bb      	str	r3, [r7, #40]	; 0x28
 800980c:	e00b      	b.n	8009826 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800980e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009810:	b2da      	uxtb	r2, r3
 8009812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009814:	1c59      	adds	r1, r3, #1
 8009816:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009818:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800981c:	b2d2      	uxtb	r2, r2
 800981e:	701a      	strb	r2, [r3, #0]
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	09db      	lsrs	r3, r3, #7
 8009824:	62bb      	str	r3, [r7, #40]	; 0x28
 8009826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009828:	2b7f      	cmp	r3, #127	; 0x7f
 800982a:	d8f0      	bhi.n	800980e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800982c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009834:	b2d2      	uxtb	r2, r2
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	627b      	str	r3, [r7, #36]	; 0x24
 8009840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009842:	623b      	str	r3, [r7, #32]
 8009844:	e00b      	b.n	800985e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	b2da      	uxtb	r2, r3
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	1c59      	adds	r1, r3, #1
 800984e:	6279      	str	r1, [r7, #36]	; 0x24
 8009850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009854:	b2d2      	uxtb	r2, r2
 8009856:	701a      	strb	r2, [r3, #0]
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	09db      	lsrs	r3, r3, #7
 800985c:	623b      	str	r3, [r7, #32]
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	2b7f      	cmp	r3, #127	; 0x7f
 8009862:	d8f0      	bhi.n	8009846 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	1c5a      	adds	r2, r3, #1
 8009868:	627a      	str	r2, [r7, #36]	; 0x24
 800986a:	6a3a      	ldr	r2, [r7, #32]
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	701a      	strb	r2, [r3, #0]
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	6979      	ldr	r1, [r7, #20]
 8009878:	69b8      	ldr	r0, [r7, #24]
 800987a:	f7ff f8c7 	bl	8008a0c <_SendPacket>
  RECORD_END();
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	f383 8811 	msr	BASEPRI, r3
}
 8009884:	bf00      	nop
 8009886:	3740      	adds	r7, #64	; 0x40
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	20014644 	.word	0x20014644

08009890 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8009890:	b580      	push	{r7, lr}
 8009892:	b092      	sub	sp, #72	; 0x48
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
 800989c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800989e:	f3ef 8311 	mrs	r3, BASEPRI
 80098a2:	f04f 0120 	mov.w	r1, #32
 80098a6:	f381 8811 	msr	BASEPRI, r1
 80098aa:	61fb      	str	r3, [r7, #28]
 80098ac:	484e      	ldr	r0, [pc, #312]	; (80099e8 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80098ae:	f7fe ffbd 	bl	800882c <_PreparePacket>
 80098b2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	647b      	str	r3, [r7, #68]	; 0x44
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	643b      	str	r3, [r7, #64]	; 0x40
 80098c0:	e00b      	b.n	80098da <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80098c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098c8:	1c59      	adds	r1, r3, #1
 80098ca:	6479      	str	r1, [r7, #68]	; 0x44
 80098cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098d0:	b2d2      	uxtb	r2, r2
 80098d2:	701a      	strb	r2, [r3, #0]
 80098d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098d6:	09db      	lsrs	r3, r3, #7
 80098d8:	643b      	str	r3, [r7, #64]	; 0x40
 80098da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098dc:	2b7f      	cmp	r3, #127	; 0x7f
 80098de:	d8f0      	bhi.n	80098c2 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 80098e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	647a      	str	r2, [r7, #68]	; 0x44
 80098e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098e8:	b2d2      	uxtb	r2, r2
 80098ea:	701a      	strb	r2, [r3, #0]
 80098ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80098f8:	e00b      	b.n	8009912 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009900:	1c59      	adds	r1, r3, #1
 8009902:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009908:	b2d2      	uxtb	r2, r2
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990e:	09db      	lsrs	r3, r3, #7
 8009910:	63bb      	str	r3, [r7, #56]	; 0x38
 8009912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009914:	2b7f      	cmp	r3, #127	; 0x7f
 8009916:	d8f0      	bhi.n	80098fa <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8009918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800991e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009920:	b2d2      	uxtb	r2, r2
 8009922:	701a      	strb	r2, [r3, #0]
 8009924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009926:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	637b      	str	r3, [r7, #52]	; 0x34
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	633b      	str	r3, [r7, #48]	; 0x30
 8009930:	e00b      	b.n	800994a <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	b2da      	uxtb	r2, r3
 8009936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009938:	1c59      	adds	r1, r3, #1
 800993a:	6379      	str	r1, [r7, #52]	; 0x34
 800993c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009940:	b2d2      	uxtb	r2, r2
 8009942:	701a      	strb	r2, [r3, #0]
 8009944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009946:	09db      	lsrs	r3, r3, #7
 8009948:	633b      	str	r3, [r7, #48]	; 0x30
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	2b7f      	cmp	r3, #127	; 0x7f
 800994e:	d8f0      	bhi.n	8009932 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8009950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	637a      	str	r2, [r7, #52]	; 0x34
 8009956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009958:	b2d2      	uxtb	r2, r2
 800995a:	701a      	strb	r2, [r3, #0]
 800995c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009966:	62bb      	str	r3, [r7, #40]	; 0x28
 8009968:	e00b      	b.n	8009982 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	b2da      	uxtb	r2, r3
 800996e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009970:	1c59      	adds	r1, r3, #1
 8009972:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009978:	b2d2      	uxtb	r2, r2
 800997a:	701a      	strb	r2, [r3, #0]
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	09db      	lsrs	r3, r3, #7
 8009980:	62bb      	str	r3, [r7, #40]	; 0x28
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	2b7f      	cmp	r3, #127	; 0x7f
 8009986:	d8f0      	bhi.n	800996a <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8009988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800998e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009990:	b2d2      	uxtb	r2, r2
 8009992:	701a      	strb	r2, [r3, #0]
 8009994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009996:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	627b      	str	r3, [r7, #36]	; 0x24
 800999c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800999e:	623b      	str	r3, [r7, #32]
 80099a0:	e00b      	b.n	80099ba <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	1c59      	adds	r1, r3, #1
 80099aa:	6279      	str	r1, [r7, #36]	; 0x24
 80099ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80099b0:	b2d2      	uxtb	r2, r2
 80099b2:	701a      	strb	r2, [r3, #0]
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	09db      	lsrs	r3, r3, #7
 80099b8:	623b      	str	r3, [r7, #32]
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	2b7f      	cmp	r3, #127	; 0x7f
 80099be:	d8f0      	bhi.n	80099a2 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	627a      	str	r2, [r7, #36]	; 0x24
 80099c6:	6a3a      	ldr	r2, [r7, #32]
 80099c8:	b2d2      	uxtb	r2, r2
 80099ca:	701a      	strb	r2, [r3, #0]
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	6979      	ldr	r1, [r7, #20]
 80099d4:	69b8      	ldr	r0, [r7, #24]
 80099d6:	f7ff f819 	bl	8008a0c <_SendPacket>
  RECORD_END();
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	f383 8811 	msr	BASEPRI, r3
}
 80099e0:	bf00      	nop
 80099e2:	3748      	adds	r7, #72	; 0x48
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	20014644 	.word	0x20014644

080099ec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08c      	sub	sp, #48	; 0x30
 80099f0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80099f2:	4b59      	ldr	r3, [pc, #356]	; (8009b58 <SEGGER_SYSVIEW_Start+0x16c>)
 80099f4:	2201      	movs	r2, #1
 80099f6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80099f8:	f3ef 8311 	mrs	r3, BASEPRI
 80099fc:	f04f 0120 	mov.w	r1, #32
 8009a00:	f381 8811 	msr	BASEPRI, r1
 8009a04:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009a06:	4b54      	ldr	r3, [pc, #336]	; (8009b58 <SEGGER_SYSVIEW_Start+0x16c>)
 8009a08:	785b      	ldrb	r3, [r3, #1]
 8009a0a:	220a      	movs	r2, #10
 8009a0c:	4953      	ldr	r1, [pc, #332]	; (8009b5c <SEGGER_SYSVIEW_Start+0x170>)
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7f6 fbfe 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8009a1a:	f7fe fa63 	bl	8007ee4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8009a1e:	200a      	movs	r0, #10
 8009a20:	f7ff fd7a 	bl	8009518 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009a24:	f3ef 8311 	mrs	r3, BASEPRI
 8009a28:	f04f 0120 	mov.w	r1, #32
 8009a2c:	f381 8811 	msr	BASEPRI, r1
 8009a30:	60bb      	str	r3, [r7, #8]
 8009a32:	484b      	ldr	r0, [pc, #300]	; (8009b60 <SEGGER_SYSVIEW_Start+0x174>)
 8009a34:	f7fe fefa 	bl	800882c <_PreparePacket>
 8009a38:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a42:	4b45      	ldr	r3, [pc, #276]	; (8009b58 <SEGGER_SYSVIEW_Start+0x16c>)
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a48:	e00b      	b.n	8009a62 <SEGGER_SYSVIEW_Start+0x76>
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a50:	1c59      	adds	r1, r3, #1
 8009a52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009a54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a58:	b2d2      	uxtb	r2, r2
 8009a5a:	701a      	strb	r2, [r3, #0]
 8009a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5e:	09db      	lsrs	r3, r3, #7
 8009a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a64:	2b7f      	cmp	r3, #127	; 0x7f
 8009a66:	d8f0      	bhi.n	8009a4a <SEGGER_SYSVIEW_Start+0x5e>
 8009a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6a:	1c5a      	adds	r2, r3, #1
 8009a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a70:	b2d2      	uxtb	r2, r2
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a7c:	4b36      	ldr	r3, [pc, #216]	; (8009b58 <SEGGER_SYSVIEW_Start+0x16c>)
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	623b      	str	r3, [r7, #32]
 8009a82:	e00b      	b.n	8009a9c <SEGGER_SYSVIEW_Start+0xb0>
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	1c59      	adds	r1, r3, #1
 8009a8c:	6279      	str	r1, [r7, #36]	; 0x24
 8009a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a92:	b2d2      	uxtb	r2, r2
 8009a94:	701a      	strb	r2, [r3, #0]
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	09db      	lsrs	r3, r3, #7
 8009a9a:	623b      	str	r3, [r7, #32]
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8009aa0:	d8f0      	bhi.n	8009a84 <SEGGER_SYSVIEW_Start+0x98>
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	627a      	str	r2, [r7, #36]	; 0x24
 8009aa8:	6a3a      	ldr	r2, [r7, #32]
 8009aaa:	b2d2      	uxtb	r2, r2
 8009aac:	701a      	strb	r2, [r3, #0]
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	61fb      	str	r3, [r7, #28]
 8009ab6:	4b28      	ldr	r3, [pc, #160]	; (8009b58 <SEGGER_SYSVIEW_Start+0x16c>)
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	61bb      	str	r3, [r7, #24]
 8009abc:	e00b      	b.n	8009ad6 <SEGGER_SYSVIEW_Start+0xea>
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	1c59      	adds	r1, r3, #1
 8009ac6:	61f9      	str	r1, [r7, #28]
 8009ac8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009acc:	b2d2      	uxtb	r2, r2
 8009ace:	701a      	strb	r2, [r3, #0]
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	09db      	lsrs	r3, r3, #7
 8009ad4:	61bb      	str	r3, [r7, #24]
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8009ada:	d8f0      	bhi.n	8009abe <SEGGER_SYSVIEW_Start+0xd2>
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	61fa      	str	r2, [r7, #28]
 8009ae2:	69ba      	ldr	r2, [r7, #24]
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	701a      	strb	r2, [r3, #0]
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	617b      	str	r3, [r7, #20]
 8009af0:	2300      	movs	r3, #0
 8009af2:	613b      	str	r3, [r7, #16]
 8009af4:	e00b      	b.n	8009b0e <SEGGER_SYSVIEW_Start+0x122>
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	1c59      	adds	r1, r3, #1
 8009afe:	6179      	str	r1, [r7, #20]
 8009b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b04:	b2d2      	uxtb	r2, r2
 8009b06:	701a      	strb	r2, [r3, #0]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	09db      	lsrs	r3, r3, #7
 8009b0c:	613b      	str	r3, [r7, #16]
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	2b7f      	cmp	r3, #127	; 0x7f
 8009b12:	d8f0      	bhi.n	8009af6 <SEGGER_SYSVIEW_Start+0x10a>
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	617a      	str	r2, [r7, #20]
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	b2d2      	uxtb	r2, r2
 8009b1e:	701a      	strb	r2, [r3, #0]
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009b24:	2218      	movs	r2, #24
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7fe ff6f 	bl	8008a0c <_SendPacket>
      RECORD_END();
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009b34:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <SEGGER_SYSVIEW_Start+0x16c>)
 8009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d002      	beq.n	8009b42 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009b3c:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <SEGGER_SYSVIEW_Start+0x16c>)
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b40:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8009b42:	f000 f9eb 	bl	8009f1c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009b46:	f000 f9b1 	bl	8009eac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009b4a:	f000 fc2d 	bl	800a3a8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8009b4e:	bf00      	nop
 8009b50:	3730      	adds	r7, #48	; 0x30
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20014614 	.word	0x20014614
 8009b5c:	0800ddb8 	.word	0x0800ddb8
 8009b60:	20014644 	.word	0x20014644

08009b64 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009b6a:	f3ef 8311 	mrs	r3, BASEPRI
 8009b6e:	f04f 0120 	mov.w	r1, #32
 8009b72:	f381 8811 	msr	BASEPRI, r1
 8009b76:	607b      	str	r3, [r7, #4]
 8009b78:	480b      	ldr	r0, [pc, #44]	; (8009ba8 <SEGGER_SYSVIEW_Stop+0x44>)
 8009b7a:	f7fe fe57 	bl	800882c <_PreparePacket>
 8009b7e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009b80:	4b0a      	ldr	r3, [pc, #40]	; (8009bac <SEGGER_SYSVIEW_Stop+0x48>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d007      	beq.n	8009b98 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009b88:	220b      	movs	r2, #11
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6838      	ldr	r0, [r7, #0]
 8009b8e:	f7fe ff3d 	bl	8008a0c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009b92:	4b06      	ldr	r3, [pc, #24]	; (8009bac <SEGGER_SYSVIEW_Stop+0x48>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f383 8811 	msr	BASEPRI, r3
}
 8009b9e:	bf00      	nop
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20014644 	.word	0x20014644
 8009bac:	20014614 	.word	0x20014614

08009bb0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08c      	sub	sp, #48	; 0x30
 8009bb4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8009bba:	f04f 0120 	mov.w	r1, #32
 8009bbe:	f381 8811 	msr	BASEPRI, r1
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	4845      	ldr	r0, [pc, #276]	; (8009cdc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009bc6:	f7fe fe31 	bl	800882c <_PreparePacket>
 8009bca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bd4:	4b42      	ldr	r3, [pc, #264]	; (8009ce0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bda:	e00b      	b.n	8009bf4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be2:	1c59      	adds	r1, r3, #1
 8009be4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009bea:	b2d2      	uxtb	r2, r2
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf0:	09db      	lsrs	r3, r3, #7
 8009bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8009bf8:	d8f0      	bhi.n	8009bdc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfc:	1c5a      	adds	r2, r3, #1
 8009bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c02:	b2d2      	uxtb	r2, r2
 8009c04:	701a      	strb	r2, [r3, #0]
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c0e:	4b34      	ldr	r3, [pc, #208]	; (8009ce0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	623b      	str	r3, [r7, #32]
 8009c14:	e00b      	b.n	8009c2e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	1c59      	adds	r1, r3, #1
 8009c1e:	6279      	str	r1, [r7, #36]	; 0x24
 8009c20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c24:	b2d2      	uxtb	r2, r2
 8009c26:	701a      	strb	r2, [r3, #0]
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	09db      	lsrs	r3, r3, #7
 8009c2c:	623b      	str	r3, [r7, #32]
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	2b7f      	cmp	r3, #127	; 0x7f
 8009c32:	d8f0      	bhi.n	8009c16 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	627a      	str	r2, [r7, #36]	; 0x24
 8009c3a:	6a3a      	ldr	r2, [r7, #32]
 8009c3c:	b2d2      	uxtb	r2, r2
 8009c3e:	701a      	strb	r2, [r3, #0]
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	61fb      	str	r3, [r7, #28]
 8009c48:	4b25      	ldr	r3, [pc, #148]	; (8009ce0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	61bb      	str	r3, [r7, #24]
 8009c4e:	e00b      	b.n	8009c68 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	1c59      	adds	r1, r3, #1
 8009c58:	61f9      	str	r1, [r7, #28]
 8009c5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c5e:	b2d2      	uxtb	r2, r2
 8009c60:	701a      	strb	r2, [r3, #0]
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	09db      	lsrs	r3, r3, #7
 8009c66:	61bb      	str	r3, [r7, #24]
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c6c:	d8f0      	bhi.n	8009c50 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	61fa      	str	r2, [r7, #28]
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	b2d2      	uxtb	r2, r2
 8009c78:	701a      	strb	r2, [r3, #0]
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	617b      	str	r3, [r7, #20]
 8009c82:	2300      	movs	r3, #0
 8009c84:	613b      	str	r3, [r7, #16]
 8009c86:	e00b      	b.n	8009ca0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	1c59      	adds	r1, r3, #1
 8009c90:	6179      	str	r1, [r7, #20]
 8009c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c96:	b2d2      	uxtb	r2, r2
 8009c98:	701a      	strb	r2, [r3, #0]
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	09db      	lsrs	r3, r3, #7
 8009c9e:	613b      	str	r3, [r7, #16]
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8009ca4:	d8f0      	bhi.n	8009c88 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	617a      	str	r2, [r7, #20]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009cb6:	2218      	movs	r2, #24
 8009cb8:	6879      	ldr	r1, [r7, #4]
 8009cba:	68b8      	ldr	r0, [r7, #8]
 8009cbc:	f7fe fea6 	bl	8008a0c <_SendPacket>
  RECORD_END();
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009cc6:	4b06      	ldr	r3, [pc, #24]	; (8009ce0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d002      	beq.n	8009cd4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8009cce:	4b04      	ldr	r3, [pc, #16]	; (8009ce0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	4798      	blx	r3
  }
}
 8009cd4:	bf00      	nop
 8009cd6:	3730      	adds	r7, #48	; 0x30
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	20014644 	.word	0x20014644
 8009ce0:	20014614 	.word	0x20014614

08009ce4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b092      	sub	sp, #72	; 0x48
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009cec:	f3ef 8311 	mrs	r3, BASEPRI
 8009cf0:	f04f 0120 	mov.w	r1, #32
 8009cf4:	f381 8811 	msr	BASEPRI, r1
 8009cf8:	617b      	str	r3, [r7, #20]
 8009cfa:	486a      	ldr	r0, [pc, #424]	; (8009ea4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8009cfc:	f7fe fd96 	bl	800882c <_PreparePacket>
 8009d00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	647b      	str	r3, [r7, #68]	; 0x44
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	4b66      	ldr	r3, [pc, #408]	; (8009ea8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	643b      	str	r3, [r7, #64]	; 0x40
 8009d16:	e00b      	b.n	8009d30 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8009d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d1e:	1c59      	adds	r1, r3, #1
 8009d20:	6479      	str	r1, [r7, #68]	; 0x44
 8009d22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d26:	b2d2      	uxtb	r2, r2
 8009d28:	701a      	strb	r2, [r3, #0]
 8009d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d2c:	09db      	lsrs	r3, r3, #7
 8009d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8009d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d32:	2b7f      	cmp	r3, #127	; 0x7f
 8009d34:	d8f0      	bhi.n	8009d18 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8009d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	647a      	str	r2, [r7, #68]	; 0x44
 8009d3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d3e:	b2d2      	uxtb	r2, r2
 8009d40:	701a      	strb	r2, [r3, #0]
 8009d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d50:	e00b      	b.n	8009d6a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8009d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d58:	1c59      	adds	r1, r3, #1
 8009d5a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009d5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d60:	b2d2      	uxtb	r2, r2
 8009d62:	701a      	strb	r2, [r3, #0]
 8009d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d66:	09db      	lsrs	r3, r3, #7
 8009d68:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8009d6e:	d8f0      	bhi.n	8009d52 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8009d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d78:	b2d2      	uxtb	r2, r2
 8009d7a:	701a      	strb	r2, [r3, #0]
 8009d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	2220      	movs	r2, #32
 8009d86:	4619      	mov	r1, r3
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f7fe fd1f 	bl	80087cc <_EncodeStr>
 8009d8e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8009d90:	2209      	movs	r2, #9
 8009d92:	68f9      	ldr	r1, [r7, #12]
 8009d94:	6938      	ldr	r0, [r7, #16]
 8009d96:	f7fe fe39 	bl	8008a0c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	637b      	str	r3, [r7, #52]	; 0x34
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	4b40      	ldr	r3, [pc, #256]	; (8009ea8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	633b      	str	r3, [r7, #48]	; 0x30
 8009dae:	e00b      	b.n	8009dc8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8009db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db6:	1c59      	adds	r1, r3, #1
 8009db8:	6379      	str	r1, [r7, #52]	; 0x34
 8009dba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009dbe:	b2d2      	uxtb	r2, r2
 8009dc0:	701a      	strb	r2, [r3, #0]
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	09db      	lsrs	r3, r3, #7
 8009dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dca:	2b7f      	cmp	r3, #127	; 0x7f
 8009dcc:	d8f0      	bhi.n	8009db0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8009dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd0:	1c5a      	adds	r2, r3, #1
 8009dd2:	637a      	str	r2, [r7, #52]	; 0x34
 8009dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dd6:	b2d2      	uxtb	r2, r2
 8009dd8:	701a      	strb	r2, [r3, #0]
 8009dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ddc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009de8:	e00b      	b.n	8009e02 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8009dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df0:	1c59      	adds	r1, r3, #1
 8009df2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009df4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009df8:	b2d2      	uxtb	r2, r2
 8009dfa:	701a      	strb	r2, [r3, #0]
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	09db      	lsrs	r3, r3, #7
 8009e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e04:	2b7f      	cmp	r3, #127	; 0x7f
 8009e06:	d8f0      	bhi.n	8009dea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8009e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0a:	1c5a      	adds	r2, r3, #1
 8009e0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e10:	b2d2      	uxtb	r2, r2
 8009e12:	701a      	strb	r2, [r3, #0]
 8009e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	623b      	str	r3, [r7, #32]
 8009e22:	e00b      	b.n	8009e3c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	1c59      	adds	r1, r3, #1
 8009e2c:	6279      	str	r1, [r7, #36]	; 0x24
 8009e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e32:	b2d2      	uxtb	r2, r2
 8009e34:	701a      	strb	r2, [r3, #0]
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	09db      	lsrs	r3, r3, #7
 8009e3a:	623b      	str	r3, [r7, #32]
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8009e40:	d8f0      	bhi.n	8009e24 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	1c5a      	adds	r2, r3, #1
 8009e46:	627a      	str	r2, [r7, #36]	; 0x24
 8009e48:	6a3a      	ldr	r2, [r7, #32]
 8009e4a:	b2d2      	uxtb	r2, r2
 8009e4c:	701a      	strb	r2, [r3, #0]
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	61fb      	str	r3, [r7, #28]
 8009e56:	2300      	movs	r3, #0
 8009e58:	61bb      	str	r3, [r7, #24]
 8009e5a:	e00b      	b.n	8009e74 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	1c59      	adds	r1, r3, #1
 8009e64:	61f9      	str	r1, [r7, #28]
 8009e66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e6a:	b2d2      	uxtb	r2, r2
 8009e6c:	701a      	strb	r2, [r3, #0]
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	09db      	lsrs	r3, r3, #7
 8009e72:	61bb      	str	r3, [r7, #24]
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	2b7f      	cmp	r3, #127	; 0x7f
 8009e78:	d8f0      	bhi.n	8009e5c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	1c5a      	adds	r2, r3, #1
 8009e7e:	61fa      	str	r2, [r7, #28]
 8009e80:	69ba      	ldr	r2, [r7, #24]
 8009e82:	b2d2      	uxtb	r2, r2
 8009e84:	701a      	strb	r2, [r3, #0]
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8009e8a:	2215      	movs	r2, #21
 8009e8c:	68f9      	ldr	r1, [r7, #12]
 8009e8e:	6938      	ldr	r0, [r7, #16]
 8009e90:	f7fe fdbc 	bl	8008a0c <_SendPacket>
  RECORD_END();
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f383 8811 	msr	BASEPRI, r3
}
 8009e9a:	bf00      	nop
 8009e9c:	3748      	adds	r7, #72	; 0x48
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20014644 	.word	0x20014644
 8009ea8:	20014614 	.word	0x20014614

08009eac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8009eac:	b580      	push	{r7, lr}
 8009eae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8009eb0:	4b07      	ldr	r3, [pc, #28]	; (8009ed0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009eb2:	6a1b      	ldr	r3, [r3, #32]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d008      	beq.n	8009eca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8009eb8:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d003      	beq.n	8009eca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8009ec2:	4b03      	ldr	r3, [pc, #12]	; (8009ed0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	4798      	blx	r3
  }
}
 8009eca:	bf00      	nop
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20014614 	.word	0x20014614

08009ed4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009edc:	f3ef 8311 	mrs	r3, BASEPRI
 8009ee0:	f04f 0120 	mov.w	r1, #32
 8009ee4:	f381 8811 	msr	BASEPRI, r1
 8009ee8:	617b      	str	r3, [r7, #20]
 8009eea:	480b      	ldr	r0, [pc, #44]	; (8009f18 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8009eec:	f7fe fc9e 	bl	800882c <_PreparePacket>
 8009ef0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009ef2:	2280      	movs	r2, #128	; 0x80
 8009ef4:	6879      	ldr	r1, [r7, #4]
 8009ef6:	6938      	ldr	r0, [r7, #16]
 8009ef8:	f7fe fc68 	bl	80087cc <_EncodeStr>
 8009efc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8009efe:	220e      	movs	r2, #14
 8009f00:	68f9      	ldr	r1, [r7, #12]
 8009f02:	6938      	ldr	r0, [r7, #16]
 8009f04:	f7fe fd82 	bl	8008a0c <_SendPacket>
  RECORD_END();
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f383 8811 	msr	BASEPRI, r3
}
 8009f0e:	bf00      	nop
 8009f10:	3718      	adds	r7, #24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20014644 	.word	0x20014644

08009f1c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8009f1c:	b590      	push	{r4, r7, lr}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8009f22:	4b15      	ldr	r3, [pc, #84]	; (8009f78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d01a      	beq.n	8009f60 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8009f2a:	4b13      	ldr	r3, [pc, #76]	; (8009f78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d015      	beq.n	8009f60 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8009f34:	4b10      	ldr	r3, [pc, #64]	; (8009f78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009f36:	6a1b      	ldr	r3, [r3, #32]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4798      	blx	r3
 8009f3c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009f40:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8009f42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f46:	f04f 0200 	mov.w	r2, #0
 8009f4a:	f04f 0300 	mov.w	r3, #0
 8009f4e:	000a      	movs	r2, r1
 8009f50:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009f52:	4613      	mov	r3, r2
 8009f54:	461a      	mov	r2, r3
 8009f56:	4621      	mov	r1, r4
 8009f58:	200d      	movs	r0, #13
 8009f5a:	f7ff fb37 	bl	80095cc <SEGGER_SYSVIEW_RecordU32x2>
 8009f5e:	e006      	b.n	8009f6e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8009f60:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4619      	mov	r1, r3
 8009f66:	200c      	movs	r0, #12
 8009f68:	f7ff faf4 	bl	8009554 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8009f6c:	bf00      	nop
 8009f6e:	bf00      	nop
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd90      	pop	{r4, r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20014614 	.word	0x20014614
 8009f7c:	e0001004 	.word	0xe0001004

08009f80 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009f86:	f3ef 8311 	mrs	r3, BASEPRI
 8009f8a:	f04f 0120 	mov.w	r1, #32
 8009f8e:	f381 8811 	msr	BASEPRI, r1
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	4819      	ldr	r0, [pc, #100]	; (8009ffc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8009f96:	f7fe fc49 	bl	800882c <_PreparePacket>
 8009f9a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8009fa0:	4b17      	ldr	r3, [pc, #92]	; (800a000 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	617b      	str	r3, [r7, #20]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	613b      	str	r3, [r7, #16]
 8009fb2:	e00b      	b.n	8009fcc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	1c59      	adds	r1, r3, #1
 8009fbc:	6179      	str	r1, [r7, #20]
 8009fbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009fc2:	b2d2      	uxtb	r2, r2
 8009fc4:	701a      	strb	r2, [r3, #0]
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	09db      	lsrs	r3, r3, #7
 8009fca:	613b      	str	r3, [r7, #16]
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	2b7f      	cmp	r3, #127	; 0x7f
 8009fd0:	d8f0      	bhi.n	8009fb4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	1c5a      	adds	r2, r3, #1
 8009fd6:	617a      	str	r2, [r7, #20]
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	b2d2      	uxtb	r2, r2
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	68b8      	ldr	r0, [r7, #8]
 8009fe8:	f7fe fd10 	bl	8008a0c <_SendPacket>
  RECORD_END();
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f383 8811 	msr	BASEPRI, r3
}
 8009ff2:	bf00      	nop
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20014644 	.word	0x20014644
 800a000:	e000ed04 	.word	0xe000ed04

0800a004 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a00a:	f3ef 8311 	mrs	r3, BASEPRI
 800a00e:	f04f 0120 	mov.w	r1, #32
 800a012:	f381 8811 	msr	BASEPRI, r1
 800a016:	607b      	str	r3, [r7, #4]
 800a018:	4807      	ldr	r0, [pc, #28]	; (800a038 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800a01a:	f7fe fc07 	bl	800882c <_PreparePacket>
 800a01e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800a020:	2203      	movs	r2, #3
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6838      	ldr	r0, [r7, #0]
 800a026:	f7fe fcf1 	bl	8008a0c <_SendPacket>
  RECORD_END();
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f383 8811 	msr	BASEPRI, r3
}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	20014644 	.word	0x20014644

0800a03c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a042:	f3ef 8311 	mrs	r3, BASEPRI
 800a046:	f04f 0120 	mov.w	r1, #32
 800a04a:	f381 8811 	msr	BASEPRI, r1
 800a04e:	607b      	str	r3, [r7, #4]
 800a050:	4807      	ldr	r0, [pc, #28]	; (800a070 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800a052:	f7fe fbeb 	bl	800882c <_PreparePacket>
 800a056:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800a058:	2212      	movs	r2, #18
 800a05a:	6839      	ldr	r1, [r7, #0]
 800a05c:	6838      	ldr	r0, [r7, #0]
 800a05e:	f7fe fcd5 	bl	8008a0c <_SendPacket>
  RECORD_END();
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f383 8811 	msr	BASEPRI, r3
}
 800a068:	bf00      	nop
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	20014644 	.word	0x20014644

0800a074 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a07a:	f3ef 8311 	mrs	r3, BASEPRI
 800a07e:	f04f 0120 	mov.w	r1, #32
 800a082:	f381 8811 	msr	BASEPRI, r1
 800a086:	607b      	str	r3, [r7, #4]
 800a088:	4807      	ldr	r0, [pc, #28]	; (800a0a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a08a:	f7fe fbcf 	bl	800882c <_PreparePacket>
 800a08e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a090:	2211      	movs	r2, #17
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6838      	ldr	r0, [r7, #0]
 800a096:	f7fe fcb9 	bl	8008a0c <_SendPacket>
  RECORD_END();
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f383 8811 	msr	BASEPRI, r3
}
 800a0a0:	bf00      	nop
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	20014644 	.word	0x20014644

0800a0ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b088      	sub	sp, #32
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a0b4:	f3ef 8311 	mrs	r3, BASEPRI
 800a0b8:	f04f 0120 	mov.w	r1, #32
 800a0bc:	f381 8811 	msr	BASEPRI, r1
 800a0c0:	617b      	str	r3, [r7, #20]
 800a0c2:	4819      	ldr	r0, [pc, #100]	; (800a128 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a0c4:	f7fe fbb2 	bl	800882c <_PreparePacket>
 800a0c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a0ce:	4b17      	ldr	r3, [pc, #92]	; (800a12c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	61fb      	str	r3, [r7, #28]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	61bb      	str	r3, [r7, #24]
 800a0e0:	e00b      	b.n	800a0fa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	1c59      	adds	r1, r3, #1
 800a0ea:	61f9      	str	r1, [r7, #28]
 800a0ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a0f0:	b2d2      	uxtb	r2, r2
 800a0f2:	701a      	strb	r2, [r3, #0]
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	09db      	lsrs	r3, r3, #7
 800a0f8:	61bb      	str	r3, [r7, #24]
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2b7f      	cmp	r3, #127	; 0x7f
 800a0fe:	d8f0      	bhi.n	800a0e2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	61fa      	str	r2, [r7, #28]
 800a106:	69ba      	ldr	r2, [r7, #24]
 800a108:	b2d2      	uxtb	r2, r2
 800a10a:	701a      	strb	r2, [r3, #0]
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a110:	2208      	movs	r2, #8
 800a112:	68f9      	ldr	r1, [r7, #12]
 800a114:	6938      	ldr	r0, [r7, #16]
 800a116:	f7fe fc79 	bl	8008a0c <_SendPacket>
  RECORD_END();
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f383 8811 	msr	BASEPRI, r3
}
 800a120:	bf00      	nop
 800a122:	3720      	adds	r7, #32
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	20014644 	.word	0x20014644
 800a12c:	20014614 	.word	0x20014614

0800a130 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a130:	b580      	push	{r7, lr}
 800a132:	b088      	sub	sp, #32
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a138:	f3ef 8311 	mrs	r3, BASEPRI
 800a13c:	f04f 0120 	mov.w	r1, #32
 800a140:	f381 8811 	msr	BASEPRI, r1
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	4819      	ldr	r0, [pc, #100]	; (800a1ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a148:	f7fe fb70 	bl	800882c <_PreparePacket>
 800a14c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a152:	4b17      	ldr	r3, [pc, #92]	; (800a1b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	61fb      	str	r3, [r7, #28]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	61bb      	str	r3, [r7, #24]
 800a164:	e00b      	b.n	800a17e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	1c59      	adds	r1, r3, #1
 800a16e:	61f9      	str	r1, [r7, #28]
 800a170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a174:	b2d2      	uxtb	r2, r2
 800a176:	701a      	strb	r2, [r3, #0]
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	09db      	lsrs	r3, r3, #7
 800a17c:	61bb      	str	r3, [r7, #24]
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	2b7f      	cmp	r3, #127	; 0x7f
 800a182:	d8f0      	bhi.n	800a166 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	1c5a      	adds	r2, r3, #1
 800a188:	61fa      	str	r2, [r7, #28]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	b2d2      	uxtb	r2, r2
 800a18e:	701a      	strb	r2, [r3, #0]
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a194:	2204      	movs	r2, #4
 800a196:	68f9      	ldr	r1, [r7, #12]
 800a198:	6938      	ldr	r0, [r7, #16]
 800a19a:	f7fe fc37 	bl	8008a0c <_SendPacket>
  RECORD_END();
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f383 8811 	msr	BASEPRI, r3
}
 800a1a4:	bf00      	nop
 800a1a6:	3720      	adds	r7, #32
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	20014644 	.word	0x20014644
 800a1b0:	20014614 	.word	0x20014614

0800a1b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a1bc:	f3ef 8311 	mrs	r3, BASEPRI
 800a1c0:	f04f 0120 	mov.w	r1, #32
 800a1c4:	f381 8811 	msr	BASEPRI, r1
 800a1c8:	617b      	str	r3, [r7, #20]
 800a1ca:	4819      	ldr	r0, [pc, #100]	; (800a230 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a1cc:	f7fe fb2e 	bl	800882c <_PreparePacket>
 800a1d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a1d6:	4b17      	ldr	r3, [pc, #92]	; (800a234 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	61fb      	str	r3, [r7, #28]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	61bb      	str	r3, [r7, #24]
 800a1e8:	e00b      	b.n	800a202 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	1c59      	adds	r1, r3, #1
 800a1f2:	61f9      	str	r1, [r7, #28]
 800a1f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a1f8:	b2d2      	uxtb	r2, r2
 800a1fa:	701a      	strb	r2, [r3, #0]
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	09db      	lsrs	r3, r3, #7
 800a200:	61bb      	str	r3, [r7, #24]
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	2b7f      	cmp	r3, #127	; 0x7f
 800a206:	d8f0      	bhi.n	800a1ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	61fa      	str	r2, [r7, #28]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	b2d2      	uxtb	r2, r2
 800a212:	701a      	strb	r2, [r3, #0]
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800a218:	2206      	movs	r2, #6
 800a21a:	68f9      	ldr	r1, [r7, #12]
 800a21c:	6938      	ldr	r0, [r7, #16]
 800a21e:	f7fe fbf5 	bl	8008a0c <_SendPacket>
  RECORD_END();
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f383 8811 	msr	BASEPRI, r3
}
 800a228:	bf00      	nop
 800a22a:	3720      	adds	r7, #32
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20014644 	.word	0x20014644
 800a234:	20014614 	.word	0x20014614

0800a238 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800a240:	4b04      	ldr	r3, [pc, #16]	; (800a254 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	1ad3      	subs	r3, r2, r3
}
 800a248:	4618      	mov	r0, r3
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	20014614 	.word	0x20014614

0800a258 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08c      	sub	sp, #48	; 0x30
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800a262:	4b40      	ldr	r3, [pc, #256]	; (800a364 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d077      	beq.n	800a35a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800a26a:	4b3e      	ldr	r3, [pc, #248]	; (800a364 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800a270:	2300      	movs	r3, #0
 800a272:	62bb      	str	r3, [r7, #40]	; 0x28
 800a274:	e008      	b.n	800a288 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d007      	beq.n	800a292 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a284:	3301      	adds	r3, #1
 800a286:	62bb      	str	r3, [r7, #40]	; 0x28
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d3f2      	bcc.n	800a276 <SEGGER_SYSVIEW_SendModule+0x1e>
 800a290:	e000      	b.n	800a294 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800a292:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a296:	2b00      	cmp	r3, #0
 800a298:	d055      	beq.n	800a346 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a29a:	f3ef 8311 	mrs	r3, BASEPRI
 800a29e:	f04f 0120 	mov.w	r1, #32
 800a2a2:	f381 8811 	msr	BASEPRI, r1
 800a2a6:	617b      	str	r3, [r7, #20]
 800a2a8:	482f      	ldr	r0, [pc, #188]	; (800a368 <SEGGER_SYSVIEW_SendModule+0x110>)
 800a2aa:	f7fe fabf 	bl	800882c <_PreparePacket>
 800a2ae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b8:	79fb      	ldrb	r3, [r7, #7]
 800a2ba:	623b      	str	r3, [r7, #32]
 800a2bc:	e00b      	b.n	800a2d6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c4:	1c59      	adds	r1, r3, #1
 800a2c6:	6279      	str	r1, [r7, #36]	; 0x24
 800a2c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a2cc:	b2d2      	uxtb	r2, r2
 800a2ce:	701a      	strb	r2, [r3, #0]
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	09db      	lsrs	r3, r3, #7
 800a2d4:	623b      	str	r3, [r7, #32]
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	2b7f      	cmp	r3, #127	; 0x7f
 800a2da:	d8f0      	bhi.n	800a2be <SEGGER_SYSVIEW_SendModule+0x66>
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2de:	1c5a      	adds	r2, r3, #1
 800a2e0:	627a      	str	r2, [r7, #36]	; 0x24
 800a2e2:	6a3a      	ldr	r2, [r7, #32]
 800a2e4:	b2d2      	uxtb	r2, r2
 800a2e6:	701a      	strb	r2, [r3, #0]
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	61fb      	str	r3, [r7, #28]
 800a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	61bb      	str	r3, [r7, #24]
 800a2f6:	e00b      	b.n	800a310 <SEGGER_SYSVIEW_SendModule+0xb8>
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	1c59      	adds	r1, r3, #1
 800a300:	61f9      	str	r1, [r7, #28]
 800a302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a306:	b2d2      	uxtb	r2, r2
 800a308:	701a      	strb	r2, [r3, #0]
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	09db      	lsrs	r3, r3, #7
 800a30e:	61bb      	str	r3, [r7, #24]
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	2b7f      	cmp	r3, #127	; 0x7f
 800a314:	d8f0      	bhi.n	800a2f8 <SEGGER_SYSVIEW_SendModule+0xa0>
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	1c5a      	adds	r2, r3, #1
 800a31a:	61fa      	str	r2, [r7, #28]
 800a31c:	69ba      	ldr	r2, [r7, #24]
 800a31e:	b2d2      	uxtb	r2, r2
 800a320:	701a      	strb	r2, [r3, #0]
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2280      	movs	r2, #128	; 0x80
 800a32c:	4619      	mov	r1, r3
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7fe fa4c 	bl	80087cc <_EncodeStr>
 800a334:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800a336:	2216      	movs	r2, #22
 800a338:	68f9      	ldr	r1, [r7, #12]
 800a33a:	6938      	ldr	r0, [r7, #16]
 800a33c:	f7fe fb66 	bl	8008a0c <_SendPacket>
      RECORD_END();
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800a346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d006      	beq.n	800a35a <SEGGER_SYSVIEW_SendModule+0x102>
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	4798      	blx	r3
    }
  }
}
 800a35a:	bf00      	nop
 800a35c:	3730      	adds	r7, #48	; 0x30
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	2001463c 	.word	0x2001463c
 800a368:	20014644 	.word	0x20014644

0800a36c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800a372:	4b0c      	ldr	r3, [pc, #48]	; (800a3a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00f      	beq.n	800a39a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800a37a:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1f2      	bne.n	800a380 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800a39a:	bf00      	nop
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	2001463c 	.word	0x2001463c

0800a3a8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800a3ae:	f3ef 8311 	mrs	r3, BASEPRI
 800a3b2:	f04f 0120 	mov.w	r1, #32
 800a3b6:	f381 8811 	msr	BASEPRI, r1
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	4817      	ldr	r0, [pc, #92]	; (800a41c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800a3be:	f7fe fa35 	bl	800882c <_PreparePacket>
 800a3c2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	617b      	str	r3, [r7, #20]
 800a3cc:	4b14      	ldr	r3, [pc, #80]	; (800a420 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	613b      	str	r3, [r7, #16]
 800a3d2:	e00b      	b.n	800a3ec <SEGGER_SYSVIEW_SendNumModules+0x44>
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	1c59      	adds	r1, r3, #1
 800a3dc:	6179      	str	r1, [r7, #20]
 800a3de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a3e2:	b2d2      	uxtb	r2, r2
 800a3e4:	701a      	strb	r2, [r3, #0]
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	09db      	lsrs	r3, r3, #7
 800a3ea:	613b      	str	r3, [r7, #16]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	2b7f      	cmp	r3, #127	; 0x7f
 800a3f0:	d8f0      	bhi.n	800a3d4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	1c5a      	adds	r2, r3, #1
 800a3f6:	617a      	str	r2, [r7, #20]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	b2d2      	uxtb	r2, r2
 800a3fc:	701a      	strb	r2, [r3, #0]
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800a402:	221b      	movs	r2, #27
 800a404:	6879      	ldr	r1, [r7, #4]
 800a406:	68b8      	ldr	r0, [r7, #8]
 800a408:	f7fe fb00 	bl	8008a0c <_SendPacket>
  RECORD_END();
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f383 8811 	msr	BASEPRI, r3
}
 800a412:	bf00      	nop
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	20014644 	.word	0x20014644
 800a420:	20014640 	.word	0x20014640

0800a424 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800a424:	b40f      	push	{r0, r1, r2, r3}
 800a426:	b580      	push	{r7, lr}
 800a428:	b082      	sub	sp, #8
 800a42a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800a42c:	f107 0314 	add.w	r3, r7, #20
 800a430:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800a432:	1d3b      	adds	r3, r7, #4
 800a434:	461a      	mov	r2, r3
 800a436:	2100      	movs	r1, #0
 800a438:	6938      	ldr	r0, [r7, #16]
 800a43a:	f7fe fdf9 	bl	8009030 <_VPrintTarget>
  va_end(ParamList);
}
 800a43e:	bf00      	nop
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a448:	b004      	add	sp, #16
 800a44a:	4770      	bx	lr

0800a44c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b08a      	sub	sp, #40	; 0x28
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a454:	f3ef 8311 	mrs	r3, BASEPRI
 800a458:	f04f 0120 	mov.w	r1, #32
 800a45c:	f381 8811 	msr	BASEPRI, r1
 800a460:	617b      	str	r3, [r7, #20]
 800a462:	4827      	ldr	r0, [pc, #156]	; (800a500 <SEGGER_SYSVIEW_Warn+0xb4>)
 800a464:	f7fe f9e2 	bl	800882c <_PreparePacket>
 800a468:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a46a:	2280      	movs	r2, #128	; 0x80
 800a46c:	6879      	ldr	r1, [r7, #4]
 800a46e:	6938      	ldr	r0, [r7, #16]
 800a470:	f7fe f9ac 	bl	80087cc <_EncodeStr>
 800a474:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
 800a47a:	2301      	movs	r3, #1
 800a47c:	623b      	str	r3, [r7, #32]
 800a47e:	e00b      	b.n	800a498 <SEGGER_SYSVIEW_Warn+0x4c>
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	b2da      	uxtb	r2, r3
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	1c59      	adds	r1, r3, #1
 800a488:	6279      	str	r1, [r7, #36]	; 0x24
 800a48a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a48e:	b2d2      	uxtb	r2, r2
 800a490:	701a      	strb	r2, [r3, #0]
 800a492:	6a3b      	ldr	r3, [r7, #32]
 800a494:	09db      	lsrs	r3, r3, #7
 800a496:	623b      	str	r3, [r7, #32]
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	2b7f      	cmp	r3, #127	; 0x7f
 800a49c:	d8f0      	bhi.n	800a480 <SEGGER_SYSVIEW_Warn+0x34>
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	1c5a      	adds	r2, r3, #1
 800a4a2:	627a      	str	r2, [r7, #36]	; 0x24
 800a4a4:	6a3a      	ldr	r2, [r7, #32]
 800a4a6:	b2d2      	uxtb	r2, r2
 800a4a8:	701a      	strb	r2, [r3, #0]
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	61fb      	str	r3, [r7, #28]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	61bb      	str	r3, [r7, #24]
 800a4b6:	e00b      	b.n	800a4d0 <SEGGER_SYSVIEW_Warn+0x84>
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	1c59      	adds	r1, r3, #1
 800a4c0:	61f9      	str	r1, [r7, #28]
 800a4c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a4c6:	b2d2      	uxtb	r2, r2
 800a4c8:	701a      	strb	r2, [r3, #0]
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	09db      	lsrs	r3, r3, #7
 800a4ce:	61bb      	str	r3, [r7, #24]
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	2b7f      	cmp	r3, #127	; 0x7f
 800a4d4:	d8f0      	bhi.n	800a4b8 <SEGGER_SYSVIEW_Warn+0x6c>
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	61fa      	str	r2, [r7, #28]
 800a4dc:	69ba      	ldr	r2, [r7, #24]
 800a4de:	b2d2      	uxtb	r2, r2
 800a4e0:	701a      	strb	r2, [r3, #0]
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a4e6:	221a      	movs	r2, #26
 800a4e8:	68f9      	ldr	r1, [r7, #12]
 800a4ea:	6938      	ldr	r0, [r7, #16]
 800a4ec:	f7fe fa8e 	bl	8008a0c <_SendPacket>
  RECORD_END();
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	f383 8811 	msr	BASEPRI, r3
}
 800a4f6:	bf00      	nop
 800a4f8:	3728      	adds	r7, #40	; 0x28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20014644 	.word	0x20014644

0800a504 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800a504:	b580      	push	{r7, lr}
 800a506:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800a508:	4b13      	ldr	r3, [pc, #76]	; (800a558 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a50a:	7e1b      	ldrb	r3, [r3, #24]
 800a50c:	4619      	mov	r1, r3
 800a50e:	4a13      	ldr	r2, [pc, #76]	; (800a55c <SEGGER_SYSVIEW_IsStarted+0x58>)
 800a510:	460b      	mov	r3, r1
 800a512:	005b      	lsls	r3, r3, #1
 800a514:	440b      	add	r3, r1
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	4413      	add	r3, r2
 800a51a:	336c      	adds	r3, #108	; 0x6c
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	4b0e      	ldr	r3, [pc, #56]	; (800a558 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a520:	7e1b      	ldrb	r3, [r3, #24]
 800a522:	4618      	mov	r0, r3
 800a524:	490d      	ldr	r1, [pc, #52]	; (800a55c <SEGGER_SYSVIEW_IsStarted+0x58>)
 800a526:	4603      	mov	r3, r0
 800a528:	005b      	lsls	r3, r3, #1
 800a52a:	4403      	add	r3, r0
 800a52c:	00db      	lsls	r3, r3, #3
 800a52e:	440b      	add	r3, r1
 800a530:	3370      	adds	r3, #112	; 0x70
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	429a      	cmp	r2, r3
 800a536:	d00b      	beq.n	800a550 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800a538:	4b07      	ldr	r3, [pc, #28]	; (800a558 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a53a:	789b      	ldrb	r3, [r3, #2]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d107      	bne.n	800a550 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a542:	2201      	movs	r2, #1
 800a544:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800a546:	f7fe f97d 	bl	8008844 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800a54a:	4b03      	ldr	r3, [pc, #12]	; (800a558 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800a550:	4b01      	ldr	r3, [pc, #4]	; (800a558 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a552:	781b      	ldrb	r3, [r3, #0]
}
 800a554:	4618      	mov	r0, r3
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20014614 	.word	0x20014614
 800a55c:	20013154 	.word	0x20013154

0800a560 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	2000      	movs	r0, #0
 800a574:	f7fe f834 	bl	80085e0 <SEGGER_RTT_Write>
  return len;
 800a578:	683b      	ldr	r3, [r7, #0]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
	...

0800a584 <__errno>:
 800a584:	4b01      	ldr	r3, [pc, #4]	; (800a58c <__errno+0x8>)
 800a586:	6818      	ldr	r0, [r3, #0]
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	20000020 	.word	0x20000020

0800a590 <__libc_init_array>:
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	4d0d      	ldr	r5, [pc, #52]	; (800a5c8 <__libc_init_array+0x38>)
 800a594:	4c0d      	ldr	r4, [pc, #52]	; (800a5cc <__libc_init_array+0x3c>)
 800a596:	1b64      	subs	r4, r4, r5
 800a598:	10a4      	asrs	r4, r4, #2
 800a59a:	2600      	movs	r6, #0
 800a59c:	42a6      	cmp	r6, r4
 800a59e:	d109      	bne.n	800a5b4 <__libc_init_array+0x24>
 800a5a0:	4d0b      	ldr	r5, [pc, #44]	; (800a5d0 <__libc_init_array+0x40>)
 800a5a2:	4c0c      	ldr	r4, [pc, #48]	; (800a5d4 <__libc_init_array+0x44>)
 800a5a4:	f003 fb48 	bl	800dc38 <_init>
 800a5a8:	1b64      	subs	r4, r4, r5
 800a5aa:	10a4      	asrs	r4, r4, #2
 800a5ac:	2600      	movs	r6, #0
 800a5ae:	42a6      	cmp	r6, r4
 800a5b0:	d105      	bne.n	800a5be <__libc_init_array+0x2e>
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}
 800a5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5b8:	4798      	blx	r3
 800a5ba:	3601      	adds	r6, #1
 800a5bc:	e7ee      	b.n	800a59c <__libc_init_array+0xc>
 800a5be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5c2:	4798      	blx	r3
 800a5c4:	3601      	adds	r6, #1
 800a5c6:	e7f2      	b.n	800a5ae <__libc_init_array+0x1e>
 800a5c8:	0800e214 	.word	0x0800e214
 800a5cc:	0800e214 	.word	0x0800e214
 800a5d0:	0800e214 	.word	0x0800e214
 800a5d4:	0800e218 	.word	0x0800e218

0800a5d8 <memcmp>:
 800a5d8:	b510      	push	{r4, lr}
 800a5da:	3901      	subs	r1, #1
 800a5dc:	4402      	add	r2, r0
 800a5de:	4290      	cmp	r0, r2
 800a5e0:	d101      	bne.n	800a5e6 <memcmp+0xe>
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	e005      	b.n	800a5f2 <memcmp+0x1a>
 800a5e6:	7803      	ldrb	r3, [r0, #0]
 800a5e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	d001      	beq.n	800a5f4 <memcmp+0x1c>
 800a5f0:	1b18      	subs	r0, r3, r4
 800a5f2:	bd10      	pop	{r4, pc}
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	e7f2      	b.n	800a5de <memcmp+0x6>

0800a5f8 <memcpy>:
 800a5f8:	440a      	add	r2, r1
 800a5fa:	4291      	cmp	r1, r2
 800a5fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a600:	d100      	bne.n	800a604 <memcpy+0xc>
 800a602:	4770      	bx	lr
 800a604:	b510      	push	{r4, lr}
 800a606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a60a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a60e:	4291      	cmp	r1, r2
 800a610:	d1f9      	bne.n	800a606 <memcpy+0xe>
 800a612:	bd10      	pop	{r4, pc}

0800a614 <memset>:
 800a614:	4402      	add	r2, r0
 800a616:	4603      	mov	r3, r0
 800a618:	4293      	cmp	r3, r2
 800a61a:	d100      	bne.n	800a61e <memset+0xa>
 800a61c:	4770      	bx	lr
 800a61e:	f803 1b01 	strb.w	r1, [r3], #1
 800a622:	e7f9      	b.n	800a618 <memset+0x4>

0800a624 <_scanf_float>:
 800a624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	b087      	sub	sp, #28
 800a62a:	4617      	mov	r7, r2
 800a62c:	9303      	str	r3, [sp, #12]
 800a62e:	688b      	ldr	r3, [r1, #8]
 800a630:	1e5a      	subs	r2, r3, #1
 800a632:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a636:	bf83      	ittte	hi
 800a638:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a63c:	195b      	addhi	r3, r3, r5
 800a63e:	9302      	strhi	r3, [sp, #8]
 800a640:	2300      	movls	r3, #0
 800a642:	bf86      	itte	hi
 800a644:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a648:	608b      	strhi	r3, [r1, #8]
 800a64a:	9302      	strls	r3, [sp, #8]
 800a64c:	680b      	ldr	r3, [r1, #0]
 800a64e:	468b      	mov	fp, r1
 800a650:	2500      	movs	r5, #0
 800a652:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a656:	f84b 3b1c 	str.w	r3, [fp], #28
 800a65a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a65e:	4680      	mov	r8, r0
 800a660:	460c      	mov	r4, r1
 800a662:	465e      	mov	r6, fp
 800a664:	46aa      	mov	sl, r5
 800a666:	46a9      	mov	r9, r5
 800a668:	9501      	str	r5, [sp, #4]
 800a66a:	68a2      	ldr	r2, [r4, #8]
 800a66c:	b152      	cbz	r2, 800a684 <_scanf_float+0x60>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	2b4e      	cmp	r3, #78	; 0x4e
 800a674:	d864      	bhi.n	800a740 <_scanf_float+0x11c>
 800a676:	2b40      	cmp	r3, #64	; 0x40
 800a678:	d83c      	bhi.n	800a6f4 <_scanf_float+0xd0>
 800a67a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a67e:	b2c8      	uxtb	r0, r1
 800a680:	280e      	cmp	r0, #14
 800a682:	d93a      	bls.n	800a6fa <_scanf_float+0xd6>
 800a684:	f1b9 0f00 	cmp.w	r9, #0
 800a688:	d003      	beq.n	800a692 <_scanf_float+0x6e>
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a696:	f1ba 0f01 	cmp.w	sl, #1
 800a69a:	f200 8113 	bhi.w	800a8c4 <_scanf_float+0x2a0>
 800a69e:	455e      	cmp	r6, fp
 800a6a0:	f200 8105 	bhi.w	800a8ae <_scanf_float+0x28a>
 800a6a4:	2501      	movs	r5, #1
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	b007      	add	sp, #28
 800a6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a6b2:	2a0d      	cmp	r2, #13
 800a6b4:	d8e6      	bhi.n	800a684 <_scanf_float+0x60>
 800a6b6:	a101      	add	r1, pc, #4	; (adr r1, 800a6bc <_scanf_float+0x98>)
 800a6b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a6bc:	0800a7fb 	.word	0x0800a7fb
 800a6c0:	0800a685 	.word	0x0800a685
 800a6c4:	0800a685 	.word	0x0800a685
 800a6c8:	0800a685 	.word	0x0800a685
 800a6cc:	0800a85b 	.word	0x0800a85b
 800a6d0:	0800a833 	.word	0x0800a833
 800a6d4:	0800a685 	.word	0x0800a685
 800a6d8:	0800a685 	.word	0x0800a685
 800a6dc:	0800a809 	.word	0x0800a809
 800a6e0:	0800a685 	.word	0x0800a685
 800a6e4:	0800a685 	.word	0x0800a685
 800a6e8:	0800a685 	.word	0x0800a685
 800a6ec:	0800a685 	.word	0x0800a685
 800a6f0:	0800a7c1 	.word	0x0800a7c1
 800a6f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a6f8:	e7db      	b.n	800a6b2 <_scanf_float+0x8e>
 800a6fa:	290e      	cmp	r1, #14
 800a6fc:	d8c2      	bhi.n	800a684 <_scanf_float+0x60>
 800a6fe:	a001      	add	r0, pc, #4	; (adr r0, 800a704 <_scanf_float+0xe0>)
 800a700:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a704:	0800a7b3 	.word	0x0800a7b3
 800a708:	0800a685 	.word	0x0800a685
 800a70c:	0800a7b3 	.word	0x0800a7b3
 800a710:	0800a847 	.word	0x0800a847
 800a714:	0800a685 	.word	0x0800a685
 800a718:	0800a761 	.word	0x0800a761
 800a71c:	0800a79d 	.word	0x0800a79d
 800a720:	0800a79d 	.word	0x0800a79d
 800a724:	0800a79d 	.word	0x0800a79d
 800a728:	0800a79d 	.word	0x0800a79d
 800a72c:	0800a79d 	.word	0x0800a79d
 800a730:	0800a79d 	.word	0x0800a79d
 800a734:	0800a79d 	.word	0x0800a79d
 800a738:	0800a79d 	.word	0x0800a79d
 800a73c:	0800a79d 	.word	0x0800a79d
 800a740:	2b6e      	cmp	r3, #110	; 0x6e
 800a742:	d809      	bhi.n	800a758 <_scanf_float+0x134>
 800a744:	2b60      	cmp	r3, #96	; 0x60
 800a746:	d8b2      	bhi.n	800a6ae <_scanf_float+0x8a>
 800a748:	2b54      	cmp	r3, #84	; 0x54
 800a74a:	d077      	beq.n	800a83c <_scanf_float+0x218>
 800a74c:	2b59      	cmp	r3, #89	; 0x59
 800a74e:	d199      	bne.n	800a684 <_scanf_float+0x60>
 800a750:	2d07      	cmp	r5, #7
 800a752:	d197      	bne.n	800a684 <_scanf_float+0x60>
 800a754:	2508      	movs	r5, #8
 800a756:	e029      	b.n	800a7ac <_scanf_float+0x188>
 800a758:	2b74      	cmp	r3, #116	; 0x74
 800a75a:	d06f      	beq.n	800a83c <_scanf_float+0x218>
 800a75c:	2b79      	cmp	r3, #121	; 0x79
 800a75e:	e7f6      	b.n	800a74e <_scanf_float+0x12a>
 800a760:	6821      	ldr	r1, [r4, #0]
 800a762:	05c8      	lsls	r0, r1, #23
 800a764:	d51a      	bpl.n	800a79c <_scanf_float+0x178>
 800a766:	9b02      	ldr	r3, [sp, #8]
 800a768:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a76c:	6021      	str	r1, [r4, #0]
 800a76e:	f109 0901 	add.w	r9, r9, #1
 800a772:	b11b      	cbz	r3, 800a77c <_scanf_float+0x158>
 800a774:	3b01      	subs	r3, #1
 800a776:	3201      	adds	r2, #1
 800a778:	9302      	str	r3, [sp, #8]
 800a77a:	60a2      	str	r2, [r4, #8]
 800a77c:	68a3      	ldr	r3, [r4, #8]
 800a77e:	3b01      	subs	r3, #1
 800a780:	60a3      	str	r3, [r4, #8]
 800a782:	6923      	ldr	r3, [r4, #16]
 800a784:	3301      	adds	r3, #1
 800a786:	6123      	str	r3, [r4, #16]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	607b      	str	r3, [r7, #4]
 800a790:	f340 8084 	ble.w	800a89c <_scanf_float+0x278>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	3301      	adds	r3, #1
 800a798:	603b      	str	r3, [r7, #0]
 800a79a:	e766      	b.n	800a66a <_scanf_float+0x46>
 800a79c:	eb1a 0f05 	cmn.w	sl, r5
 800a7a0:	f47f af70 	bne.w	800a684 <_scanf_float+0x60>
 800a7a4:	6822      	ldr	r2, [r4, #0]
 800a7a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a7aa:	6022      	str	r2, [r4, #0]
 800a7ac:	f806 3b01 	strb.w	r3, [r6], #1
 800a7b0:	e7e4      	b.n	800a77c <_scanf_float+0x158>
 800a7b2:	6822      	ldr	r2, [r4, #0]
 800a7b4:	0610      	lsls	r0, r2, #24
 800a7b6:	f57f af65 	bpl.w	800a684 <_scanf_float+0x60>
 800a7ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7be:	e7f4      	b.n	800a7aa <_scanf_float+0x186>
 800a7c0:	f1ba 0f00 	cmp.w	sl, #0
 800a7c4:	d10e      	bne.n	800a7e4 <_scanf_float+0x1c0>
 800a7c6:	f1b9 0f00 	cmp.w	r9, #0
 800a7ca:	d10e      	bne.n	800a7ea <_scanf_float+0x1c6>
 800a7cc:	6822      	ldr	r2, [r4, #0]
 800a7ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a7d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a7d6:	d108      	bne.n	800a7ea <_scanf_float+0x1c6>
 800a7d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a7dc:	6022      	str	r2, [r4, #0]
 800a7de:	f04f 0a01 	mov.w	sl, #1
 800a7e2:	e7e3      	b.n	800a7ac <_scanf_float+0x188>
 800a7e4:	f1ba 0f02 	cmp.w	sl, #2
 800a7e8:	d055      	beq.n	800a896 <_scanf_float+0x272>
 800a7ea:	2d01      	cmp	r5, #1
 800a7ec:	d002      	beq.n	800a7f4 <_scanf_float+0x1d0>
 800a7ee:	2d04      	cmp	r5, #4
 800a7f0:	f47f af48 	bne.w	800a684 <_scanf_float+0x60>
 800a7f4:	3501      	adds	r5, #1
 800a7f6:	b2ed      	uxtb	r5, r5
 800a7f8:	e7d8      	b.n	800a7ac <_scanf_float+0x188>
 800a7fa:	f1ba 0f01 	cmp.w	sl, #1
 800a7fe:	f47f af41 	bne.w	800a684 <_scanf_float+0x60>
 800a802:	f04f 0a02 	mov.w	sl, #2
 800a806:	e7d1      	b.n	800a7ac <_scanf_float+0x188>
 800a808:	b97d      	cbnz	r5, 800a82a <_scanf_float+0x206>
 800a80a:	f1b9 0f00 	cmp.w	r9, #0
 800a80e:	f47f af3c 	bne.w	800a68a <_scanf_float+0x66>
 800a812:	6822      	ldr	r2, [r4, #0]
 800a814:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a818:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a81c:	f47f af39 	bne.w	800a692 <_scanf_float+0x6e>
 800a820:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a824:	6022      	str	r2, [r4, #0]
 800a826:	2501      	movs	r5, #1
 800a828:	e7c0      	b.n	800a7ac <_scanf_float+0x188>
 800a82a:	2d03      	cmp	r5, #3
 800a82c:	d0e2      	beq.n	800a7f4 <_scanf_float+0x1d0>
 800a82e:	2d05      	cmp	r5, #5
 800a830:	e7de      	b.n	800a7f0 <_scanf_float+0x1cc>
 800a832:	2d02      	cmp	r5, #2
 800a834:	f47f af26 	bne.w	800a684 <_scanf_float+0x60>
 800a838:	2503      	movs	r5, #3
 800a83a:	e7b7      	b.n	800a7ac <_scanf_float+0x188>
 800a83c:	2d06      	cmp	r5, #6
 800a83e:	f47f af21 	bne.w	800a684 <_scanf_float+0x60>
 800a842:	2507      	movs	r5, #7
 800a844:	e7b2      	b.n	800a7ac <_scanf_float+0x188>
 800a846:	6822      	ldr	r2, [r4, #0]
 800a848:	0591      	lsls	r1, r2, #22
 800a84a:	f57f af1b 	bpl.w	800a684 <_scanf_float+0x60>
 800a84e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a852:	6022      	str	r2, [r4, #0]
 800a854:	f8cd 9004 	str.w	r9, [sp, #4]
 800a858:	e7a8      	b.n	800a7ac <_scanf_float+0x188>
 800a85a:	6822      	ldr	r2, [r4, #0]
 800a85c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a860:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a864:	d006      	beq.n	800a874 <_scanf_float+0x250>
 800a866:	0550      	lsls	r0, r2, #21
 800a868:	f57f af0c 	bpl.w	800a684 <_scanf_float+0x60>
 800a86c:	f1b9 0f00 	cmp.w	r9, #0
 800a870:	f43f af0f 	beq.w	800a692 <_scanf_float+0x6e>
 800a874:	0591      	lsls	r1, r2, #22
 800a876:	bf58      	it	pl
 800a878:	9901      	ldrpl	r1, [sp, #4]
 800a87a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a87e:	bf58      	it	pl
 800a880:	eba9 0101 	subpl.w	r1, r9, r1
 800a884:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a888:	bf58      	it	pl
 800a88a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a88e:	6022      	str	r2, [r4, #0]
 800a890:	f04f 0900 	mov.w	r9, #0
 800a894:	e78a      	b.n	800a7ac <_scanf_float+0x188>
 800a896:	f04f 0a03 	mov.w	sl, #3
 800a89a:	e787      	b.n	800a7ac <_scanf_float+0x188>
 800a89c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	4798      	blx	r3
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f43f aedf 	beq.w	800a66a <_scanf_float+0x46>
 800a8ac:	e6ea      	b.n	800a684 <_scanf_float+0x60>
 800a8ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8b6:	463a      	mov	r2, r7
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	4798      	blx	r3
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	6123      	str	r3, [r4, #16]
 800a8c2:	e6ec      	b.n	800a69e <_scanf_float+0x7a>
 800a8c4:	1e6b      	subs	r3, r5, #1
 800a8c6:	2b06      	cmp	r3, #6
 800a8c8:	d825      	bhi.n	800a916 <_scanf_float+0x2f2>
 800a8ca:	2d02      	cmp	r5, #2
 800a8cc:	d836      	bhi.n	800a93c <_scanf_float+0x318>
 800a8ce:	455e      	cmp	r6, fp
 800a8d0:	f67f aee8 	bls.w	800a6a4 <_scanf_float+0x80>
 800a8d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8dc:	463a      	mov	r2, r7
 800a8de:	4640      	mov	r0, r8
 800a8e0:	4798      	blx	r3
 800a8e2:	6923      	ldr	r3, [r4, #16]
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	6123      	str	r3, [r4, #16]
 800a8e8:	e7f1      	b.n	800a8ce <_scanf_float+0x2aa>
 800a8ea:	9802      	ldr	r0, [sp, #8]
 800a8ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a8f4:	9002      	str	r0, [sp, #8]
 800a8f6:	463a      	mov	r2, r7
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	4798      	blx	r3
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	6123      	str	r3, [r4, #16]
 800a902:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a906:	fa5f fa8a 	uxtb.w	sl, sl
 800a90a:	f1ba 0f02 	cmp.w	sl, #2
 800a90e:	d1ec      	bne.n	800a8ea <_scanf_float+0x2c6>
 800a910:	3d03      	subs	r5, #3
 800a912:	b2ed      	uxtb	r5, r5
 800a914:	1b76      	subs	r6, r6, r5
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	05da      	lsls	r2, r3, #23
 800a91a:	d52f      	bpl.n	800a97c <_scanf_float+0x358>
 800a91c:	055b      	lsls	r3, r3, #21
 800a91e:	d510      	bpl.n	800a942 <_scanf_float+0x31e>
 800a920:	455e      	cmp	r6, fp
 800a922:	f67f aebf 	bls.w	800a6a4 <_scanf_float+0x80>
 800a926:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a92a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a92e:	463a      	mov	r2, r7
 800a930:	4640      	mov	r0, r8
 800a932:	4798      	blx	r3
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	3b01      	subs	r3, #1
 800a938:	6123      	str	r3, [r4, #16]
 800a93a:	e7f1      	b.n	800a920 <_scanf_float+0x2fc>
 800a93c:	46aa      	mov	sl, r5
 800a93e:	9602      	str	r6, [sp, #8]
 800a940:	e7df      	b.n	800a902 <_scanf_float+0x2de>
 800a942:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a946:	6923      	ldr	r3, [r4, #16]
 800a948:	2965      	cmp	r1, #101	; 0x65
 800a94a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a94e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a952:	6123      	str	r3, [r4, #16]
 800a954:	d00c      	beq.n	800a970 <_scanf_float+0x34c>
 800a956:	2945      	cmp	r1, #69	; 0x45
 800a958:	d00a      	beq.n	800a970 <_scanf_float+0x34c>
 800a95a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a95e:	463a      	mov	r2, r7
 800a960:	4640      	mov	r0, r8
 800a962:	4798      	blx	r3
 800a964:	6923      	ldr	r3, [r4, #16]
 800a966:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a96a:	3b01      	subs	r3, #1
 800a96c:	1eb5      	subs	r5, r6, #2
 800a96e:	6123      	str	r3, [r4, #16]
 800a970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a974:	463a      	mov	r2, r7
 800a976:	4640      	mov	r0, r8
 800a978:	4798      	blx	r3
 800a97a:	462e      	mov	r6, r5
 800a97c:	6825      	ldr	r5, [r4, #0]
 800a97e:	f015 0510 	ands.w	r5, r5, #16
 800a982:	d159      	bne.n	800aa38 <_scanf_float+0x414>
 800a984:	7035      	strb	r5, [r6, #0]
 800a986:	6823      	ldr	r3, [r4, #0]
 800a988:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a98c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a990:	d11b      	bne.n	800a9ca <_scanf_float+0x3a6>
 800a992:	9b01      	ldr	r3, [sp, #4]
 800a994:	454b      	cmp	r3, r9
 800a996:	eba3 0209 	sub.w	r2, r3, r9
 800a99a:	d123      	bne.n	800a9e4 <_scanf_float+0x3c0>
 800a99c:	2200      	movs	r2, #0
 800a99e:	4659      	mov	r1, fp
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	f000 fe97 	bl	800b6d4 <_strtod_r>
 800a9a6:	6822      	ldr	r2, [r4, #0]
 800a9a8:	9b03      	ldr	r3, [sp, #12]
 800a9aa:	f012 0f02 	tst.w	r2, #2
 800a9ae:	ec57 6b10 	vmov	r6, r7, d0
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	d021      	beq.n	800a9fa <_scanf_float+0x3d6>
 800a9b6:	9903      	ldr	r1, [sp, #12]
 800a9b8:	1d1a      	adds	r2, r3, #4
 800a9ba:	600a      	str	r2, [r1, #0]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	e9c3 6700 	strd	r6, r7, [r3]
 800a9c2:	68e3      	ldr	r3, [r4, #12]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	60e3      	str	r3, [r4, #12]
 800a9c8:	e66d      	b.n	800a6a6 <_scanf_float+0x82>
 800a9ca:	9b04      	ldr	r3, [sp, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d0e5      	beq.n	800a99c <_scanf_float+0x378>
 800a9d0:	9905      	ldr	r1, [sp, #20]
 800a9d2:	230a      	movs	r3, #10
 800a9d4:	462a      	mov	r2, r5
 800a9d6:	3101      	adds	r1, #1
 800a9d8:	4640      	mov	r0, r8
 800a9da:	f000 ff03 	bl	800b7e4 <_strtol_r>
 800a9de:	9b04      	ldr	r3, [sp, #16]
 800a9e0:	9e05      	ldr	r6, [sp, #20]
 800a9e2:	1ac2      	subs	r2, r0, r3
 800a9e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a9e8:	429e      	cmp	r6, r3
 800a9ea:	bf28      	it	cs
 800a9ec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a9f0:	4912      	ldr	r1, [pc, #72]	; (800aa3c <_scanf_float+0x418>)
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f000 f82c 	bl	800aa50 <siprintf>
 800a9f8:	e7d0      	b.n	800a99c <_scanf_float+0x378>
 800a9fa:	9903      	ldr	r1, [sp, #12]
 800a9fc:	f012 0f04 	tst.w	r2, #4
 800aa00:	f103 0204 	add.w	r2, r3, #4
 800aa04:	600a      	str	r2, [r1, #0]
 800aa06:	d1d9      	bne.n	800a9bc <_scanf_float+0x398>
 800aa08:	f8d3 8000 	ldr.w	r8, [r3]
 800aa0c:	ee10 2a10 	vmov	r2, s0
 800aa10:	ee10 0a10 	vmov	r0, s0
 800aa14:	463b      	mov	r3, r7
 800aa16:	4639      	mov	r1, r7
 800aa18:	f7f6 f8f8 	bl	8000c0c <__aeabi_dcmpun>
 800aa1c:	b128      	cbz	r0, 800aa2a <_scanf_float+0x406>
 800aa1e:	4808      	ldr	r0, [pc, #32]	; (800aa40 <_scanf_float+0x41c>)
 800aa20:	f000 f810 	bl	800aa44 <nanf>
 800aa24:	ed88 0a00 	vstr	s0, [r8]
 800aa28:	e7cb      	b.n	800a9c2 <_scanf_float+0x39e>
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	f7f6 f923 	bl	8000c78 <__aeabi_d2f>
 800aa32:	f8c8 0000 	str.w	r0, [r8]
 800aa36:	e7c4      	b.n	800a9c2 <_scanf_float+0x39e>
 800aa38:	2500      	movs	r5, #0
 800aa3a:	e634      	b.n	800a6a6 <_scanf_float+0x82>
 800aa3c:	0800ddd8 	.word	0x0800ddd8
 800aa40:	0800e1aa 	.word	0x0800e1aa

0800aa44 <nanf>:
 800aa44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aa4c <nanf+0x8>
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	7fc00000 	.word	0x7fc00000

0800aa50 <siprintf>:
 800aa50:	b40e      	push	{r1, r2, r3}
 800aa52:	b500      	push	{lr}
 800aa54:	b09c      	sub	sp, #112	; 0x70
 800aa56:	ab1d      	add	r3, sp, #116	; 0x74
 800aa58:	9002      	str	r0, [sp, #8]
 800aa5a:	9006      	str	r0, [sp, #24]
 800aa5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa60:	4809      	ldr	r0, [pc, #36]	; (800aa88 <siprintf+0x38>)
 800aa62:	9107      	str	r1, [sp, #28]
 800aa64:	9104      	str	r1, [sp, #16]
 800aa66:	4909      	ldr	r1, [pc, #36]	; (800aa8c <siprintf+0x3c>)
 800aa68:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa6c:	9105      	str	r1, [sp, #20]
 800aa6e:	6800      	ldr	r0, [r0, #0]
 800aa70:	9301      	str	r3, [sp, #4]
 800aa72:	a902      	add	r1, sp, #8
 800aa74:	f002 f802 	bl	800ca7c <_svfiprintf_r>
 800aa78:	9b02      	ldr	r3, [sp, #8]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	b01c      	add	sp, #112	; 0x70
 800aa80:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa84:	b003      	add	sp, #12
 800aa86:	4770      	bx	lr
 800aa88:	20000020 	.word	0x20000020
 800aa8c:	ffff0208 	.word	0xffff0208

0800aa90 <sulp>:
 800aa90:	b570      	push	{r4, r5, r6, lr}
 800aa92:	4604      	mov	r4, r0
 800aa94:	460d      	mov	r5, r1
 800aa96:	ec45 4b10 	vmov	d0, r4, r5
 800aa9a:	4616      	mov	r6, r2
 800aa9c:	f001 fd98 	bl	800c5d0 <__ulp>
 800aaa0:	ec51 0b10 	vmov	r0, r1, d0
 800aaa4:	b17e      	cbz	r6, 800aac6 <sulp+0x36>
 800aaa6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aaaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	dd09      	ble.n	800aac6 <sulp+0x36>
 800aab2:	051b      	lsls	r3, r3, #20
 800aab4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aab8:	2400      	movs	r4, #0
 800aaba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aabe:	4622      	mov	r2, r4
 800aac0:	462b      	mov	r3, r5
 800aac2:	f7f5 fe09 	bl	80006d8 <__aeabi_dmul>
 800aac6:	bd70      	pop	{r4, r5, r6, pc}

0800aac8 <_strtod_l>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	ed2d 8b02 	vpush	{d8}
 800aad0:	b09d      	sub	sp, #116	; 0x74
 800aad2:	461f      	mov	r7, r3
 800aad4:	2300      	movs	r3, #0
 800aad6:	9318      	str	r3, [sp, #96]	; 0x60
 800aad8:	4ba2      	ldr	r3, [pc, #648]	; (800ad64 <_strtod_l+0x29c>)
 800aada:	9213      	str	r2, [sp, #76]	; 0x4c
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	9305      	str	r3, [sp, #20]
 800aae0:	4604      	mov	r4, r0
 800aae2:	4618      	mov	r0, r3
 800aae4:	4688      	mov	r8, r1
 800aae6:	f7f5 fbdd 	bl	80002a4 <strlen>
 800aaea:	f04f 0a00 	mov.w	sl, #0
 800aaee:	4605      	mov	r5, r0
 800aaf0:	f04f 0b00 	mov.w	fp, #0
 800aaf4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aaf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aafa:	781a      	ldrb	r2, [r3, #0]
 800aafc:	2a2b      	cmp	r2, #43	; 0x2b
 800aafe:	d04e      	beq.n	800ab9e <_strtod_l+0xd6>
 800ab00:	d83b      	bhi.n	800ab7a <_strtod_l+0xb2>
 800ab02:	2a0d      	cmp	r2, #13
 800ab04:	d834      	bhi.n	800ab70 <_strtod_l+0xa8>
 800ab06:	2a08      	cmp	r2, #8
 800ab08:	d834      	bhi.n	800ab74 <_strtod_l+0xac>
 800ab0a:	2a00      	cmp	r2, #0
 800ab0c:	d03e      	beq.n	800ab8c <_strtod_l+0xc4>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	930a      	str	r3, [sp, #40]	; 0x28
 800ab12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ab14:	7833      	ldrb	r3, [r6, #0]
 800ab16:	2b30      	cmp	r3, #48	; 0x30
 800ab18:	f040 80b0 	bne.w	800ac7c <_strtod_l+0x1b4>
 800ab1c:	7873      	ldrb	r3, [r6, #1]
 800ab1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab22:	2b58      	cmp	r3, #88	; 0x58
 800ab24:	d168      	bne.n	800abf8 <_strtod_l+0x130>
 800ab26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	ab18      	add	r3, sp, #96	; 0x60
 800ab2c:	9702      	str	r7, [sp, #8]
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	4a8d      	ldr	r2, [pc, #564]	; (800ad68 <_strtod_l+0x2a0>)
 800ab32:	ab19      	add	r3, sp, #100	; 0x64
 800ab34:	a917      	add	r1, sp, #92	; 0x5c
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 febe 	bl	800b8b8 <__gethex>
 800ab3c:	f010 0707 	ands.w	r7, r0, #7
 800ab40:	4605      	mov	r5, r0
 800ab42:	d005      	beq.n	800ab50 <_strtod_l+0x88>
 800ab44:	2f06      	cmp	r7, #6
 800ab46:	d12c      	bne.n	800aba2 <_strtod_l+0xda>
 800ab48:	3601      	adds	r6, #1
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ab4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f040 8590 	bne.w	800b678 <_strtod_l+0xbb0>
 800ab58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab5a:	b1eb      	cbz	r3, 800ab98 <_strtod_l+0xd0>
 800ab5c:	4652      	mov	r2, sl
 800ab5e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab62:	ec43 2b10 	vmov	d0, r2, r3
 800ab66:	b01d      	add	sp, #116	; 0x74
 800ab68:	ecbd 8b02 	vpop	{d8}
 800ab6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab70:	2a20      	cmp	r2, #32
 800ab72:	d1cc      	bne.n	800ab0e <_strtod_l+0x46>
 800ab74:	3301      	adds	r3, #1
 800ab76:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab78:	e7be      	b.n	800aaf8 <_strtod_l+0x30>
 800ab7a:	2a2d      	cmp	r2, #45	; 0x2d
 800ab7c:	d1c7      	bne.n	800ab0e <_strtod_l+0x46>
 800ab7e:	2201      	movs	r2, #1
 800ab80:	920a      	str	r2, [sp, #40]	; 0x28
 800ab82:	1c5a      	adds	r2, r3, #1
 800ab84:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab86:	785b      	ldrb	r3, [r3, #1]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1c2      	bne.n	800ab12 <_strtod_l+0x4a>
 800ab8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab8e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f040 856e 	bne.w	800b674 <_strtod_l+0xbac>
 800ab98:	4652      	mov	r2, sl
 800ab9a:	465b      	mov	r3, fp
 800ab9c:	e7e1      	b.n	800ab62 <_strtod_l+0x9a>
 800ab9e:	2200      	movs	r2, #0
 800aba0:	e7ee      	b.n	800ab80 <_strtod_l+0xb8>
 800aba2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aba4:	b13a      	cbz	r2, 800abb6 <_strtod_l+0xee>
 800aba6:	2135      	movs	r1, #53	; 0x35
 800aba8:	a81a      	add	r0, sp, #104	; 0x68
 800abaa:	f001 fe1c 	bl	800c7e6 <__copybits>
 800abae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800abb0:	4620      	mov	r0, r4
 800abb2:	f001 f9db 	bl	800bf6c <_Bfree>
 800abb6:	3f01      	subs	r7, #1
 800abb8:	2f04      	cmp	r7, #4
 800abba:	d806      	bhi.n	800abca <_strtod_l+0x102>
 800abbc:	e8df f007 	tbb	[pc, r7]
 800abc0:	1714030a 	.word	0x1714030a
 800abc4:	0a          	.byte	0x0a
 800abc5:	00          	.byte	0x00
 800abc6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800abca:	0728      	lsls	r0, r5, #28
 800abcc:	d5c0      	bpl.n	800ab50 <_strtod_l+0x88>
 800abce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800abd2:	e7bd      	b.n	800ab50 <_strtod_l+0x88>
 800abd4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800abd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800abda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800abe2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800abe6:	e7f0      	b.n	800abca <_strtod_l+0x102>
 800abe8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ad6c <_strtod_l+0x2a4>
 800abec:	e7ed      	b.n	800abca <_strtod_l+0x102>
 800abee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800abf2:	f04f 3aff 	mov.w	sl, #4294967295
 800abf6:	e7e8      	b.n	800abca <_strtod_l+0x102>
 800abf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	9217      	str	r2, [sp, #92]	; 0x5c
 800abfe:	785b      	ldrb	r3, [r3, #1]
 800ac00:	2b30      	cmp	r3, #48	; 0x30
 800ac02:	d0f9      	beq.n	800abf8 <_strtod_l+0x130>
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d0a3      	beq.n	800ab50 <_strtod_l+0x88>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	f04f 0900 	mov.w	r9, #0
 800ac0e:	9304      	str	r3, [sp, #16]
 800ac10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac12:	9308      	str	r3, [sp, #32]
 800ac14:	f8cd 901c 	str.w	r9, [sp, #28]
 800ac18:	464f      	mov	r7, r9
 800ac1a:	220a      	movs	r2, #10
 800ac1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ac1e:	7806      	ldrb	r6, [r0, #0]
 800ac20:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ac24:	b2d9      	uxtb	r1, r3
 800ac26:	2909      	cmp	r1, #9
 800ac28:	d92a      	bls.n	800ac80 <_strtod_l+0x1b8>
 800ac2a:	9905      	ldr	r1, [sp, #20]
 800ac2c:	462a      	mov	r2, r5
 800ac2e:	f002 f9d3 	bl	800cfd8 <strncmp>
 800ac32:	b398      	cbz	r0, 800ac9c <_strtod_l+0x1d4>
 800ac34:	2000      	movs	r0, #0
 800ac36:	4632      	mov	r2, r6
 800ac38:	463d      	mov	r5, r7
 800ac3a:	9005      	str	r0, [sp, #20]
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2a65      	cmp	r2, #101	; 0x65
 800ac40:	d001      	beq.n	800ac46 <_strtod_l+0x17e>
 800ac42:	2a45      	cmp	r2, #69	; 0x45
 800ac44:	d118      	bne.n	800ac78 <_strtod_l+0x1b0>
 800ac46:	b91d      	cbnz	r5, 800ac50 <_strtod_l+0x188>
 800ac48:	9a04      	ldr	r2, [sp, #16]
 800ac4a:	4302      	orrs	r2, r0
 800ac4c:	d09e      	beq.n	800ab8c <_strtod_l+0xc4>
 800ac4e:	2500      	movs	r5, #0
 800ac50:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ac54:	f108 0201 	add.w	r2, r8, #1
 800ac58:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ac5e:	2a2b      	cmp	r2, #43	; 0x2b
 800ac60:	d075      	beq.n	800ad4e <_strtod_l+0x286>
 800ac62:	2a2d      	cmp	r2, #45	; 0x2d
 800ac64:	d07b      	beq.n	800ad5e <_strtod_l+0x296>
 800ac66:	f04f 0c00 	mov.w	ip, #0
 800ac6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ac6e:	2909      	cmp	r1, #9
 800ac70:	f240 8082 	bls.w	800ad78 <_strtod_l+0x2b0>
 800ac74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ac78:	2600      	movs	r6, #0
 800ac7a:	e09d      	b.n	800adb8 <_strtod_l+0x2f0>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e7c4      	b.n	800ac0a <_strtod_l+0x142>
 800ac80:	2f08      	cmp	r7, #8
 800ac82:	bfd8      	it	le
 800ac84:	9907      	ldrle	r1, [sp, #28]
 800ac86:	f100 0001 	add.w	r0, r0, #1
 800ac8a:	bfda      	itte	le
 800ac8c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac90:	9307      	strle	r3, [sp, #28]
 800ac92:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ac96:	3701      	adds	r7, #1
 800ac98:	9017      	str	r0, [sp, #92]	; 0x5c
 800ac9a:	e7bf      	b.n	800ac1c <_strtod_l+0x154>
 800ac9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac9e:	195a      	adds	r2, r3, r5
 800aca0:	9217      	str	r2, [sp, #92]	; 0x5c
 800aca2:	5d5a      	ldrb	r2, [r3, r5]
 800aca4:	2f00      	cmp	r7, #0
 800aca6:	d037      	beq.n	800ad18 <_strtod_l+0x250>
 800aca8:	9005      	str	r0, [sp, #20]
 800acaa:	463d      	mov	r5, r7
 800acac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800acb0:	2b09      	cmp	r3, #9
 800acb2:	d912      	bls.n	800acda <_strtod_l+0x212>
 800acb4:	2301      	movs	r3, #1
 800acb6:	e7c2      	b.n	800ac3e <_strtod_l+0x176>
 800acb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	9217      	str	r2, [sp, #92]	; 0x5c
 800acbe:	785a      	ldrb	r2, [r3, #1]
 800acc0:	3001      	adds	r0, #1
 800acc2:	2a30      	cmp	r2, #48	; 0x30
 800acc4:	d0f8      	beq.n	800acb8 <_strtod_l+0x1f0>
 800acc6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800acca:	2b08      	cmp	r3, #8
 800accc:	f200 84d9 	bhi.w	800b682 <_strtod_l+0xbba>
 800acd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acd2:	9005      	str	r0, [sp, #20]
 800acd4:	2000      	movs	r0, #0
 800acd6:	9308      	str	r3, [sp, #32]
 800acd8:	4605      	mov	r5, r0
 800acda:	3a30      	subs	r2, #48	; 0x30
 800acdc:	f100 0301 	add.w	r3, r0, #1
 800ace0:	d014      	beq.n	800ad0c <_strtod_l+0x244>
 800ace2:	9905      	ldr	r1, [sp, #20]
 800ace4:	4419      	add	r1, r3
 800ace6:	9105      	str	r1, [sp, #20]
 800ace8:	462b      	mov	r3, r5
 800acea:	eb00 0e05 	add.w	lr, r0, r5
 800acee:	210a      	movs	r1, #10
 800acf0:	4573      	cmp	r3, lr
 800acf2:	d113      	bne.n	800ad1c <_strtod_l+0x254>
 800acf4:	182b      	adds	r3, r5, r0
 800acf6:	2b08      	cmp	r3, #8
 800acf8:	f105 0501 	add.w	r5, r5, #1
 800acfc:	4405      	add	r5, r0
 800acfe:	dc1c      	bgt.n	800ad3a <_strtod_l+0x272>
 800ad00:	9907      	ldr	r1, [sp, #28]
 800ad02:	230a      	movs	r3, #10
 800ad04:	fb03 2301 	mla	r3, r3, r1, r2
 800ad08:	9307      	str	r3, [sp, #28]
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad0e:	1c51      	adds	r1, r2, #1
 800ad10:	9117      	str	r1, [sp, #92]	; 0x5c
 800ad12:	7852      	ldrb	r2, [r2, #1]
 800ad14:	4618      	mov	r0, r3
 800ad16:	e7c9      	b.n	800acac <_strtod_l+0x1e4>
 800ad18:	4638      	mov	r0, r7
 800ad1a:	e7d2      	b.n	800acc2 <_strtod_l+0x1fa>
 800ad1c:	2b08      	cmp	r3, #8
 800ad1e:	dc04      	bgt.n	800ad2a <_strtod_l+0x262>
 800ad20:	9e07      	ldr	r6, [sp, #28]
 800ad22:	434e      	muls	r6, r1
 800ad24:	9607      	str	r6, [sp, #28]
 800ad26:	3301      	adds	r3, #1
 800ad28:	e7e2      	b.n	800acf0 <_strtod_l+0x228>
 800ad2a:	f103 0c01 	add.w	ip, r3, #1
 800ad2e:	f1bc 0f10 	cmp.w	ip, #16
 800ad32:	bfd8      	it	le
 800ad34:	fb01 f909 	mulle.w	r9, r1, r9
 800ad38:	e7f5      	b.n	800ad26 <_strtod_l+0x25e>
 800ad3a:	2d10      	cmp	r5, #16
 800ad3c:	bfdc      	itt	le
 800ad3e:	230a      	movle	r3, #10
 800ad40:	fb03 2909 	mlale	r9, r3, r9, r2
 800ad44:	e7e1      	b.n	800ad0a <_strtod_l+0x242>
 800ad46:	2300      	movs	r3, #0
 800ad48:	9305      	str	r3, [sp, #20]
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e77c      	b.n	800ac48 <_strtod_l+0x180>
 800ad4e:	f04f 0c00 	mov.w	ip, #0
 800ad52:	f108 0202 	add.w	r2, r8, #2
 800ad56:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad58:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ad5c:	e785      	b.n	800ac6a <_strtod_l+0x1a2>
 800ad5e:	f04f 0c01 	mov.w	ip, #1
 800ad62:	e7f6      	b.n	800ad52 <_strtod_l+0x28a>
 800ad64:	0800dfb8 	.word	0x0800dfb8
 800ad68:	0800ddec 	.word	0x0800ddec
 800ad6c:	7ff00000 	.word	0x7ff00000
 800ad70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad72:	1c51      	adds	r1, r2, #1
 800ad74:	9117      	str	r1, [sp, #92]	; 0x5c
 800ad76:	7852      	ldrb	r2, [r2, #1]
 800ad78:	2a30      	cmp	r2, #48	; 0x30
 800ad7a:	d0f9      	beq.n	800ad70 <_strtod_l+0x2a8>
 800ad7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ad80:	2908      	cmp	r1, #8
 800ad82:	f63f af79 	bhi.w	800ac78 <_strtod_l+0x1b0>
 800ad86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ad8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad8c:	9206      	str	r2, [sp, #24]
 800ad8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad90:	1c51      	adds	r1, r2, #1
 800ad92:	9117      	str	r1, [sp, #92]	; 0x5c
 800ad94:	7852      	ldrb	r2, [r2, #1]
 800ad96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ad9a:	2e09      	cmp	r6, #9
 800ad9c:	d937      	bls.n	800ae0e <_strtod_l+0x346>
 800ad9e:	9e06      	ldr	r6, [sp, #24]
 800ada0:	1b89      	subs	r1, r1, r6
 800ada2:	2908      	cmp	r1, #8
 800ada4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ada8:	dc02      	bgt.n	800adb0 <_strtod_l+0x2e8>
 800adaa:	4576      	cmp	r6, lr
 800adac:	bfa8      	it	ge
 800adae:	4676      	movge	r6, lr
 800adb0:	f1bc 0f00 	cmp.w	ip, #0
 800adb4:	d000      	beq.n	800adb8 <_strtod_l+0x2f0>
 800adb6:	4276      	negs	r6, r6
 800adb8:	2d00      	cmp	r5, #0
 800adba:	d14d      	bne.n	800ae58 <_strtod_l+0x390>
 800adbc:	9904      	ldr	r1, [sp, #16]
 800adbe:	4301      	orrs	r1, r0
 800adc0:	f47f aec6 	bne.w	800ab50 <_strtod_l+0x88>
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f47f aee1 	bne.w	800ab8c <_strtod_l+0xc4>
 800adca:	2a69      	cmp	r2, #105	; 0x69
 800adcc:	d027      	beq.n	800ae1e <_strtod_l+0x356>
 800adce:	dc24      	bgt.n	800ae1a <_strtod_l+0x352>
 800add0:	2a49      	cmp	r2, #73	; 0x49
 800add2:	d024      	beq.n	800ae1e <_strtod_l+0x356>
 800add4:	2a4e      	cmp	r2, #78	; 0x4e
 800add6:	f47f aed9 	bne.w	800ab8c <_strtod_l+0xc4>
 800adda:	499f      	ldr	r1, [pc, #636]	; (800b058 <_strtod_l+0x590>)
 800addc:	a817      	add	r0, sp, #92	; 0x5c
 800adde:	f000 ffc3 	bl	800bd68 <__match>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	f43f aed2 	beq.w	800ab8c <_strtod_l+0xc4>
 800ade8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	2b28      	cmp	r3, #40	; 0x28
 800adee:	d12d      	bne.n	800ae4c <_strtod_l+0x384>
 800adf0:	499a      	ldr	r1, [pc, #616]	; (800b05c <_strtod_l+0x594>)
 800adf2:	aa1a      	add	r2, sp, #104	; 0x68
 800adf4:	a817      	add	r0, sp, #92	; 0x5c
 800adf6:	f000 ffcb 	bl	800bd90 <__hexnan>
 800adfa:	2805      	cmp	r0, #5
 800adfc:	d126      	bne.n	800ae4c <_strtod_l+0x384>
 800adfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ae04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ae08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ae0c:	e6a0      	b.n	800ab50 <_strtod_l+0x88>
 800ae0e:	210a      	movs	r1, #10
 800ae10:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ae14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ae18:	e7b9      	b.n	800ad8e <_strtod_l+0x2c6>
 800ae1a:	2a6e      	cmp	r2, #110	; 0x6e
 800ae1c:	e7db      	b.n	800add6 <_strtod_l+0x30e>
 800ae1e:	4990      	ldr	r1, [pc, #576]	; (800b060 <_strtod_l+0x598>)
 800ae20:	a817      	add	r0, sp, #92	; 0x5c
 800ae22:	f000 ffa1 	bl	800bd68 <__match>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f43f aeb0 	beq.w	800ab8c <_strtod_l+0xc4>
 800ae2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae2e:	498d      	ldr	r1, [pc, #564]	; (800b064 <_strtod_l+0x59c>)
 800ae30:	3b01      	subs	r3, #1
 800ae32:	a817      	add	r0, sp, #92	; 0x5c
 800ae34:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae36:	f000 ff97 	bl	800bd68 <__match>
 800ae3a:	b910      	cbnz	r0, 800ae42 <_strtod_l+0x37a>
 800ae3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae3e:	3301      	adds	r3, #1
 800ae40:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae42:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b074 <_strtod_l+0x5ac>
 800ae46:	f04f 0a00 	mov.w	sl, #0
 800ae4a:	e681      	b.n	800ab50 <_strtod_l+0x88>
 800ae4c:	4886      	ldr	r0, [pc, #536]	; (800b068 <_strtod_l+0x5a0>)
 800ae4e:	f002 f8ab 	bl	800cfa8 <nan>
 800ae52:	ec5b ab10 	vmov	sl, fp, d0
 800ae56:	e67b      	b.n	800ab50 <_strtod_l+0x88>
 800ae58:	9b05      	ldr	r3, [sp, #20]
 800ae5a:	9807      	ldr	r0, [sp, #28]
 800ae5c:	1af3      	subs	r3, r6, r3
 800ae5e:	2f00      	cmp	r7, #0
 800ae60:	bf08      	it	eq
 800ae62:	462f      	moveq	r7, r5
 800ae64:	2d10      	cmp	r5, #16
 800ae66:	9306      	str	r3, [sp, #24]
 800ae68:	46a8      	mov	r8, r5
 800ae6a:	bfa8      	it	ge
 800ae6c:	f04f 0810 	movge.w	r8, #16
 800ae70:	f7f5 fbb8 	bl	80005e4 <__aeabi_ui2d>
 800ae74:	2d09      	cmp	r5, #9
 800ae76:	4682      	mov	sl, r0
 800ae78:	468b      	mov	fp, r1
 800ae7a:	dd13      	ble.n	800aea4 <_strtod_l+0x3dc>
 800ae7c:	4b7b      	ldr	r3, [pc, #492]	; (800b06c <_strtod_l+0x5a4>)
 800ae7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ae82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae86:	f7f5 fc27 	bl	80006d8 <__aeabi_dmul>
 800ae8a:	4682      	mov	sl, r0
 800ae8c:	4648      	mov	r0, r9
 800ae8e:	468b      	mov	fp, r1
 800ae90:	f7f5 fba8 	bl	80005e4 <__aeabi_ui2d>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	4650      	mov	r0, sl
 800ae9a:	4659      	mov	r1, fp
 800ae9c:	f7f5 fa66 	bl	800036c <__adddf3>
 800aea0:	4682      	mov	sl, r0
 800aea2:	468b      	mov	fp, r1
 800aea4:	2d0f      	cmp	r5, #15
 800aea6:	dc38      	bgt.n	800af1a <_strtod_l+0x452>
 800aea8:	9b06      	ldr	r3, [sp, #24]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f43f ae50 	beq.w	800ab50 <_strtod_l+0x88>
 800aeb0:	dd24      	ble.n	800aefc <_strtod_l+0x434>
 800aeb2:	2b16      	cmp	r3, #22
 800aeb4:	dc0b      	bgt.n	800aece <_strtod_l+0x406>
 800aeb6:	496d      	ldr	r1, [pc, #436]	; (800b06c <_strtod_l+0x5a4>)
 800aeb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec0:	4652      	mov	r2, sl
 800aec2:	465b      	mov	r3, fp
 800aec4:	f7f5 fc08 	bl	80006d8 <__aeabi_dmul>
 800aec8:	4682      	mov	sl, r0
 800aeca:	468b      	mov	fp, r1
 800aecc:	e640      	b.n	800ab50 <_strtod_l+0x88>
 800aece:	9a06      	ldr	r2, [sp, #24]
 800aed0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aed4:	4293      	cmp	r3, r2
 800aed6:	db20      	blt.n	800af1a <_strtod_l+0x452>
 800aed8:	4c64      	ldr	r4, [pc, #400]	; (800b06c <_strtod_l+0x5a4>)
 800aeda:	f1c5 050f 	rsb	r5, r5, #15
 800aede:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aee2:	4652      	mov	r2, sl
 800aee4:	465b      	mov	r3, fp
 800aee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeea:	f7f5 fbf5 	bl	80006d8 <__aeabi_dmul>
 800aeee:	9b06      	ldr	r3, [sp, #24]
 800aef0:	1b5d      	subs	r5, r3, r5
 800aef2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aef6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aefa:	e7e3      	b.n	800aec4 <_strtod_l+0x3fc>
 800aefc:	9b06      	ldr	r3, [sp, #24]
 800aefe:	3316      	adds	r3, #22
 800af00:	db0b      	blt.n	800af1a <_strtod_l+0x452>
 800af02:	9b05      	ldr	r3, [sp, #20]
 800af04:	1b9e      	subs	r6, r3, r6
 800af06:	4b59      	ldr	r3, [pc, #356]	; (800b06c <_strtod_l+0x5a4>)
 800af08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800af0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af10:	4650      	mov	r0, sl
 800af12:	4659      	mov	r1, fp
 800af14:	f7f5 fd0a 	bl	800092c <__aeabi_ddiv>
 800af18:	e7d6      	b.n	800aec8 <_strtod_l+0x400>
 800af1a:	9b06      	ldr	r3, [sp, #24]
 800af1c:	eba5 0808 	sub.w	r8, r5, r8
 800af20:	4498      	add	r8, r3
 800af22:	f1b8 0f00 	cmp.w	r8, #0
 800af26:	dd74      	ble.n	800b012 <_strtod_l+0x54a>
 800af28:	f018 030f 	ands.w	r3, r8, #15
 800af2c:	d00a      	beq.n	800af44 <_strtod_l+0x47c>
 800af2e:	494f      	ldr	r1, [pc, #316]	; (800b06c <_strtod_l+0x5a4>)
 800af30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af34:	4652      	mov	r2, sl
 800af36:	465b      	mov	r3, fp
 800af38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af3c:	f7f5 fbcc 	bl	80006d8 <__aeabi_dmul>
 800af40:	4682      	mov	sl, r0
 800af42:	468b      	mov	fp, r1
 800af44:	f038 080f 	bics.w	r8, r8, #15
 800af48:	d04f      	beq.n	800afea <_strtod_l+0x522>
 800af4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800af4e:	dd22      	ble.n	800af96 <_strtod_l+0x4ce>
 800af50:	2500      	movs	r5, #0
 800af52:	462e      	mov	r6, r5
 800af54:	9507      	str	r5, [sp, #28]
 800af56:	9505      	str	r5, [sp, #20]
 800af58:	2322      	movs	r3, #34	; 0x22
 800af5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b074 <_strtod_l+0x5ac>
 800af5e:	6023      	str	r3, [r4, #0]
 800af60:	f04f 0a00 	mov.w	sl, #0
 800af64:	9b07      	ldr	r3, [sp, #28]
 800af66:	2b00      	cmp	r3, #0
 800af68:	f43f adf2 	beq.w	800ab50 <_strtod_l+0x88>
 800af6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af6e:	4620      	mov	r0, r4
 800af70:	f000 fffc 	bl	800bf6c <_Bfree>
 800af74:	9905      	ldr	r1, [sp, #20]
 800af76:	4620      	mov	r0, r4
 800af78:	f000 fff8 	bl	800bf6c <_Bfree>
 800af7c:	4631      	mov	r1, r6
 800af7e:	4620      	mov	r0, r4
 800af80:	f000 fff4 	bl	800bf6c <_Bfree>
 800af84:	9907      	ldr	r1, [sp, #28]
 800af86:	4620      	mov	r0, r4
 800af88:	f000 fff0 	bl	800bf6c <_Bfree>
 800af8c:	4629      	mov	r1, r5
 800af8e:	4620      	mov	r0, r4
 800af90:	f000 ffec 	bl	800bf6c <_Bfree>
 800af94:	e5dc      	b.n	800ab50 <_strtod_l+0x88>
 800af96:	4b36      	ldr	r3, [pc, #216]	; (800b070 <_strtod_l+0x5a8>)
 800af98:	9304      	str	r3, [sp, #16]
 800af9a:	2300      	movs	r3, #0
 800af9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800afa0:	4650      	mov	r0, sl
 800afa2:	4659      	mov	r1, fp
 800afa4:	4699      	mov	r9, r3
 800afa6:	f1b8 0f01 	cmp.w	r8, #1
 800afaa:	dc21      	bgt.n	800aff0 <_strtod_l+0x528>
 800afac:	b10b      	cbz	r3, 800afb2 <_strtod_l+0x4ea>
 800afae:	4682      	mov	sl, r0
 800afb0:	468b      	mov	fp, r1
 800afb2:	4b2f      	ldr	r3, [pc, #188]	; (800b070 <_strtod_l+0x5a8>)
 800afb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800afb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800afbc:	4652      	mov	r2, sl
 800afbe:	465b      	mov	r3, fp
 800afc0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800afc4:	f7f5 fb88 	bl	80006d8 <__aeabi_dmul>
 800afc8:	4b2a      	ldr	r3, [pc, #168]	; (800b074 <_strtod_l+0x5ac>)
 800afca:	460a      	mov	r2, r1
 800afcc:	400b      	ands	r3, r1
 800afce:	492a      	ldr	r1, [pc, #168]	; (800b078 <_strtod_l+0x5b0>)
 800afd0:	428b      	cmp	r3, r1
 800afd2:	4682      	mov	sl, r0
 800afd4:	d8bc      	bhi.n	800af50 <_strtod_l+0x488>
 800afd6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800afda:	428b      	cmp	r3, r1
 800afdc:	bf86      	itte	hi
 800afde:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b07c <_strtod_l+0x5b4>
 800afe2:	f04f 3aff 	movhi.w	sl, #4294967295
 800afe6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800afea:	2300      	movs	r3, #0
 800afec:	9304      	str	r3, [sp, #16]
 800afee:	e084      	b.n	800b0fa <_strtod_l+0x632>
 800aff0:	f018 0f01 	tst.w	r8, #1
 800aff4:	d005      	beq.n	800b002 <_strtod_l+0x53a>
 800aff6:	9b04      	ldr	r3, [sp, #16]
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f7f5 fb6c 	bl	80006d8 <__aeabi_dmul>
 800b000:	2301      	movs	r3, #1
 800b002:	9a04      	ldr	r2, [sp, #16]
 800b004:	3208      	adds	r2, #8
 800b006:	f109 0901 	add.w	r9, r9, #1
 800b00a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b00e:	9204      	str	r2, [sp, #16]
 800b010:	e7c9      	b.n	800afa6 <_strtod_l+0x4de>
 800b012:	d0ea      	beq.n	800afea <_strtod_l+0x522>
 800b014:	f1c8 0800 	rsb	r8, r8, #0
 800b018:	f018 020f 	ands.w	r2, r8, #15
 800b01c:	d00a      	beq.n	800b034 <_strtod_l+0x56c>
 800b01e:	4b13      	ldr	r3, [pc, #76]	; (800b06c <_strtod_l+0x5a4>)
 800b020:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b024:	4650      	mov	r0, sl
 800b026:	4659      	mov	r1, fp
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	f7f5 fc7e 	bl	800092c <__aeabi_ddiv>
 800b030:	4682      	mov	sl, r0
 800b032:	468b      	mov	fp, r1
 800b034:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b038:	d0d7      	beq.n	800afea <_strtod_l+0x522>
 800b03a:	f1b8 0f1f 	cmp.w	r8, #31
 800b03e:	dd1f      	ble.n	800b080 <_strtod_l+0x5b8>
 800b040:	2500      	movs	r5, #0
 800b042:	462e      	mov	r6, r5
 800b044:	9507      	str	r5, [sp, #28]
 800b046:	9505      	str	r5, [sp, #20]
 800b048:	2322      	movs	r3, #34	; 0x22
 800b04a:	f04f 0a00 	mov.w	sl, #0
 800b04e:	f04f 0b00 	mov.w	fp, #0
 800b052:	6023      	str	r3, [r4, #0]
 800b054:	e786      	b.n	800af64 <_strtod_l+0x49c>
 800b056:	bf00      	nop
 800b058:	0800dde6 	.word	0x0800dde6
 800b05c:	0800de00 	.word	0x0800de00
 800b060:	0800dddd 	.word	0x0800dddd
 800b064:	0800dde0 	.word	0x0800dde0
 800b068:	0800e1aa 	.word	0x0800e1aa
 800b06c:	0800e068 	.word	0x0800e068
 800b070:	0800e040 	.word	0x0800e040
 800b074:	7ff00000 	.word	0x7ff00000
 800b078:	7ca00000 	.word	0x7ca00000
 800b07c:	7fefffff 	.word	0x7fefffff
 800b080:	f018 0310 	ands.w	r3, r8, #16
 800b084:	bf18      	it	ne
 800b086:	236a      	movne	r3, #106	; 0x6a
 800b088:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b438 <_strtod_l+0x970>
 800b08c:	9304      	str	r3, [sp, #16]
 800b08e:	4650      	mov	r0, sl
 800b090:	4659      	mov	r1, fp
 800b092:	2300      	movs	r3, #0
 800b094:	f018 0f01 	tst.w	r8, #1
 800b098:	d004      	beq.n	800b0a4 <_strtod_l+0x5dc>
 800b09a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b09e:	f7f5 fb1b 	bl	80006d8 <__aeabi_dmul>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b0a8:	f109 0908 	add.w	r9, r9, #8
 800b0ac:	d1f2      	bne.n	800b094 <_strtod_l+0x5cc>
 800b0ae:	b10b      	cbz	r3, 800b0b4 <_strtod_l+0x5ec>
 800b0b0:	4682      	mov	sl, r0
 800b0b2:	468b      	mov	fp, r1
 800b0b4:	9b04      	ldr	r3, [sp, #16]
 800b0b6:	b1c3      	cbz	r3, 800b0ea <_strtod_l+0x622>
 800b0b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b0bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	4659      	mov	r1, fp
 800b0c4:	dd11      	ble.n	800b0ea <_strtod_l+0x622>
 800b0c6:	2b1f      	cmp	r3, #31
 800b0c8:	f340 8124 	ble.w	800b314 <_strtod_l+0x84c>
 800b0cc:	2b34      	cmp	r3, #52	; 0x34
 800b0ce:	bfde      	ittt	le
 800b0d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b0d4:	f04f 33ff 	movle.w	r3, #4294967295
 800b0d8:	fa03 f202 	lslle.w	r2, r3, r2
 800b0dc:	f04f 0a00 	mov.w	sl, #0
 800b0e0:	bfcc      	ite	gt
 800b0e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b0e6:	ea02 0b01 	andle.w	fp, r2, r1
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4650      	mov	r0, sl
 800b0f0:	4659      	mov	r1, fp
 800b0f2:	f7f5 fd59 	bl	8000ba8 <__aeabi_dcmpeq>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d1a2      	bne.n	800b040 <_strtod_l+0x578>
 800b0fa:	9b07      	ldr	r3, [sp, #28]
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	9908      	ldr	r1, [sp, #32]
 800b100:	462b      	mov	r3, r5
 800b102:	463a      	mov	r2, r7
 800b104:	4620      	mov	r0, r4
 800b106:	f000 ff99 	bl	800c03c <__s2b>
 800b10a:	9007      	str	r0, [sp, #28]
 800b10c:	2800      	cmp	r0, #0
 800b10e:	f43f af1f 	beq.w	800af50 <_strtod_l+0x488>
 800b112:	9b05      	ldr	r3, [sp, #20]
 800b114:	1b9e      	subs	r6, r3, r6
 800b116:	9b06      	ldr	r3, [sp, #24]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	bfb4      	ite	lt
 800b11c:	4633      	movlt	r3, r6
 800b11e:	2300      	movge	r3, #0
 800b120:	930c      	str	r3, [sp, #48]	; 0x30
 800b122:	9b06      	ldr	r3, [sp, #24]
 800b124:	2500      	movs	r5, #0
 800b126:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b12a:	9312      	str	r3, [sp, #72]	; 0x48
 800b12c:	462e      	mov	r6, r5
 800b12e:	9b07      	ldr	r3, [sp, #28]
 800b130:	4620      	mov	r0, r4
 800b132:	6859      	ldr	r1, [r3, #4]
 800b134:	f000 feda 	bl	800beec <_Balloc>
 800b138:	9005      	str	r0, [sp, #20]
 800b13a:	2800      	cmp	r0, #0
 800b13c:	f43f af0c 	beq.w	800af58 <_strtod_l+0x490>
 800b140:	9b07      	ldr	r3, [sp, #28]
 800b142:	691a      	ldr	r2, [r3, #16]
 800b144:	3202      	adds	r2, #2
 800b146:	f103 010c 	add.w	r1, r3, #12
 800b14a:	0092      	lsls	r2, r2, #2
 800b14c:	300c      	adds	r0, #12
 800b14e:	f7ff fa53 	bl	800a5f8 <memcpy>
 800b152:	ec4b ab10 	vmov	d0, sl, fp
 800b156:	aa1a      	add	r2, sp, #104	; 0x68
 800b158:	a919      	add	r1, sp, #100	; 0x64
 800b15a:	4620      	mov	r0, r4
 800b15c:	f001 fab4 	bl	800c6c8 <__d2b>
 800b160:	ec4b ab18 	vmov	d8, sl, fp
 800b164:	9018      	str	r0, [sp, #96]	; 0x60
 800b166:	2800      	cmp	r0, #0
 800b168:	f43f aef6 	beq.w	800af58 <_strtod_l+0x490>
 800b16c:	2101      	movs	r1, #1
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 fffe 	bl	800c170 <__i2b>
 800b174:	4606      	mov	r6, r0
 800b176:	2800      	cmp	r0, #0
 800b178:	f43f aeee 	beq.w	800af58 <_strtod_l+0x490>
 800b17c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b17e:	9904      	ldr	r1, [sp, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	bfab      	itete	ge
 800b184:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b186:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b188:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b18a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b18e:	bfac      	ite	ge
 800b190:	eb03 0902 	addge.w	r9, r3, r2
 800b194:	1ad7      	sublt	r7, r2, r3
 800b196:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b198:	eba3 0801 	sub.w	r8, r3, r1
 800b19c:	4490      	add	r8, r2
 800b19e:	4ba1      	ldr	r3, [pc, #644]	; (800b424 <_strtod_l+0x95c>)
 800b1a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1a4:	4598      	cmp	r8, r3
 800b1a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b1aa:	f280 80c7 	bge.w	800b33c <_strtod_l+0x874>
 800b1ae:	eba3 0308 	sub.w	r3, r3, r8
 800b1b2:	2b1f      	cmp	r3, #31
 800b1b4:	eba2 0203 	sub.w	r2, r2, r3
 800b1b8:	f04f 0101 	mov.w	r1, #1
 800b1bc:	f300 80b1 	bgt.w	800b322 <_strtod_l+0x85a>
 800b1c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b1c4:	930d      	str	r3, [sp, #52]	; 0x34
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9308      	str	r3, [sp, #32]
 800b1ca:	eb09 0802 	add.w	r8, r9, r2
 800b1ce:	9b04      	ldr	r3, [sp, #16]
 800b1d0:	45c1      	cmp	r9, r8
 800b1d2:	4417      	add	r7, r2
 800b1d4:	441f      	add	r7, r3
 800b1d6:	464b      	mov	r3, r9
 800b1d8:	bfa8      	it	ge
 800b1da:	4643      	movge	r3, r8
 800b1dc:	42bb      	cmp	r3, r7
 800b1de:	bfa8      	it	ge
 800b1e0:	463b      	movge	r3, r7
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	bfc2      	ittt	gt
 800b1e6:	eba8 0803 	subgt.w	r8, r8, r3
 800b1ea:	1aff      	subgt	r7, r7, r3
 800b1ec:	eba9 0903 	subgt.w	r9, r9, r3
 800b1f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	dd17      	ble.n	800b226 <_strtod_l+0x75e>
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f001 f878 	bl	800c2f0 <__pow5mult>
 800b200:	4606      	mov	r6, r0
 800b202:	2800      	cmp	r0, #0
 800b204:	f43f aea8 	beq.w	800af58 <_strtod_l+0x490>
 800b208:	4601      	mov	r1, r0
 800b20a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b20c:	4620      	mov	r0, r4
 800b20e:	f000 ffc5 	bl	800c19c <__multiply>
 800b212:	900b      	str	r0, [sp, #44]	; 0x2c
 800b214:	2800      	cmp	r0, #0
 800b216:	f43f ae9f 	beq.w	800af58 <_strtod_l+0x490>
 800b21a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b21c:	4620      	mov	r0, r4
 800b21e:	f000 fea5 	bl	800bf6c <_Bfree>
 800b222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b224:	9318      	str	r3, [sp, #96]	; 0x60
 800b226:	f1b8 0f00 	cmp.w	r8, #0
 800b22a:	f300 808c 	bgt.w	800b346 <_strtod_l+0x87e>
 800b22e:	9b06      	ldr	r3, [sp, #24]
 800b230:	2b00      	cmp	r3, #0
 800b232:	dd08      	ble.n	800b246 <_strtod_l+0x77e>
 800b234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b236:	9905      	ldr	r1, [sp, #20]
 800b238:	4620      	mov	r0, r4
 800b23a:	f001 f859 	bl	800c2f0 <__pow5mult>
 800b23e:	9005      	str	r0, [sp, #20]
 800b240:	2800      	cmp	r0, #0
 800b242:	f43f ae89 	beq.w	800af58 <_strtod_l+0x490>
 800b246:	2f00      	cmp	r7, #0
 800b248:	dd08      	ble.n	800b25c <_strtod_l+0x794>
 800b24a:	9905      	ldr	r1, [sp, #20]
 800b24c:	463a      	mov	r2, r7
 800b24e:	4620      	mov	r0, r4
 800b250:	f001 f8a8 	bl	800c3a4 <__lshift>
 800b254:	9005      	str	r0, [sp, #20]
 800b256:	2800      	cmp	r0, #0
 800b258:	f43f ae7e 	beq.w	800af58 <_strtod_l+0x490>
 800b25c:	f1b9 0f00 	cmp.w	r9, #0
 800b260:	dd08      	ble.n	800b274 <_strtod_l+0x7ac>
 800b262:	4631      	mov	r1, r6
 800b264:	464a      	mov	r2, r9
 800b266:	4620      	mov	r0, r4
 800b268:	f001 f89c 	bl	800c3a4 <__lshift>
 800b26c:	4606      	mov	r6, r0
 800b26e:	2800      	cmp	r0, #0
 800b270:	f43f ae72 	beq.w	800af58 <_strtod_l+0x490>
 800b274:	9a05      	ldr	r2, [sp, #20]
 800b276:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b278:	4620      	mov	r0, r4
 800b27a:	f001 f91f 	bl	800c4bc <__mdiff>
 800b27e:	4605      	mov	r5, r0
 800b280:	2800      	cmp	r0, #0
 800b282:	f43f ae69 	beq.w	800af58 <_strtod_l+0x490>
 800b286:	68c3      	ldr	r3, [r0, #12]
 800b288:	930b      	str	r3, [sp, #44]	; 0x2c
 800b28a:	2300      	movs	r3, #0
 800b28c:	60c3      	str	r3, [r0, #12]
 800b28e:	4631      	mov	r1, r6
 800b290:	f001 f8f8 	bl	800c484 <__mcmp>
 800b294:	2800      	cmp	r0, #0
 800b296:	da60      	bge.n	800b35a <_strtod_l+0x892>
 800b298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b29a:	ea53 030a 	orrs.w	r3, r3, sl
 800b29e:	f040 8082 	bne.w	800b3a6 <_strtod_l+0x8de>
 800b2a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d17d      	bne.n	800b3a6 <_strtod_l+0x8de>
 800b2aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2ae:	0d1b      	lsrs	r3, r3, #20
 800b2b0:	051b      	lsls	r3, r3, #20
 800b2b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b2b6:	d976      	bls.n	800b3a6 <_strtod_l+0x8de>
 800b2b8:	696b      	ldr	r3, [r5, #20]
 800b2ba:	b913      	cbnz	r3, 800b2c2 <_strtod_l+0x7fa>
 800b2bc:	692b      	ldr	r3, [r5, #16]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	dd71      	ble.n	800b3a6 <_strtod_l+0x8de>
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f001 f86c 	bl	800c3a4 <__lshift>
 800b2cc:	4631      	mov	r1, r6
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	f001 f8d8 	bl	800c484 <__mcmp>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	dd66      	ble.n	800b3a6 <_strtod_l+0x8de>
 800b2d8:	9904      	ldr	r1, [sp, #16]
 800b2da:	4a53      	ldr	r2, [pc, #332]	; (800b428 <_strtod_l+0x960>)
 800b2dc:	465b      	mov	r3, fp
 800b2de:	2900      	cmp	r1, #0
 800b2e0:	f000 8081 	beq.w	800b3e6 <_strtod_l+0x91e>
 800b2e4:	ea02 010b 	and.w	r1, r2, fp
 800b2e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b2ec:	dc7b      	bgt.n	800b3e6 <_strtod_l+0x91e>
 800b2ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b2f2:	f77f aea9 	ble.w	800b048 <_strtod_l+0x580>
 800b2f6:	4b4d      	ldr	r3, [pc, #308]	; (800b42c <_strtod_l+0x964>)
 800b2f8:	4650      	mov	r0, sl
 800b2fa:	4659      	mov	r1, fp
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f7f5 f9eb 	bl	80006d8 <__aeabi_dmul>
 800b302:	460b      	mov	r3, r1
 800b304:	4303      	orrs	r3, r0
 800b306:	bf08      	it	eq
 800b308:	2322      	moveq	r3, #34	; 0x22
 800b30a:	4682      	mov	sl, r0
 800b30c:	468b      	mov	fp, r1
 800b30e:	bf08      	it	eq
 800b310:	6023      	streq	r3, [r4, #0]
 800b312:	e62b      	b.n	800af6c <_strtod_l+0x4a4>
 800b314:	f04f 32ff 	mov.w	r2, #4294967295
 800b318:	fa02 f303 	lsl.w	r3, r2, r3
 800b31c:	ea03 0a0a 	and.w	sl, r3, sl
 800b320:	e6e3      	b.n	800b0ea <_strtod_l+0x622>
 800b322:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b326:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b32a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b32e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b332:	fa01 f308 	lsl.w	r3, r1, r8
 800b336:	9308      	str	r3, [sp, #32]
 800b338:	910d      	str	r1, [sp, #52]	; 0x34
 800b33a:	e746      	b.n	800b1ca <_strtod_l+0x702>
 800b33c:	2300      	movs	r3, #0
 800b33e:	9308      	str	r3, [sp, #32]
 800b340:	2301      	movs	r3, #1
 800b342:	930d      	str	r3, [sp, #52]	; 0x34
 800b344:	e741      	b.n	800b1ca <_strtod_l+0x702>
 800b346:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b348:	4642      	mov	r2, r8
 800b34a:	4620      	mov	r0, r4
 800b34c:	f001 f82a 	bl	800c3a4 <__lshift>
 800b350:	9018      	str	r0, [sp, #96]	; 0x60
 800b352:	2800      	cmp	r0, #0
 800b354:	f47f af6b 	bne.w	800b22e <_strtod_l+0x766>
 800b358:	e5fe      	b.n	800af58 <_strtod_l+0x490>
 800b35a:	465f      	mov	r7, fp
 800b35c:	d16e      	bne.n	800b43c <_strtod_l+0x974>
 800b35e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b360:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b364:	b342      	cbz	r2, 800b3b8 <_strtod_l+0x8f0>
 800b366:	4a32      	ldr	r2, [pc, #200]	; (800b430 <_strtod_l+0x968>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d128      	bne.n	800b3be <_strtod_l+0x8f6>
 800b36c:	9b04      	ldr	r3, [sp, #16]
 800b36e:	4651      	mov	r1, sl
 800b370:	b1eb      	cbz	r3, 800b3ae <_strtod_l+0x8e6>
 800b372:	4b2d      	ldr	r3, [pc, #180]	; (800b428 <_strtod_l+0x960>)
 800b374:	403b      	ands	r3, r7
 800b376:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b37a:	f04f 32ff 	mov.w	r2, #4294967295
 800b37e:	d819      	bhi.n	800b3b4 <_strtod_l+0x8ec>
 800b380:	0d1b      	lsrs	r3, r3, #20
 800b382:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b386:	fa02 f303 	lsl.w	r3, r2, r3
 800b38a:	4299      	cmp	r1, r3
 800b38c:	d117      	bne.n	800b3be <_strtod_l+0x8f6>
 800b38e:	4b29      	ldr	r3, [pc, #164]	; (800b434 <_strtod_l+0x96c>)
 800b390:	429f      	cmp	r7, r3
 800b392:	d102      	bne.n	800b39a <_strtod_l+0x8d2>
 800b394:	3101      	adds	r1, #1
 800b396:	f43f addf 	beq.w	800af58 <_strtod_l+0x490>
 800b39a:	4b23      	ldr	r3, [pc, #140]	; (800b428 <_strtod_l+0x960>)
 800b39c:	403b      	ands	r3, r7
 800b39e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b3a2:	f04f 0a00 	mov.w	sl, #0
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1a4      	bne.n	800b2f6 <_strtod_l+0x82e>
 800b3ac:	e5de      	b.n	800af6c <_strtod_l+0x4a4>
 800b3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b2:	e7ea      	b.n	800b38a <_strtod_l+0x8c2>
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	e7e8      	b.n	800b38a <_strtod_l+0x8c2>
 800b3b8:	ea53 030a 	orrs.w	r3, r3, sl
 800b3bc:	d08c      	beq.n	800b2d8 <_strtod_l+0x810>
 800b3be:	9b08      	ldr	r3, [sp, #32]
 800b3c0:	b1db      	cbz	r3, 800b3fa <_strtod_l+0x932>
 800b3c2:	423b      	tst	r3, r7
 800b3c4:	d0ef      	beq.n	800b3a6 <_strtod_l+0x8de>
 800b3c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3c8:	9a04      	ldr	r2, [sp, #16]
 800b3ca:	4650      	mov	r0, sl
 800b3cc:	4659      	mov	r1, fp
 800b3ce:	b1c3      	cbz	r3, 800b402 <_strtod_l+0x93a>
 800b3d0:	f7ff fb5e 	bl	800aa90 <sulp>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	ec51 0b18 	vmov	r0, r1, d8
 800b3dc:	f7f4 ffc6 	bl	800036c <__adddf3>
 800b3e0:	4682      	mov	sl, r0
 800b3e2:	468b      	mov	fp, r1
 800b3e4:	e7df      	b.n	800b3a6 <_strtod_l+0x8de>
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b3ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b3f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b3f4:	f04f 3aff 	mov.w	sl, #4294967295
 800b3f8:	e7d5      	b.n	800b3a6 <_strtod_l+0x8de>
 800b3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3fc:	ea13 0f0a 	tst.w	r3, sl
 800b400:	e7e0      	b.n	800b3c4 <_strtod_l+0x8fc>
 800b402:	f7ff fb45 	bl	800aa90 <sulp>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	ec51 0b18 	vmov	r0, r1, d8
 800b40e:	f7f4 ffab 	bl	8000368 <__aeabi_dsub>
 800b412:	2200      	movs	r2, #0
 800b414:	2300      	movs	r3, #0
 800b416:	4682      	mov	sl, r0
 800b418:	468b      	mov	fp, r1
 800b41a:	f7f5 fbc5 	bl	8000ba8 <__aeabi_dcmpeq>
 800b41e:	2800      	cmp	r0, #0
 800b420:	d0c1      	beq.n	800b3a6 <_strtod_l+0x8de>
 800b422:	e611      	b.n	800b048 <_strtod_l+0x580>
 800b424:	fffffc02 	.word	0xfffffc02
 800b428:	7ff00000 	.word	0x7ff00000
 800b42c:	39500000 	.word	0x39500000
 800b430:	000fffff 	.word	0x000fffff
 800b434:	7fefffff 	.word	0x7fefffff
 800b438:	0800de18 	.word	0x0800de18
 800b43c:	4631      	mov	r1, r6
 800b43e:	4628      	mov	r0, r5
 800b440:	f001 f99e 	bl	800c780 <__ratio>
 800b444:	ec59 8b10 	vmov	r8, r9, d0
 800b448:	ee10 0a10 	vmov	r0, s0
 800b44c:	2200      	movs	r2, #0
 800b44e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b452:	4649      	mov	r1, r9
 800b454:	f7f5 fbbc 	bl	8000bd0 <__aeabi_dcmple>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d07a      	beq.n	800b552 <_strtod_l+0xa8a>
 800b45c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d04a      	beq.n	800b4f8 <_strtod_l+0xa30>
 800b462:	4b95      	ldr	r3, [pc, #596]	; (800b6b8 <_strtod_l+0xbf0>)
 800b464:	2200      	movs	r2, #0
 800b466:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b46a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b6b8 <_strtod_l+0xbf0>
 800b46e:	f04f 0800 	mov.w	r8, #0
 800b472:	4b92      	ldr	r3, [pc, #584]	; (800b6bc <_strtod_l+0xbf4>)
 800b474:	403b      	ands	r3, r7
 800b476:	930d      	str	r3, [sp, #52]	; 0x34
 800b478:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b47a:	4b91      	ldr	r3, [pc, #580]	; (800b6c0 <_strtod_l+0xbf8>)
 800b47c:	429a      	cmp	r2, r3
 800b47e:	f040 80b0 	bne.w	800b5e2 <_strtod_l+0xb1a>
 800b482:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b486:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b48a:	ec4b ab10 	vmov	d0, sl, fp
 800b48e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b492:	f001 f89d 	bl	800c5d0 <__ulp>
 800b496:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b49a:	ec53 2b10 	vmov	r2, r3, d0
 800b49e:	f7f5 f91b 	bl	80006d8 <__aeabi_dmul>
 800b4a2:	4652      	mov	r2, sl
 800b4a4:	465b      	mov	r3, fp
 800b4a6:	f7f4 ff61 	bl	800036c <__adddf3>
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4983      	ldr	r1, [pc, #524]	; (800b6bc <_strtod_l+0xbf4>)
 800b4ae:	4a85      	ldr	r2, [pc, #532]	; (800b6c4 <_strtod_l+0xbfc>)
 800b4b0:	4019      	ands	r1, r3
 800b4b2:	4291      	cmp	r1, r2
 800b4b4:	4682      	mov	sl, r0
 800b4b6:	d960      	bls.n	800b57a <_strtod_l+0xab2>
 800b4b8:	ee18 3a90 	vmov	r3, s17
 800b4bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d104      	bne.n	800b4ce <_strtod_l+0xa06>
 800b4c4:	ee18 3a10 	vmov	r3, s16
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	f43f ad45 	beq.w	800af58 <_strtod_l+0x490>
 800b4ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b6d0 <_strtod_l+0xc08>
 800b4d2:	f04f 3aff 	mov.w	sl, #4294967295
 800b4d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f000 fd47 	bl	800bf6c <_Bfree>
 800b4de:	9905      	ldr	r1, [sp, #20]
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f000 fd43 	bl	800bf6c <_Bfree>
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f000 fd3f 	bl	800bf6c <_Bfree>
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f000 fd3b 	bl	800bf6c <_Bfree>
 800b4f6:	e61a      	b.n	800b12e <_strtod_l+0x666>
 800b4f8:	f1ba 0f00 	cmp.w	sl, #0
 800b4fc:	d11b      	bne.n	800b536 <_strtod_l+0xa6e>
 800b4fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b502:	b9f3      	cbnz	r3, 800b542 <_strtod_l+0xa7a>
 800b504:	4b6c      	ldr	r3, [pc, #432]	; (800b6b8 <_strtod_l+0xbf0>)
 800b506:	2200      	movs	r2, #0
 800b508:	4640      	mov	r0, r8
 800b50a:	4649      	mov	r1, r9
 800b50c:	f7f5 fb56 	bl	8000bbc <__aeabi_dcmplt>
 800b510:	b9d0      	cbnz	r0, 800b548 <_strtod_l+0xa80>
 800b512:	4640      	mov	r0, r8
 800b514:	4649      	mov	r1, r9
 800b516:	4b6c      	ldr	r3, [pc, #432]	; (800b6c8 <_strtod_l+0xc00>)
 800b518:	2200      	movs	r2, #0
 800b51a:	f7f5 f8dd 	bl	80006d8 <__aeabi_dmul>
 800b51e:	4680      	mov	r8, r0
 800b520:	4689      	mov	r9, r1
 800b522:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b526:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b52a:	9315      	str	r3, [sp, #84]	; 0x54
 800b52c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b530:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b534:	e79d      	b.n	800b472 <_strtod_l+0x9aa>
 800b536:	f1ba 0f01 	cmp.w	sl, #1
 800b53a:	d102      	bne.n	800b542 <_strtod_l+0xa7a>
 800b53c:	2f00      	cmp	r7, #0
 800b53e:	f43f ad83 	beq.w	800b048 <_strtod_l+0x580>
 800b542:	4b62      	ldr	r3, [pc, #392]	; (800b6cc <_strtod_l+0xc04>)
 800b544:	2200      	movs	r2, #0
 800b546:	e78e      	b.n	800b466 <_strtod_l+0x99e>
 800b548:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b6c8 <_strtod_l+0xc00>
 800b54c:	f04f 0800 	mov.w	r8, #0
 800b550:	e7e7      	b.n	800b522 <_strtod_l+0xa5a>
 800b552:	4b5d      	ldr	r3, [pc, #372]	; (800b6c8 <_strtod_l+0xc00>)
 800b554:	4640      	mov	r0, r8
 800b556:	4649      	mov	r1, r9
 800b558:	2200      	movs	r2, #0
 800b55a:	f7f5 f8bd 	bl	80006d8 <__aeabi_dmul>
 800b55e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b560:	4680      	mov	r8, r0
 800b562:	4689      	mov	r9, r1
 800b564:	b933      	cbnz	r3, 800b574 <_strtod_l+0xaac>
 800b566:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b56a:	900e      	str	r0, [sp, #56]	; 0x38
 800b56c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b56e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b572:	e7dd      	b.n	800b530 <_strtod_l+0xa68>
 800b574:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b578:	e7f9      	b.n	800b56e <_strtod_l+0xaa6>
 800b57a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b57e:	9b04      	ldr	r3, [sp, #16]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1a8      	bne.n	800b4d6 <_strtod_l+0xa0e>
 800b584:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b588:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b58a:	0d1b      	lsrs	r3, r3, #20
 800b58c:	051b      	lsls	r3, r3, #20
 800b58e:	429a      	cmp	r2, r3
 800b590:	d1a1      	bne.n	800b4d6 <_strtod_l+0xa0e>
 800b592:	4640      	mov	r0, r8
 800b594:	4649      	mov	r1, r9
 800b596:	f7f5 fbd7 	bl	8000d48 <__aeabi_d2lz>
 800b59a:	f7f5 f86f 	bl	800067c <__aeabi_l2d>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	f7f4 fedf 	bl	8000368 <__aeabi_dsub>
 800b5aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5b0:	ea43 030a 	orr.w	r3, r3, sl
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	4689      	mov	r9, r1
 800b5ba:	d055      	beq.n	800b668 <_strtod_l+0xba0>
 800b5bc:	a336      	add	r3, pc, #216	; (adr r3, 800b698 <_strtod_l+0xbd0>)
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	f7f5 fafb 	bl	8000bbc <__aeabi_dcmplt>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	f47f acd0 	bne.w	800af6c <_strtod_l+0x4a4>
 800b5cc:	a334      	add	r3, pc, #208	; (adr r3, 800b6a0 <_strtod_l+0xbd8>)
 800b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	f7f5 fb0f 	bl	8000bf8 <__aeabi_dcmpgt>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	f43f af7b 	beq.w	800b4d6 <_strtod_l+0xa0e>
 800b5e0:	e4c4      	b.n	800af6c <_strtod_l+0x4a4>
 800b5e2:	9b04      	ldr	r3, [sp, #16]
 800b5e4:	b333      	cbz	r3, 800b634 <_strtod_l+0xb6c>
 800b5e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b5ec:	d822      	bhi.n	800b634 <_strtod_l+0xb6c>
 800b5ee:	a32e      	add	r3, pc, #184	; (adr r3, 800b6a8 <_strtod_l+0xbe0>)
 800b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	f7f5 faea 	bl	8000bd0 <__aeabi_dcmple>
 800b5fc:	b1a0      	cbz	r0, 800b628 <_strtod_l+0xb60>
 800b5fe:	4649      	mov	r1, r9
 800b600:	4640      	mov	r0, r8
 800b602:	f7f5 fb19 	bl	8000c38 <__aeabi_d2uiz>
 800b606:	2801      	cmp	r0, #1
 800b608:	bf38      	it	cc
 800b60a:	2001      	movcc	r0, #1
 800b60c:	f7f4 ffea 	bl	80005e4 <__aeabi_ui2d>
 800b610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b612:	4680      	mov	r8, r0
 800b614:	4689      	mov	r9, r1
 800b616:	bb23      	cbnz	r3, 800b662 <_strtod_l+0xb9a>
 800b618:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b61c:	9010      	str	r0, [sp, #64]	; 0x40
 800b61e:	9311      	str	r3, [sp, #68]	; 0x44
 800b620:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b624:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b62c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b630:	1a9b      	subs	r3, r3, r2
 800b632:	9309      	str	r3, [sp, #36]	; 0x24
 800b634:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b638:	eeb0 0a48 	vmov.f32	s0, s16
 800b63c:	eef0 0a68 	vmov.f32	s1, s17
 800b640:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b644:	f000 ffc4 	bl	800c5d0 <__ulp>
 800b648:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b64c:	ec53 2b10 	vmov	r2, r3, d0
 800b650:	f7f5 f842 	bl	80006d8 <__aeabi_dmul>
 800b654:	ec53 2b18 	vmov	r2, r3, d8
 800b658:	f7f4 fe88 	bl	800036c <__adddf3>
 800b65c:	4682      	mov	sl, r0
 800b65e:	468b      	mov	fp, r1
 800b660:	e78d      	b.n	800b57e <_strtod_l+0xab6>
 800b662:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b666:	e7db      	b.n	800b620 <_strtod_l+0xb58>
 800b668:	a311      	add	r3, pc, #68	; (adr r3, 800b6b0 <_strtod_l+0xbe8>)
 800b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66e:	f7f5 faa5 	bl	8000bbc <__aeabi_dcmplt>
 800b672:	e7b2      	b.n	800b5da <_strtod_l+0xb12>
 800b674:	2300      	movs	r3, #0
 800b676:	930a      	str	r3, [sp, #40]	; 0x28
 800b678:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b67a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b67c:	6013      	str	r3, [r2, #0]
 800b67e:	f7ff ba6b 	b.w	800ab58 <_strtod_l+0x90>
 800b682:	2a65      	cmp	r2, #101	; 0x65
 800b684:	f43f ab5f 	beq.w	800ad46 <_strtod_l+0x27e>
 800b688:	2a45      	cmp	r2, #69	; 0x45
 800b68a:	f43f ab5c 	beq.w	800ad46 <_strtod_l+0x27e>
 800b68e:	2301      	movs	r3, #1
 800b690:	f7ff bb94 	b.w	800adbc <_strtod_l+0x2f4>
 800b694:	f3af 8000 	nop.w
 800b698:	94a03595 	.word	0x94a03595
 800b69c:	3fdfffff 	.word	0x3fdfffff
 800b6a0:	35afe535 	.word	0x35afe535
 800b6a4:	3fe00000 	.word	0x3fe00000
 800b6a8:	ffc00000 	.word	0xffc00000
 800b6ac:	41dfffff 	.word	0x41dfffff
 800b6b0:	94a03595 	.word	0x94a03595
 800b6b4:	3fcfffff 	.word	0x3fcfffff
 800b6b8:	3ff00000 	.word	0x3ff00000
 800b6bc:	7ff00000 	.word	0x7ff00000
 800b6c0:	7fe00000 	.word	0x7fe00000
 800b6c4:	7c9fffff 	.word	0x7c9fffff
 800b6c8:	3fe00000 	.word	0x3fe00000
 800b6cc:	bff00000 	.word	0xbff00000
 800b6d0:	7fefffff 	.word	0x7fefffff

0800b6d4 <_strtod_r>:
 800b6d4:	4b01      	ldr	r3, [pc, #4]	; (800b6dc <_strtod_r+0x8>)
 800b6d6:	f7ff b9f7 	b.w	800aac8 <_strtod_l>
 800b6da:	bf00      	nop
 800b6dc:	20000088 	.word	0x20000088

0800b6e0 <_strtol_l.constprop.0>:
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e6:	d001      	beq.n	800b6ec <_strtol_l.constprop.0+0xc>
 800b6e8:	2b24      	cmp	r3, #36	; 0x24
 800b6ea:	d906      	bls.n	800b6fa <_strtol_l.constprop.0+0x1a>
 800b6ec:	f7fe ff4a 	bl	800a584 <__errno>
 800b6f0:	2316      	movs	r3, #22
 800b6f2:	6003      	str	r3, [r0, #0]
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b7e0 <_strtol_l.constprop.0+0x100>
 800b6fe:	460d      	mov	r5, r1
 800b700:	462e      	mov	r6, r5
 800b702:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b706:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b70a:	f017 0708 	ands.w	r7, r7, #8
 800b70e:	d1f7      	bne.n	800b700 <_strtol_l.constprop.0+0x20>
 800b710:	2c2d      	cmp	r4, #45	; 0x2d
 800b712:	d132      	bne.n	800b77a <_strtol_l.constprop.0+0x9a>
 800b714:	782c      	ldrb	r4, [r5, #0]
 800b716:	2701      	movs	r7, #1
 800b718:	1cb5      	adds	r5, r6, #2
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d05b      	beq.n	800b7d6 <_strtol_l.constprop.0+0xf6>
 800b71e:	2b10      	cmp	r3, #16
 800b720:	d109      	bne.n	800b736 <_strtol_l.constprop.0+0x56>
 800b722:	2c30      	cmp	r4, #48	; 0x30
 800b724:	d107      	bne.n	800b736 <_strtol_l.constprop.0+0x56>
 800b726:	782c      	ldrb	r4, [r5, #0]
 800b728:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b72c:	2c58      	cmp	r4, #88	; 0x58
 800b72e:	d14d      	bne.n	800b7cc <_strtol_l.constprop.0+0xec>
 800b730:	786c      	ldrb	r4, [r5, #1]
 800b732:	2310      	movs	r3, #16
 800b734:	3502      	adds	r5, #2
 800b736:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b73a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b73e:	f04f 0c00 	mov.w	ip, #0
 800b742:	fbb8 f9f3 	udiv	r9, r8, r3
 800b746:	4666      	mov	r6, ip
 800b748:	fb03 8a19 	mls	sl, r3, r9, r8
 800b74c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b750:	f1be 0f09 	cmp.w	lr, #9
 800b754:	d816      	bhi.n	800b784 <_strtol_l.constprop.0+0xa4>
 800b756:	4674      	mov	r4, lr
 800b758:	42a3      	cmp	r3, r4
 800b75a:	dd24      	ble.n	800b7a6 <_strtol_l.constprop.0+0xc6>
 800b75c:	f1bc 0f00 	cmp.w	ip, #0
 800b760:	db1e      	blt.n	800b7a0 <_strtol_l.constprop.0+0xc0>
 800b762:	45b1      	cmp	r9, r6
 800b764:	d31c      	bcc.n	800b7a0 <_strtol_l.constprop.0+0xc0>
 800b766:	d101      	bne.n	800b76c <_strtol_l.constprop.0+0x8c>
 800b768:	45a2      	cmp	sl, r4
 800b76a:	db19      	blt.n	800b7a0 <_strtol_l.constprop.0+0xc0>
 800b76c:	fb06 4603 	mla	r6, r6, r3, r4
 800b770:	f04f 0c01 	mov.w	ip, #1
 800b774:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b778:	e7e8      	b.n	800b74c <_strtol_l.constprop.0+0x6c>
 800b77a:	2c2b      	cmp	r4, #43	; 0x2b
 800b77c:	bf04      	itt	eq
 800b77e:	782c      	ldrbeq	r4, [r5, #0]
 800b780:	1cb5      	addeq	r5, r6, #2
 800b782:	e7ca      	b.n	800b71a <_strtol_l.constprop.0+0x3a>
 800b784:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b788:	f1be 0f19 	cmp.w	lr, #25
 800b78c:	d801      	bhi.n	800b792 <_strtol_l.constprop.0+0xb2>
 800b78e:	3c37      	subs	r4, #55	; 0x37
 800b790:	e7e2      	b.n	800b758 <_strtol_l.constprop.0+0x78>
 800b792:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b796:	f1be 0f19 	cmp.w	lr, #25
 800b79a:	d804      	bhi.n	800b7a6 <_strtol_l.constprop.0+0xc6>
 800b79c:	3c57      	subs	r4, #87	; 0x57
 800b79e:	e7db      	b.n	800b758 <_strtol_l.constprop.0+0x78>
 800b7a0:	f04f 3cff 	mov.w	ip, #4294967295
 800b7a4:	e7e6      	b.n	800b774 <_strtol_l.constprop.0+0x94>
 800b7a6:	f1bc 0f00 	cmp.w	ip, #0
 800b7aa:	da05      	bge.n	800b7b8 <_strtol_l.constprop.0+0xd8>
 800b7ac:	2322      	movs	r3, #34	; 0x22
 800b7ae:	6003      	str	r3, [r0, #0]
 800b7b0:	4646      	mov	r6, r8
 800b7b2:	b942      	cbnz	r2, 800b7c6 <_strtol_l.constprop.0+0xe6>
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	e79e      	b.n	800b6f6 <_strtol_l.constprop.0+0x16>
 800b7b8:	b107      	cbz	r7, 800b7bc <_strtol_l.constprop.0+0xdc>
 800b7ba:	4276      	negs	r6, r6
 800b7bc:	2a00      	cmp	r2, #0
 800b7be:	d0f9      	beq.n	800b7b4 <_strtol_l.constprop.0+0xd4>
 800b7c0:	f1bc 0f00 	cmp.w	ip, #0
 800b7c4:	d000      	beq.n	800b7c8 <_strtol_l.constprop.0+0xe8>
 800b7c6:	1e69      	subs	r1, r5, #1
 800b7c8:	6011      	str	r1, [r2, #0]
 800b7ca:	e7f3      	b.n	800b7b4 <_strtol_l.constprop.0+0xd4>
 800b7cc:	2430      	movs	r4, #48	; 0x30
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1b1      	bne.n	800b736 <_strtol_l.constprop.0+0x56>
 800b7d2:	2308      	movs	r3, #8
 800b7d4:	e7af      	b.n	800b736 <_strtol_l.constprop.0+0x56>
 800b7d6:	2c30      	cmp	r4, #48	; 0x30
 800b7d8:	d0a5      	beq.n	800b726 <_strtol_l.constprop.0+0x46>
 800b7da:	230a      	movs	r3, #10
 800b7dc:	e7ab      	b.n	800b736 <_strtol_l.constprop.0+0x56>
 800b7de:	bf00      	nop
 800b7e0:	0800de41 	.word	0x0800de41

0800b7e4 <_strtol_r>:
 800b7e4:	f7ff bf7c 	b.w	800b6e0 <_strtol_l.constprop.0>

0800b7e8 <rshift>:
 800b7e8:	6903      	ldr	r3, [r0, #16]
 800b7ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b7ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b7f6:	f100 0414 	add.w	r4, r0, #20
 800b7fa:	dd45      	ble.n	800b888 <rshift+0xa0>
 800b7fc:	f011 011f 	ands.w	r1, r1, #31
 800b800:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b804:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b808:	d10c      	bne.n	800b824 <rshift+0x3c>
 800b80a:	f100 0710 	add.w	r7, r0, #16
 800b80e:	4629      	mov	r1, r5
 800b810:	42b1      	cmp	r1, r6
 800b812:	d334      	bcc.n	800b87e <rshift+0x96>
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	1eea      	subs	r2, r5, #3
 800b81a:	4296      	cmp	r6, r2
 800b81c:	bf38      	it	cc
 800b81e:	2300      	movcc	r3, #0
 800b820:	4423      	add	r3, r4
 800b822:	e015      	b.n	800b850 <rshift+0x68>
 800b824:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b828:	f1c1 0820 	rsb	r8, r1, #32
 800b82c:	40cf      	lsrs	r7, r1
 800b82e:	f105 0e04 	add.w	lr, r5, #4
 800b832:	46a1      	mov	r9, r4
 800b834:	4576      	cmp	r6, lr
 800b836:	46f4      	mov	ip, lr
 800b838:	d815      	bhi.n	800b866 <rshift+0x7e>
 800b83a:	1a9a      	subs	r2, r3, r2
 800b83c:	0092      	lsls	r2, r2, #2
 800b83e:	3a04      	subs	r2, #4
 800b840:	3501      	adds	r5, #1
 800b842:	42ae      	cmp	r6, r5
 800b844:	bf38      	it	cc
 800b846:	2200      	movcc	r2, #0
 800b848:	18a3      	adds	r3, r4, r2
 800b84a:	50a7      	str	r7, [r4, r2]
 800b84c:	b107      	cbz	r7, 800b850 <rshift+0x68>
 800b84e:	3304      	adds	r3, #4
 800b850:	1b1a      	subs	r2, r3, r4
 800b852:	42a3      	cmp	r3, r4
 800b854:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b858:	bf08      	it	eq
 800b85a:	2300      	moveq	r3, #0
 800b85c:	6102      	str	r2, [r0, #16]
 800b85e:	bf08      	it	eq
 800b860:	6143      	streq	r3, [r0, #20]
 800b862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b866:	f8dc c000 	ldr.w	ip, [ip]
 800b86a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b86e:	ea4c 0707 	orr.w	r7, ip, r7
 800b872:	f849 7b04 	str.w	r7, [r9], #4
 800b876:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b87a:	40cf      	lsrs	r7, r1
 800b87c:	e7da      	b.n	800b834 <rshift+0x4c>
 800b87e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b882:	f847 cf04 	str.w	ip, [r7, #4]!
 800b886:	e7c3      	b.n	800b810 <rshift+0x28>
 800b888:	4623      	mov	r3, r4
 800b88a:	e7e1      	b.n	800b850 <rshift+0x68>

0800b88c <__hexdig_fun>:
 800b88c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b890:	2b09      	cmp	r3, #9
 800b892:	d802      	bhi.n	800b89a <__hexdig_fun+0xe>
 800b894:	3820      	subs	r0, #32
 800b896:	b2c0      	uxtb	r0, r0
 800b898:	4770      	bx	lr
 800b89a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b89e:	2b05      	cmp	r3, #5
 800b8a0:	d801      	bhi.n	800b8a6 <__hexdig_fun+0x1a>
 800b8a2:	3847      	subs	r0, #71	; 0x47
 800b8a4:	e7f7      	b.n	800b896 <__hexdig_fun+0xa>
 800b8a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b8aa:	2b05      	cmp	r3, #5
 800b8ac:	d801      	bhi.n	800b8b2 <__hexdig_fun+0x26>
 800b8ae:	3827      	subs	r0, #39	; 0x27
 800b8b0:	e7f1      	b.n	800b896 <__hexdig_fun+0xa>
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	4770      	bx	lr
	...

0800b8b8 <__gethex>:
 800b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	ed2d 8b02 	vpush	{d8}
 800b8c0:	b089      	sub	sp, #36	; 0x24
 800b8c2:	ee08 0a10 	vmov	s16, r0
 800b8c6:	9304      	str	r3, [sp, #16]
 800b8c8:	4bb4      	ldr	r3, [pc, #720]	; (800bb9c <__gethex+0x2e4>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	9301      	str	r3, [sp, #4]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	468b      	mov	fp, r1
 800b8d2:	4690      	mov	r8, r2
 800b8d4:	f7f4 fce6 	bl	80002a4 <strlen>
 800b8d8:	9b01      	ldr	r3, [sp, #4]
 800b8da:	f8db 2000 	ldr.w	r2, [fp]
 800b8de:	4403      	add	r3, r0
 800b8e0:	4682      	mov	sl, r0
 800b8e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b8e6:	9305      	str	r3, [sp, #20]
 800b8e8:	1c93      	adds	r3, r2, #2
 800b8ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b8ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b8f2:	32fe      	adds	r2, #254	; 0xfe
 800b8f4:	18d1      	adds	r1, r2, r3
 800b8f6:	461f      	mov	r7, r3
 800b8f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b8fc:	9100      	str	r1, [sp, #0]
 800b8fe:	2830      	cmp	r0, #48	; 0x30
 800b900:	d0f8      	beq.n	800b8f4 <__gethex+0x3c>
 800b902:	f7ff ffc3 	bl	800b88c <__hexdig_fun>
 800b906:	4604      	mov	r4, r0
 800b908:	2800      	cmp	r0, #0
 800b90a:	d13a      	bne.n	800b982 <__gethex+0xca>
 800b90c:	9901      	ldr	r1, [sp, #4]
 800b90e:	4652      	mov	r2, sl
 800b910:	4638      	mov	r0, r7
 800b912:	f001 fb61 	bl	800cfd8 <strncmp>
 800b916:	4605      	mov	r5, r0
 800b918:	2800      	cmp	r0, #0
 800b91a:	d168      	bne.n	800b9ee <__gethex+0x136>
 800b91c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b920:	eb07 060a 	add.w	r6, r7, sl
 800b924:	f7ff ffb2 	bl	800b88c <__hexdig_fun>
 800b928:	2800      	cmp	r0, #0
 800b92a:	d062      	beq.n	800b9f2 <__gethex+0x13a>
 800b92c:	4633      	mov	r3, r6
 800b92e:	7818      	ldrb	r0, [r3, #0]
 800b930:	2830      	cmp	r0, #48	; 0x30
 800b932:	461f      	mov	r7, r3
 800b934:	f103 0301 	add.w	r3, r3, #1
 800b938:	d0f9      	beq.n	800b92e <__gethex+0x76>
 800b93a:	f7ff ffa7 	bl	800b88c <__hexdig_fun>
 800b93e:	2301      	movs	r3, #1
 800b940:	fab0 f480 	clz	r4, r0
 800b944:	0964      	lsrs	r4, r4, #5
 800b946:	4635      	mov	r5, r6
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	463a      	mov	r2, r7
 800b94c:	4616      	mov	r6, r2
 800b94e:	3201      	adds	r2, #1
 800b950:	7830      	ldrb	r0, [r6, #0]
 800b952:	f7ff ff9b 	bl	800b88c <__hexdig_fun>
 800b956:	2800      	cmp	r0, #0
 800b958:	d1f8      	bne.n	800b94c <__gethex+0x94>
 800b95a:	9901      	ldr	r1, [sp, #4]
 800b95c:	4652      	mov	r2, sl
 800b95e:	4630      	mov	r0, r6
 800b960:	f001 fb3a 	bl	800cfd8 <strncmp>
 800b964:	b980      	cbnz	r0, 800b988 <__gethex+0xd0>
 800b966:	b94d      	cbnz	r5, 800b97c <__gethex+0xc4>
 800b968:	eb06 050a 	add.w	r5, r6, sl
 800b96c:	462a      	mov	r2, r5
 800b96e:	4616      	mov	r6, r2
 800b970:	3201      	adds	r2, #1
 800b972:	7830      	ldrb	r0, [r6, #0]
 800b974:	f7ff ff8a 	bl	800b88c <__hexdig_fun>
 800b978:	2800      	cmp	r0, #0
 800b97a:	d1f8      	bne.n	800b96e <__gethex+0xb6>
 800b97c:	1bad      	subs	r5, r5, r6
 800b97e:	00ad      	lsls	r5, r5, #2
 800b980:	e004      	b.n	800b98c <__gethex+0xd4>
 800b982:	2400      	movs	r4, #0
 800b984:	4625      	mov	r5, r4
 800b986:	e7e0      	b.n	800b94a <__gethex+0x92>
 800b988:	2d00      	cmp	r5, #0
 800b98a:	d1f7      	bne.n	800b97c <__gethex+0xc4>
 800b98c:	7833      	ldrb	r3, [r6, #0]
 800b98e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b992:	2b50      	cmp	r3, #80	; 0x50
 800b994:	d13b      	bne.n	800ba0e <__gethex+0x156>
 800b996:	7873      	ldrb	r3, [r6, #1]
 800b998:	2b2b      	cmp	r3, #43	; 0x2b
 800b99a:	d02c      	beq.n	800b9f6 <__gethex+0x13e>
 800b99c:	2b2d      	cmp	r3, #45	; 0x2d
 800b99e:	d02e      	beq.n	800b9fe <__gethex+0x146>
 800b9a0:	1c71      	adds	r1, r6, #1
 800b9a2:	f04f 0900 	mov.w	r9, #0
 800b9a6:	7808      	ldrb	r0, [r1, #0]
 800b9a8:	f7ff ff70 	bl	800b88c <__hexdig_fun>
 800b9ac:	1e43      	subs	r3, r0, #1
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b18      	cmp	r3, #24
 800b9b2:	d82c      	bhi.n	800ba0e <__gethex+0x156>
 800b9b4:	f1a0 0210 	sub.w	r2, r0, #16
 800b9b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b9bc:	f7ff ff66 	bl	800b88c <__hexdig_fun>
 800b9c0:	1e43      	subs	r3, r0, #1
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	2b18      	cmp	r3, #24
 800b9c6:	d91d      	bls.n	800ba04 <__gethex+0x14c>
 800b9c8:	f1b9 0f00 	cmp.w	r9, #0
 800b9cc:	d000      	beq.n	800b9d0 <__gethex+0x118>
 800b9ce:	4252      	negs	r2, r2
 800b9d0:	4415      	add	r5, r2
 800b9d2:	f8cb 1000 	str.w	r1, [fp]
 800b9d6:	b1e4      	cbz	r4, 800ba12 <__gethex+0x15a>
 800b9d8:	9b00      	ldr	r3, [sp, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	bf14      	ite	ne
 800b9de:	2700      	movne	r7, #0
 800b9e0:	2706      	moveq	r7, #6
 800b9e2:	4638      	mov	r0, r7
 800b9e4:	b009      	add	sp, #36	; 0x24
 800b9e6:	ecbd 8b02 	vpop	{d8}
 800b9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ee:	463e      	mov	r6, r7
 800b9f0:	4625      	mov	r5, r4
 800b9f2:	2401      	movs	r4, #1
 800b9f4:	e7ca      	b.n	800b98c <__gethex+0xd4>
 800b9f6:	f04f 0900 	mov.w	r9, #0
 800b9fa:	1cb1      	adds	r1, r6, #2
 800b9fc:	e7d3      	b.n	800b9a6 <__gethex+0xee>
 800b9fe:	f04f 0901 	mov.w	r9, #1
 800ba02:	e7fa      	b.n	800b9fa <__gethex+0x142>
 800ba04:	230a      	movs	r3, #10
 800ba06:	fb03 0202 	mla	r2, r3, r2, r0
 800ba0a:	3a10      	subs	r2, #16
 800ba0c:	e7d4      	b.n	800b9b8 <__gethex+0x100>
 800ba0e:	4631      	mov	r1, r6
 800ba10:	e7df      	b.n	800b9d2 <__gethex+0x11a>
 800ba12:	1bf3      	subs	r3, r6, r7
 800ba14:	3b01      	subs	r3, #1
 800ba16:	4621      	mov	r1, r4
 800ba18:	2b07      	cmp	r3, #7
 800ba1a:	dc0b      	bgt.n	800ba34 <__gethex+0x17c>
 800ba1c:	ee18 0a10 	vmov	r0, s16
 800ba20:	f000 fa64 	bl	800beec <_Balloc>
 800ba24:	4604      	mov	r4, r0
 800ba26:	b940      	cbnz	r0, 800ba3a <__gethex+0x182>
 800ba28:	4b5d      	ldr	r3, [pc, #372]	; (800bba0 <__gethex+0x2e8>)
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	21de      	movs	r1, #222	; 0xde
 800ba2e:	485d      	ldr	r0, [pc, #372]	; (800bba4 <__gethex+0x2ec>)
 800ba30:	f001 faf4 	bl	800d01c <__assert_func>
 800ba34:	3101      	adds	r1, #1
 800ba36:	105b      	asrs	r3, r3, #1
 800ba38:	e7ee      	b.n	800ba18 <__gethex+0x160>
 800ba3a:	f100 0914 	add.w	r9, r0, #20
 800ba3e:	f04f 0b00 	mov.w	fp, #0
 800ba42:	f1ca 0301 	rsb	r3, sl, #1
 800ba46:	f8cd 9008 	str.w	r9, [sp, #8]
 800ba4a:	f8cd b000 	str.w	fp, [sp]
 800ba4e:	9306      	str	r3, [sp, #24]
 800ba50:	42b7      	cmp	r7, r6
 800ba52:	d340      	bcc.n	800bad6 <__gethex+0x21e>
 800ba54:	9802      	ldr	r0, [sp, #8]
 800ba56:	9b00      	ldr	r3, [sp, #0]
 800ba58:	f840 3b04 	str.w	r3, [r0], #4
 800ba5c:	eba0 0009 	sub.w	r0, r0, r9
 800ba60:	1080      	asrs	r0, r0, #2
 800ba62:	0146      	lsls	r6, r0, #5
 800ba64:	6120      	str	r0, [r4, #16]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f000 fb32 	bl	800c0d0 <__hi0bits>
 800ba6c:	1a30      	subs	r0, r6, r0
 800ba6e:	f8d8 6000 	ldr.w	r6, [r8]
 800ba72:	42b0      	cmp	r0, r6
 800ba74:	dd63      	ble.n	800bb3e <__gethex+0x286>
 800ba76:	1b87      	subs	r7, r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f000 fed6 	bl	800c82c <__any_on>
 800ba80:	4682      	mov	sl, r0
 800ba82:	b1a8      	cbz	r0, 800bab0 <__gethex+0x1f8>
 800ba84:	1e7b      	subs	r3, r7, #1
 800ba86:	1159      	asrs	r1, r3, #5
 800ba88:	f003 021f 	and.w	r2, r3, #31
 800ba8c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ba90:	f04f 0a01 	mov.w	sl, #1
 800ba94:	fa0a f202 	lsl.w	r2, sl, r2
 800ba98:	420a      	tst	r2, r1
 800ba9a:	d009      	beq.n	800bab0 <__gethex+0x1f8>
 800ba9c:	4553      	cmp	r3, sl
 800ba9e:	dd05      	ble.n	800baac <__gethex+0x1f4>
 800baa0:	1eb9      	subs	r1, r7, #2
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 fec2 	bl	800c82c <__any_on>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d145      	bne.n	800bb38 <__gethex+0x280>
 800baac:	f04f 0a02 	mov.w	sl, #2
 800bab0:	4639      	mov	r1, r7
 800bab2:	4620      	mov	r0, r4
 800bab4:	f7ff fe98 	bl	800b7e8 <rshift>
 800bab8:	443d      	add	r5, r7
 800baba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800babe:	42ab      	cmp	r3, r5
 800bac0:	da4c      	bge.n	800bb5c <__gethex+0x2a4>
 800bac2:	ee18 0a10 	vmov	r0, s16
 800bac6:	4621      	mov	r1, r4
 800bac8:	f000 fa50 	bl	800bf6c <_Bfree>
 800bacc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bace:	2300      	movs	r3, #0
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	27a3      	movs	r7, #163	; 0xa3
 800bad4:	e785      	b.n	800b9e2 <__gethex+0x12a>
 800bad6:	1e73      	subs	r3, r6, #1
 800bad8:	9a05      	ldr	r2, [sp, #20]
 800bada:	9303      	str	r3, [sp, #12]
 800badc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d019      	beq.n	800bb18 <__gethex+0x260>
 800bae4:	f1bb 0f20 	cmp.w	fp, #32
 800bae8:	d107      	bne.n	800bafa <__gethex+0x242>
 800baea:	9b02      	ldr	r3, [sp, #8]
 800baec:	9a00      	ldr	r2, [sp, #0]
 800baee:	f843 2b04 	str.w	r2, [r3], #4
 800baf2:	9302      	str	r3, [sp, #8]
 800baf4:	2300      	movs	r3, #0
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	469b      	mov	fp, r3
 800bafa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bafe:	f7ff fec5 	bl	800b88c <__hexdig_fun>
 800bb02:	9b00      	ldr	r3, [sp, #0]
 800bb04:	f000 000f 	and.w	r0, r0, #15
 800bb08:	fa00 f00b 	lsl.w	r0, r0, fp
 800bb0c:	4303      	orrs	r3, r0
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	f10b 0b04 	add.w	fp, fp, #4
 800bb14:	9b03      	ldr	r3, [sp, #12]
 800bb16:	e00d      	b.n	800bb34 <__gethex+0x27c>
 800bb18:	9b03      	ldr	r3, [sp, #12]
 800bb1a:	9a06      	ldr	r2, [sp, #24]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	42bb      	cmp	r3, r7
 800bb20:	d3e0      	bcc.n	800bae4 <__gethex+0x22c>
 800bb22:	4618      	mov	r0, r3
 800bb24:	9901      	ldr	r1, [sp, #4]
 800bb26:	9307      	str	r3, [sp, #28]
 800bb28:	4652      	mov	r2, sl
 800bb2a:	f001 fa55 	bl	800cfd8 <strncmp>
 800bb2e:	9b07      	ldr	r3, [sp, #28]
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d1d7      	bne.n	800bae4 <__gethex+0x22c>
 800bb34:	461e      	mov	r6, r3
 800bb36:	e78b      	b.n	800ba50 <__gethex+0x198>
 800bb38:	f04f 0a03 	mov.w	sl, #3
 800bb3c:	e7b8      	b.n	800bab0 <__gethex+0x1f8>
 800bb3e:	da0a      	bge.n	800bb56 <__gethex+0x29e>
 800bb40:	1a37      	subs	r7, r6, r0
 800bb42:	4621      	mov	r1, r4
 800bb44:	ee18 0a10 	vmov	r0, s16
 800bb48:	463a      	mov	r2, r7
 800bb4a:	f000 fc2b 	bl	800c3a4 <__lshift>
 800bb4e:	1bed      	subs	r5, r5, r7
 800bb50:	4604      	mov	r4, r0
 800bb52:	f100 0914 	add.w	r9, r0, #20
 800bb56:	f04f 0a00 	mov.w	sl, #0
 800bb5a:	e7ae      	b.n	800baba <__gethex+0x202>
 800bb5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bb60:	42a8      	cmp	r0, r5
 800bb62:	dd72      	ble.n	800bc4a <__gethex+0x392>
 800bb64:	1b45      	subs	r5, r0, r5
 800bb66:	42ae      	cmp	r6, r5
 800bb68:	dc36      	bgt.n	800bbd8 <__gethex+0x320>
 800bb6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d02a      	beq.n	800bbc8 <__gethex+0x310>
 800bb72:	2b03      	cmp	r3, #3
 800bb74:	d02c      	beq.n	800bbd0 <__gethex+0x318>
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d11c      	bne.n	800bbb4 <__gethex+0x2fc>
 800bb7a:	42ae      	cmp	r6, r5
 800bb7c:	d11a      	bne.n	800bbb4 <__gethex+0x2fc>
 800bb7e:	2e01      	cmp	r6, #1
 800bb80:	d112      	bne.n	800bba8 <__gethex+0x2f0>
 800bb82:	9a04      	ldr	r2, [sp, #16]
 800bb84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb88:	6013      	str	r3, [r2, #0]
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	6123      	str	r3, [r4, #16]
 800bb8e:	f8c9 3000 	str.w	r3, [r9]
 800bb92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb94:	2762      	movs	r7, #98	; 0x62
 800bb96:	601c      	str	r4, [r3, #0]
 800bb98:	e723      	b.n	800b9e2 <__gethex+0x12a>
 800bb9a:	bf00      	nop
 800bb9c:	0800dfb8 	.word	0x0800dfb8
 800bba0:	0800df41 	.word	0x0800df41
 800bba4:	0800df52 	.word	0x0800df52
 800bba8:	1e71      	subs	r1, r6, #1
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 fe3e 	bl	800c82c <__any_on>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d1e6      	bne.n	800bb82 <__gethex+0x2ca>
 800bbb4:	ee18 0a10 	vmov	r0, s16
 800bbb8:	4621      	mov	r1, r4
 800bbba:	f000 f9d7 	bl	800bf6c <_Bfree>
 800bbbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	6013      	str	r3, [r2, #0]
 800bbc4:	2750      	movs	r7, #80	; 0x50
 800bbc6:	e70c      	b.n	800b9e2 <__gethex+0x12a>
 800bbc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1f2      	bne.n	800bbb4 <__gethex+0x2fc>
 800bbce:	e7d8      	b.n	800bb82 <__gethex+0x2ca>
 800bbd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1d5      	bne.n	800bb82 <__gethex+0x2ca>
 800bbd6:	e7ed      	b.n	800bbb4 <__gethex+0x2fc>
 800bbd8:	1e6f      	subs	r7, r5, #1
 800bbda:	f1ba 0f00 	cmp.w	sl, #0
 800bbde:	d131      	bne.n	800bc44 <__gethex+0x38c>
 800bbe0:	b127      	cbz	r7, 800bbec <__gethex+0x334>
 800bbe2:	4639      	mov	r1, r7
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f000 fe21 	bl	800c82c <__any_on>
 800bbea:	4682      	mov	sl, r0
 800bbec:	117b      	asrs	r3, r7, #5
 800bbee:	2101      	movs	r1, #1
 800bbf0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bbf4:	f007 071f 	and.w	r7, r7, #31
 800bbf8:	fa01 f707 	lsl.w	r7, r1, r7
 800bbfc:	421f      	tst	r7, r3
 800bbfe:	4629      	mov	r1, r5
 800bc00:	4620      	mov	r0, r4
 800bc02:	bf18      	it	ne
 800bc04:	f04a 0a02 	orrne.w	sl, sl, #2
 800bc08:	1b76      	subs	r6, r6, r5
 800bc0a:	f7ff fded 	bl	800b7e8 <rshift>
 800bc0e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bc12:	2702      	movs	r7, #2
 800bc14:	f1ba 0f00 	cmp.w	sl, #0
 800bc18:	d048      	beq.n	800bcac <__gethex+0x3f4>
 800bc1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d015      	beq.n	800bc4e <__gethex+0x396>
 800bc22:	2b03      	cmp	r3, #3
 800bc24:	d017      	beq.n	800bc56 <__gethex+0x39e>
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d109      	bne.n	800bc3e <__gethex+0x386>
 800bc2a:	f01a 0f02 	tst.w	sl, #2
 800bc2e:	d006      	beq.n	800bc3e <__gethex+0x386>
 800bc30:	f8d9 0000 	ldr.w	r0, [r9]
 800bc34:	ea4a 0a00 	orr.w	sl, sl, r0
 800bc38:	f01a 0f01 	tst.w	sl, #1
 800bc3c:	d10e      	bne.n	800bc5c <__gethex+0x3a4>
 800bc3e:	f047 0710 	orr.w	r7, r7, #16
 800bc42:	e033      	b.n	800bcac <__gethex+0x3f4>
 800bc44:	f04f 0a01 	mov.w	sl, #1
 800bc48:	e7d0      	b.n	800bbec <__gethex+0x334>
 800bc4a:	2701      	movs	r7, #1
 800bc4c:	e7e2      	b.n	800bc14 <__gethex+0x35c>
 800bc4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc50:	f1c3 0301 	rsb	r3, r3, #1
 800bc54:	9315      	str	r3, [sp, #84]	; 0x54
 800bc56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d0f0      	beq.n	800bc3e <__gethex+0x386>
 800bc5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc60:	f104 0314 	add.w	r3, r4, #20
 800bc64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bc68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bc6c:	f04f 0c00 	mov.w	ip, #0
 800bc70:	4618      	mov	r0, r3
 800bc72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc76:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bc7a:	d01c      	beq.n	800bcb6 <__gethex+0x3fe>
 800bc7c:	3201      	adds	r2, #1
 800bc7e:	6002      	str	r2, [r0, #0]
 800bc80:	2f02      	cmp	r7, #2
 800bc82:	f104 0314 	add.w	r3, r4, #20
 800bc86:	d13f      	bne.n	800bd08 <__gethex+0x450>
 800bc88:	f8d8 2000 	ldr.w	r2, [r8]
 800bc8c:	3a01      	subs	r2, #1
 800bc8e:	42b2      	cmp	r2, r6
 800bc90:	d10a      	bne.n	800bca8 <__gethex+0x3f0>
 800bc92:	1171      	asrs	r1, r6, #5
 800bc94:	2201      	movs	r2, #1
 800bc96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc9a:	f006 061f 	and.w	r6, r6, #31
 800bc9e:	fa02 f606 	lsl.w	r6, r2, r6
 800bca2:	421e      	tst	r6, r3
 800bca4:	bf18      	it	ne
 800bca6:	4617      	movne	r7, r2
 800bca8:	f047 0720 	orr.w	r7, r7, #32
 800bcac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcae:	601c      	str	r4, [r3, #0]
 800bcb0:	9b04      	ldr	r3, [sp, #16]
 800bcb2:	601d      	str	r5, [r3, #0]
 800bcb4:	e695      	b.n	800b9e2 <__gethex+0x12a>
 800bcb6:	4299      	cmp	r1, r3
 800bcb8:	f843 cc04 	str.w	ip, [r3, #-4]
 800bcbc:	d8d8      	bhi.n	800bc70 <__gethex+0x3b8>
 800bcbe:	68a3      	ldr	r3, [r4, #8]
 800bcc0:	459b      	cmp	fp, r3
 800bcc2:	db19      	blt.n	800bcf8 <__gethex+0x440>
 800bcc4:	6861      	ldr	r1, [r4, #4]
 800bcc6:	ee18 0a10 	vmov	r0, s16
 800bcca:	3101      	adds	r1, #1
 800bccc:	f000 f90e 	bl	800beec <_Balloc>
 800bcd0:	4681      	mov	r9, r0
 800bcd2:	b918      	cbnz	r0, 800bcdc <__gethex+0x424>
 800bcd4:	4b1a      	ldr	r3, [pc, #104]	; (800bd40 <__gethex+0x488>)
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	2184      	movs	r1, #132	; 0x84
 800bcda:	e6a8      	b.n	800ba2e <__gethex+0x176>
 800bcdc:	6922      	ldr	r2, [r4, #16]
 800bcde:	3202      	adds	r2, #2
 800bce0:	f104 010c 	add.w	r1, r4, #12
 800bce4:	0092      	lsls	r2, r2, #2
 800bce6:	300c      	adds	r0, #12
 800bce8:	f7fe fc86 	bl	800a5f8 <memcpy>
 800bcec:	4621      	mov	r1, r4
 800bcee:	ee18 0a10 	vmov	r0, s16
 800bcf2:	f000 f93b 	bl	800bf6c <_Bfree>
 800bcf6:	464c      	mov	r4, r9
 800bcf8:	6923      	ldr	r3, [r4, #16]
 800bcfa:	1c5a      	adds	r2, r3, #1
 800bcfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd00:	6122      	str	r2, [r4, #16]
 800bd02:	2201      	movs	r2, #1
 800bd04:	615a      	str	r2, [r3, #20]
 800bd06:	e7bb      	b.n	800bc80 <__gethex+0x3c8>
 800bd08:	6922      	ldr	r2, [r4, #16]
 800bd0a:	455a      	cmp	r2, fp
 800bd0c:	dd0b      	ble.n	800bd26 <__gethex+0x46e>
 800bd0e:	2101      	movs	r1, #1
 800bd10:	4620      	mov	r0, r4
 800bd12:	f7ff fd69 	bl	800b7e8 <rshift>
 800bd16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd1a:	3501      	adds	r5, #1
 800bd1c:	42ab      	cmp	r3, r5
 800bd1e:	f6ff aed0 	blt.w	800bac2 <__gethex+0x20a>
 800bd22:	2701      	movs	r7, #1
 800bd24:	e7c0      	b.n	800bca8 <__gethex+0x3f0>
 800bd26:	f016 061f 	ands.w	r6, r6, #31
 800bd2a:	d0fa      	beq.n	800bd22 <__gethex+0x46a>
 800bd2c:	4453      	add	r3, sl
 800bd2e:	f1c6 0620 	rsb	r6, r6, #32
 800bd32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bd36:	f000 f9cb 	bl	800c0d0 <__hi0bits>
 800bd3a:	42b0      	cmp	r0, r6
 800bd3c:	dbe7      	blt.n	800bd0e <__gethex+0x456>
 800bd3e:	e7f0      	b.n	800bd22 <__gethex+0x46a>
 800bd40:	0800df41 	.word	0x0800df41

0800bd44 <L_shift>:
 800bd44:	f1c2 0208 	rsb	r2, r2, #8
 800bd48:	0092      	lsls	r2, r2, #2
 800bd4a:	b570      	push	{r4, r5, r6, lr}
 800bd4c:	f1c2 0620 	rsb	r6, r2, #32
 800bd50:	6843      	ldr	r3, [r0, #4]
 800bd52:	6804      	ldr	r4, [r0, #0]
 800bd54:	fa03 f506 	lsl.w	r5, r3, r6
 800bd58:	432c      	orrs	r4, r5
 800bd5a:	40d3      	lsrs	r3, r2
 800bd5c:	6004      	str	r4, [r0, #0]
 800bd5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd62:	4288      	cmp	r0, r1
 800bd64:	d3f4      	bcc.n	800bd50 <L_shift+0xc>
 800bd66:	bd70      	pop	{r4, r5, r6, pc}

0800bd68 <__match>:
 800bd68:	b530      	push	{r4, r5, lr}
 800bd6a:	6803      	ldr	r3, [r0, #0]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd72:	b914      	cbnz	r4, 800bd7a <__match+0x12>
 800bd74:	6003      	str	r3, [r0, #0]
 800bd76:	2001      	movs	r0, #1
 800bd78:	bd30      	pop	{r4, r5, pc}
 800bd7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bd82:	2d19      	cmp	r5, #25
 800bd84:	bf98      	it	ls
 800bd86:	3220      	addls	r2, #32
 800bd88:	42a2      	cmp	r2, r4
 800bd8a:	d0f0      	beq.n	800bd6e <__match+0x6>
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	e7f3      	b.n	800bd78 <__match+0x10>

0800bd90 <__hexnan>:
 800bd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd94:	680b      	ldr	r3, [r1, #0]
 800bd96:	115e      	asrs	r6, r3, #5
 800bd98:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd9c:	f013 031f 	ands.w	r3, r3, #31
 800bda0:	b087      	sub	sp, #28
 800bda2:	bf18      	it	ne
 800bda4:	3604      	addne	r6, #4
 800bda6:	2500      	movs	r5, #0
 800bda8:	1f37      	subs	r7, r6, #4
 800bdaa:	4690      	mov	r8, r2
 800bdac:	6802      	ldr	r2, [r0, #0]
 800bdae:	9301      	str	r3, [sp, #4]
 800bdb0:	4682      	mov	sl, r0
 800bdb2:	f846 5c04 	str.w	r5, [r6, #-4]
 800bdb6:	46b9      	mov	r9, r7
 800bdb8:	463c      	mov	r4, r7
 800bdba:	9502      	str	r5, [sp, #8]
 800bdbc:	46ab      	mov	fp, r5
 800bdbe:	7851      	ldrb	r1, [r2, #1]
 800bdc0:	1c53      	adds	r3, r2, #1
 800bdc2:	9303      	str	r3, [sp, #12]
 800bdc4:	b341      	cbz	r1, 800be18 <__hexnan+0x88>
 800bdc6:	4608      	mov	r0, r1
 800bdc8:	9205      	str	r2, [sp, #20]
 800bdca:	9104      	str	r1, [sp, #16]
 800bdcc:	f7ff fd5e 	bl	800b88c <__hexdig_fun>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d14f      	bne.n	800be74 <__hexnan+0xe4>
 800bdd4:	9904      	ldr	r1, [sp, #16]
 800bdd6:	9a05      	ldr	r2, [sp, #20]
 800bdd8:	2920      	cmp	r1, #32
 800bdda:	d818      	bhi.n	800be0e <__hexnan+0x7e>
 800bddc:	9b02      	ldr	r3, [sp, #8]
 800bdde:	459b      	cmp	fp, r3
 800bde0:	dd13      	ble.n	800be0a <__hexnan+0x7a>
 800bde2:	454c      	cmp	r4, r9
 800bde4:	d206      	bcs.n	800bdf4 <__hexnan+0x64>
 800bde6:	2d07      	cmp	r5, #7
 800bde8:	dc04      	bgt.n	800bdf4 <__hexnan+0x64>
 800bdea:	462a      	mov	r2, r5
 800bdec:	4649      	mov	r1, r9
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f7ff ffa8 	bl	800bd44 <L_shift>
 800bdf4:	4544      	cmp	r4, r8
 800bdf6:	d950      	bls.n	800be9a <__hexnan+0x10a>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f1a4 0904 	sub.w	r9, r4, #4
 800bdfe:	f844 3c04 	str.w	r3, [r4, #-4]
 800be02:	f8cd b008 	str.w	fp, [sp, #8]
 800be06:	464c      	mov	r4, r9
 800be08:	461d      	mov	r5, r3
 800be0a:	9a03      	ldr	r2, [sp, #12]
 800be0c:	e7d7      	b.n	800bdbe <__hexnan+0x2e>
 800be0e:	2929      	cmp	r1, #41	; 0x29
 800be10:	d156      	bne.n	800bec0 <__hexnan+0x130>
 800be12:	3202      	adds	r2, #2
 800be14:	f8ca 2000 	str.w	r2, [sl]
 800be18:	f1bb 0f00 	cmp.w	fp, #0
 800be1c:	d050      	beq.n	800bec0 <__hexnan+0x130>
 800be1e:	454c      	cmp	r4, r9
 800be20:	d206      	bcs.n	800be30 <__hexnan+0xa0>
 800be22:	2d07      	cmp	r5, #7
 800be24:	dc04      	bgt.n	800be30 <__hexnan+0xa0>
 800be26:	462a      	mov	r2, r5
 800be28:	4649      	mov	r1, r9
 800be2a:	4620      	mov	r0, r4
 800be2c:	f7ff ff8a 	bl	800bd44 <L_shift>
 800be30:	4544      	cmp	r4, r8
 800be32:	d934      	bls.n	800be9e <__hexnan+0x10e>
 800be34:	f1a8 0204 	sub.w	r2, r8, #4
 800be38:	4623      	mov	r3, r4
 800be3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800be3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800be42:	429f      	cmp	r7, r3
 800be44:	d2f9      	bcs.n	800be3a <__hexnan+0xaa>
 800be46:	1b3b      	subs	r3, r7, r4
 800be48:	f023 0303 	bic.w	r3, r3, #3
 800be4c:	3304      	adds	r3, #4
 800be4e:	3401      	adds	r4, #1
 800be50:	3e03      	subs	r6, #3
 800be52:	42b4      	cmp	r4, r6
 800be54:	bf88      	it	hi
 800be56:	2304      	movhi	r3, #4
 800be58:	4443      	add	r3, r8
 800be5a:	2200      	movs	r2, #0
 800be5c:	f843 2b04 	str.w	r2, [r3], #4
 800be60:	429f      	cmp	r7, r3
 800be62:	d2fb      	bcs.n	800be5c <__hexnan+0xcc>
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	b91b      	cbnz	r3, 800be70 <__hexnan+0xe0>
 800be68:	4547      	cmp	r7, r8
 800be6a:	d127      	bne.n	800bebc <__hexnan+0x12c>
 800be6c:	2301      	movs	r3, #1
 800be6e:	603b      	str	r3, [r7, #0]
 800be70:	2005      	movs	r0, #5
 800be72:	e026      	b.n	800bec2 <__hexnan+0x132>
 800be74:	3501      	adds	r5, #1
 800be76:	2d08      	cmp	r5, #8
 800be78:	f10b 0b01 	add.w	fp, fp, #1
 800be7c:	dd06      	ble.n	800be8c <__hexnan+0xfc>
 800be7e:	4544      	cmp	r4, r8
 800be80:	d9c3      	bls.n	800be0a <__hexnan+0x7a>
 800be82:	2300      	movs	r3, #0
 800be84:	f844 3c04 	str.w	r3, [r4, #-4]
 800be88:	2501      	movs	r5, #1
 800be8a:	3c04      	subs	r4, #4
 800be8c:	6822      	ldr	r2, [r4, #0]
 800be8e:	f000 000f 	and.w	r0, r0, #15
 800be92:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800be96:	6022      	str	r2, [r4, #0]
 800be98:	e7b7      	b.n	800be0a <__hexnan+0x7a>
 800be9a:	2508      	movs	r5, #8
 800be9c:	e7b5      	b.n	800be0a <__hexnan+0x7a>
 800be9e:	9b01      	ldr	r3, [sp, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d0df      	beq.n	800be64 <__hexnan+0xd4>
 800bea4:	f04f 32ff 	mov.w	r2, #4294967295
 800bea8:	f1c3 0320 	rsb	r3, r3, #32
 800beac:	fa22 f303 	lsr.w	r3, r2, r3
 800beb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800beb4:	401a      	ands	r2, r3
 800beb6:	f846 2c04 	str.w	r2, [r6, #-4]
 800beba:	e7d3      	b.n	800be64 <__hexnan+0xd4>
 800bebc:	3f04      	subs	r7, #4
 800bebe:	e7d1      	b.n	800be64 <__hexnan+0xd4>
 800bec0:	2004      	movs	r0, #4
 800bec2:	b007      	add	sp, #28
 800bec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bec8 <__ascii_mbtowc>:
 800bec8:	b082      	sub	sp, #8
 800beca:	b901      	cbnz	r1, 800bece <__ascii_mbtowc+0x6>
 800becc:	a901      	add	r1, sp, #4
 800bece:	b142      	cbz	r2, 800bee2 <__ascii_mbtowc+0x1a>
 800bed0:	b14b      	cbz	r3, 800bee6 <__ascii_mbtowc+0x1e>
 800bed2:	7813      	ldrb	r3, [r2, #0]
 800bed4:	600b      	str	r3, [r1, #0]
 800bed6:	7812      	ldrb	r2, [r2, #0]
 800bed8:	1e10      	subs	r0, r2, #0
 800beda:	bf18      	it	ne
 800bedc:	2001      	movne	r0, #1
 800bede:	b002      	add	sp, #8
 800bee0:	4770      	bx	lr
 800bee2:	4610      	mov	r0, r2
 800bee4:	e7fb      	b.n	800bede <__ascii_mbtowc+0x16>
 800bee6:	f06f 0001 	mvn.w	r0, #1
 800beea:	e7f8      	b.n	800bede <__ascii_mbtowc+0x16>

0800beec <_Balloc>:
 800beec:	b570      	push	{r4, r5, r6, lr}
 800beee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bef0:	4604      	mov	r4, r0
 800bef2:	460d      	mov	r5, r1
 800bef4:	b976      	cbnz	r6, 800bf14 <_Balloc+0x28>
 800bef6:	2010      	movs	r0, #16
 800bef8:	f001 f8c0 	bl	800d07c <malloc>
 800befc:	4602      	mov	r2, r0
 800befe:	6260      	str	r0, [r4, #36]	; 0x24
 800bf00:	b920      	cbnz	r0, 800bf0c <_Balloc+0x20>
 800bf02:	4b18      	ldr	r3, [pc, #96]	; (800bf64 <_Balloc+0x78>)
 800bf04:	4818      	ldr	r0, [pc, #96]	; (800bf68 <_Balloc+0x7c>)
 800bf06:	2166      	movs	r1, #102	; 0x66
 800bf08:	f001 f888 	bl	800d01c <__assert_func>
 800bf0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf10:	6006      	str	r6, [r0, #0]
 800bf12:	60c6      	str	r6, [r0, #12]
 800bf14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf16:	68f3      	ldr	r3, [r6, #12]
 800bf18:	b183      	cbz	r3, 800bf3c <_Balloc+0x50>
 800bf1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf22:	b9b8      	cbnz	r0, 800bf54 <_Balloc+0x68>
 800bf24:	2101      	movs	r1, #1
 800bf26:	fa01 f605 	lsl.w	r6, r1, r5
 800bf2a:	1d72      	adds	r2, r6, #5
 800bf2c:	0092      	lsls	r2, r2, #2
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f000 fc9d 	bl	800c86e <_calloc_r>
 800bf34:	b160      	cbz	r0, 800bf50 <_Balloc+0x64>
 800bf36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf3a:	e00e      	b.n	800bf5a <_Balloc+0x6e>
 800bf3c:	2221      	movs	r2, #33	; 0x21
 800bf3e:	2104      	movs	r1, #4
 800bf40:	4620      	mov	r0, r4
 800bf42:	f000 fc94 	bl	800c86e <_calloc_r>
 800bf46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf48:	60f0      	str	r0, [r6, #12]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1e4      	bne.n	800bf1a <_Balloc+0x2e>
 800bf50:	2000      	movs	r0, #0
 800bf52:	bd70      	pop	{r4, r5, r6, pc}
 800bf54:	6802      	ldr	r2, [r0, #0]
 800bf56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf60:	e7f7      	b.n	800bf52 <_Balloc+0x66>
 800bf62:	bf00      	nop
 800bf64:	0800dfcc 	.word	0x0800dfcc
 800bf68:	0800dfe3 	.word	0x0800dfe3

0800bf6c <_Bfree>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf70:	4605      	mov	r5, r0
 800bf72:	460c      	mov	r4, r1
 800bf74:	b976      	cbnz	r6, 800bf94 <_Bfree+0x28>
 800bf76:	2010      	movs	r0, #16
 800bf78:	f001 f880 	bl	800d07c <malloc>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	6268      	str	r0, [r5, #36]	; 0x24
 800bf80:	b920      	cbnz	r0, 800bf8c <_Bfree+0x20>
 800bf82:	4b09      	ldr	r3, [pc, #36]	; (800bfa8 <_Bfree+0x3c>)
 800bf84:	4809      	ldr	r0, [pc, #36]	; (800bfac <_Bfree+0x40>)
 800bf86:	218a      	movs	r1, #138	; 0x8a
 800bf88:	f001 f848 	bl	800d01c <__assert_func>
 800bf8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf90:	6006      	str	r6, [r0, #0]
 800bf92:	60c6      	str	r6, [r0, #12]
 800bf94:	b13c      	cbz	r4, 800bfa6 <_Bfree+0x3a>
 800bf96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf98:	6862      	ldr	r2, [r4, #4]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfa0:	6021      	str	r1, [r4, #0]
 800bfa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}
 800bfa8:	0800dfcc 	.word	0x0800dfcc
 800bfac:	0800dfe3 	.word	0x0800dfe3

0800bfb0 <__multadd>:
 800bfb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb4:	690d      	ldr	r5, [r1, #16]
 800bfb6:	4607      	mov	r7, r0
 800bfb8:	460c      	mov	r4, r1
 800bfba:	461e      	mov	r6, r3
 800bfbc:	f101 0c14 	add.w	ip, r1, #20
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	f8dc 3000 	ldr.w	r3, [ip]
 800bfc6:	b299      	uxth	r1, r3
 800bfc8:	fb02 6101 	mla	r1, r2, r1, r6
 800bfcc:	0c1e      	lsrs	r6, r3, #16
 800bfce:	0c0b      	lsrs	r3, r1, #16
 800bfd0:	fb02 3306 	mla	r3, r2, r6, r3
 800bfd4:	b289      	uxth	r1, r1
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfdc:	4285      	cmp	r5, r0
 800bfde:	f84c 1b04 	str.w	r1, [ip], #4
 800bfe2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfe6:	dcec      	bgt.n	800bfc2 <__multadd+0x12>
 800bfe8:	b30e      	cbz	r6, 800c02e <__multadd+0x7e>
 800bfea:	68a3      	ldr	r3, [r4, #8]
 800bfec:	42ab      	cmp	r3, r5
 800bfee:	dc19      	bgt.n	800c024 <__multadd+0x74>
 800bff0:	6861      	ldr	r1, [r4, #4]
 800bff2:	4638      	mov	r0, r7
 800bff4:	3101      	adds	r1, #1
 800bff6:	f7ff ff79 	bl	800beec <_Balloc>
 800bffa:	4680      	mov	r8, r0
 800bffc:	b928      	cbnz	r0, 800c00a <__multadd+0x5a>
 800bffe:	4602      	mov	r2, r0
 800c000:	4b0c      	ldr	r3, [pc, #48]	; (800c034 <__multadd+0x84>)
 800c002:	480d      	ldr	r0, [pc, #52]	; (800c038 <__multadd+0x88>)
 800c004:	21b5      	movs	r1, #181	; 0xb5
 800c006:	f001 f809 	bl	800d01c <__assert_func>
 800c00a:	6922      	ldr	r2, [r4, #16]
 800c00c:	3202      	adds	r2, #2
 800c00e:	f104 010c 	add.w	r1, r4, #12
 800c012:	0092      	lsls	r2, r2, #2
 800c014:	300c      	adds	r0, #12
 800c016:	f7fe faef 	bl	800a5f8 <memcpy>
 800c01a:	4621      	mov	r1, r4
 800c01c:	4638      	mov	r0, r7
 800c01e:	f7ff ffa5 	bl	800bf6c <_Bfree>
 800c022:	4644      	mov	r4, r8
 800c024:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c028:	3501      	adds	r5, #1
 800c02a:	615e      	str	r6, [r3, #20]
 800c02c:	6125      	str	r5, [r4, #16]
 800c02e:	4620      	mov	r0, r4
 800c030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c034:	0800df41 	.word	0x0800df41
 800c038:	0800dfe3 	.word	0x0800dfe3

0800c03c <__s2b>:
 800c03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c040:	460c      	mov	r4, r1
 800c042:	4615      	mov	r5, r2
 800c044:	461f      	mov	r7, r3
 800c046:	2209      	movs	r2, #9
 800c048:	3308      	adds	r3, #8
 800c04a:	4606      	mov	r6, r0
 800c04c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c050:	2100      	movs	r1, #0
 800c052:	2201      	movs	r2, #1
 800c054:	429a      	cmp	r2, r3
 800c056:	db09      	blt.n	800c06c <__s2b+0x30>
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff ff47 	bl	800beec <_Balloc>
 800c05e:	b940      	cbnz	r0, 800c072 <__s2b+0x36>
 800c060:	4602      	mov	r2, r0
 800c062:	4b19      	ldr	r3, [pc, #100]	; (800c0c8 <__s2b+0x8c>)
 800c064:	4819      	ldr	r0, [pc, #100]	; (800c0cc <__s2b+0x90>)
 800c066:	21ce      	movs	r1, #206	; 0xce
 800c068:	f000 ffd8 	bl	800d01c <__assert_func>
 800c06c:	0052      	lsls	r2, r2, #1
 800c06e:	3101      	adds	r1, #1
 800c070:	e7f0      	b.n	800c054 <__s2b+0x18>
 800c072:	9b08      	ldr	r3, [sp, #32]
 800c074:	6143      	str	r3, [r0, #20]
 800c076:	2d09      	cmp	r5, #9
 800c078:	f04f 0301 	mov.w	r3, #1
 800c07c:	6103      	str	r3, [r0, #16]
 800c07e:	dd16      	ble.n	800c0ae <__s2b+0x72>
 800c080:	f104 0909 	add.w	r9, r4, #9
 800c084:	46c8      	mov	r8, r9
 800c086:	442c      	add	r4, r5
 800c088:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c08c:	4601      	mov	r1, r0
 800c08e:	3b30      	subs	r3, #48	; 0x30
 800c090:	220a      	movs	r2, #10
 800c092:	4630      	mov	r0, r6
 800c094:	f7ff ff8c 	bl	800bfb0 <__multadd>
 800c098:	45a0      	cmp	r8, r4
 800c09a:	d1f5      	bne.n	800c088 <__s2b+0x4c>
 800c09c:	f1a5 0408 	sub.w	r4, r5, #8
 800c0a0:	444c      	add	r4, r9
 800c0a2:	1b2d      	subs	r5, r5, r4
 800c0a4:	1963      	adds	r3, r4, r5
 800c0a6:	42bb      	cmp	r3, r7
 800c0a8:	db04      	blt.n	800c0b4 <__s2b+0x78>
 800c0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ae:	340a      	adds	r4, #10
 800c0b0:	2509      	movs	r5, #9
 800c0b2:	e7f6      	b.n	800c0a2 <__s2b+0x66>
 800c0b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0b8:	4601      	mov	r1, r0
 800c0ba:	3b30      	subs	r3, #48	; 0x30
 800c0bc:	220a      	movs	r2, #10
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7ff ff76 	bl	800bfb0 <__multadd>
 800c0c4:	e7ee      	b.n	800c0a4 <__s2b+0x68>
 800c0c6:	bf00      	nop
 800c0c8:	0800df41 	.word	0x0800df41
 800c0cc:	0800dfe3 	.word	0x0800dfe3

0800c0d0 <__hi0bits>:
 800c0d0:	0c03      	lsrs	r3, r0, #16
 800c0d2:	041b      	lsls	r3, r3, #16
 800c0d4:	b9d3      	cbnz	r3, 800c10c <__hi0bits+0x3c>
 800c0d6:	0400      	lsls	r0, r0, #16
 800c0d8:	2310      	movs	r3, #16
 800c0da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0de:	bf04      	itt	eq
 800c0e0:	0200      	lsleq	r0, r0, #8
 800c0e2:	3308      	addeq	r3, #8
 800c0e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c0e8:	bf04      	itt	eq
 800c0ea:	0100      	lsleq	r0, r0, #4
 800c0ec:	3304      	addeq	r3, #4
 800c0ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c0f2:	bf04      	itt	eq
 800c0f4:	0080      	lsleq	r0, r0, #2
 800c0f6:	3302      	addeq	r3, #2
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	db05      	blt.n	800c108 <__hi0bits+0x38>
 800c0fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c100:	f103 0301 	add.w	r3, r3, #1
 800c104:	bf08      	it	eq
 800c106:	2320      	moveq	r3, #32
 800c108:	4618      	mov	r0, r3
 800c10a:	4770      	bx	lr
 800c10c:	2300      	movs	r3, #0
 800c10e:	e7e4      	b.n	800c0da <__hi0bits+0xa>

0800c110 <__lo0bits>:
 800c110:	6803      	ldr	r3, [r0, #0]
 800c112:	f013 0207 	ands.w	r2, r3, #7
 800c116:	4601      	mov	r1, r0
 800c118:	d00b      	beq.n	800c132 <__lo0bits+0x22>
 800c11a:	07da      	lsls	r2, r3, #31
 800c11c:	d423      	bmi.n	800c166 <__lo0bits+0x56>
 800c11e:	0798      	lsls	r0, r3, #30
 800c120:	bf49      	itett	mi
 800c122:	085b      	lsrmi	r3, r3, #1
 800c124:	089b      	lsrpl	r3, r3, #2
 800c126:	2001      	movmi	r0, #1
 800c128:	600b      	strmi	r3, [r1, #0]
 800c12a:	bf5c      	itt	pl
 800c12c:	600b      	strpl	r3, [r1, #0]
 800c12e:	2002      	movpl	r0, #2
 800c130:	4770      	bx	lr
 800c132:	b298      	uxth	r0, r3
 800c134:	b9a8      	cbnz	r0, 800c162 <__lo0bits+0x52>
 800c136:	0c1b      	lsrs	r3, r3, #16
 800c138:	2010      	movs	r0, #16
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	b90a      	cbnz	r2, 800c142 <__lo0bits+0x32>
 800c13e:	3008      	adds	r0, #8
 800c140:	0a1b      	lsrs	r3, r3, #8
 800c142:	071a      	lsls	r2, r3, #28
 800c144:	bf04      	itt	eq
 800c146:	091b      	lsreq	r3, r3, #4
 800c148:	3004      	addeq	r0, #4
 800c14a:	079a      	lsls	r2, r3, #30
 800c14c:	bf04      	itt	eq
 800c14e:	089b      	lsreq	r3, r3, #2
 800c150:	3002      	addeq	r0, #2
 800c152:	07da      	lsls	r2, r3, #31
 800c154:	d403      	bmi.n	800c15e <__lo0bits+0x4e>
 800c156:	085b      	lsrs	r3, r3, #1
 800c158:	f100 0001 	add.w	r0, r0, #1
 800c15c:	d005      	beq.n	800c16a <__lo0bits+0x5a>
 800c15e:	600b      	str	r3, [r1, #0]
 800c160:	4770      	bx	lr
 800c162:	4610      	mov	r0, r2
 800c164:	e7e9      	b.n	800c13a <__lo0bits+0x2a>
 800c166:	2000      	movs	r0, #0
 800c168:	4770      	bx	lr
 800c16a:	2020      	movs	r0, #32
 800c16c:	4770      	bx	lr
	...

0800c170 <__i2b>:
 800c170:	b510      	push	{r4, lr}
 800c172:	460c      	mov	r4, r1
 800c174:	2101      	movs	r1, #1
 800c176:	f7ff feb9 	bl	800beec <_Balloc>
 800c17a:	4602      	mov	r2, r0
 800c17c:	b928      	cbnz	r0, 800c18a <__i2b+0x1a>
 800c17e:	4b05      	ldr	r3, [pc, #20]	; (800c194 <__i2b+0x24>)
 800c180:	4805      	ldr	r0, [pc, #20]	; (800c198 <__i2b+0x28>)
 800c182:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c186:	f000 ff49 	bl	800d01c <__assert_func>
 800c18a:	2301      	movs	r3, #1
 800c18c:	6144      	str	r4, [r0, #20]
 800c18e:	6103      	str	r3, [r0, #16]
 800c190:	bd10      	pop	{r4, pc}
 800c192:	bf00      	nop
 800c194:	0800df41 	.word	0x0800df41
 800c198:	0800dfe3 	.word	0x0800dfe3

0800c19c <__multiply>:
 800c19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a0:	4691      	mov	r9, r2
 800c1a2:	690a      	ldr	r2, [r1, #16]
 800c1a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	bfb8      	it	lt
 800c1ac:	460b      	movlt	r3, r1
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	bfbc      	itt	lt
 800c1b2:	464c      	movlt	r4, r9
 800c1b4:	4699      	movlt	r9, r3
 800c1b6:	6927      	ldr	r7, [r4, #16]
 800c1b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1bc:	68a3      	ldr	r3, [r4, #8]
 800c1be:	6861      	ldr	r1, [r4, #4]
 800c1c0:	eb07 060a 	add.w	r6, r7, sl
 800c1c4:	42b3      	cmp	r3, r6
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	bfb8      	it	lt
 800c1ca:	3101      	addlt	r1, #1
 800c1cc:	f7ff fe8e 	bl	800beec <_Balloc>
 800c1d0:	b930      	cbnz	r0, 800c1e0 <__multiply+0x44>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	4b44      	ldr	r3, [pc, #272]	; (800c2e8 <__multiply+0x14c>)
 800c1d6:	4845      	ldr	r0, [pc, #276]	; (800c2ec <__multiply+0x150>)
 800c1d8:	f240 115d 	movw	r1, #349	; 0x15d
 800c1dc:	f000 ff1e 	bl	800d01c <__assert_func>
 800c1e0:	f100 0514 	add.w	r5, r0, #20
 800c1e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1e8:	462b      	mov	r3, r5
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	4543      	cmp	r3, r8
 800c1ee:	d321      	bcc.n	800c234 <__multiply+0x98>
 800c1f0:	f104 0314 	add.w	r3, r4, #20
 800c1f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c1f8:	f109 0314 	add.w	r3, r9, #20
 800c1fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c200:	9202      	str	r2, [sp, #8]
 800c202:	1b3a      	subs	r2, r7, r4
 800c204:	3a15      	subs	r2, #21
 800c206:	f022 0203 	bic.w	r2, r2, #3
 800c20a:	3204      	adds	r2, #4
 800c20c:	f104 0115 	add.w	r1, r4, #21
 800c210:	428f      	cmp	r7, r1
 800c212:	bf38      	it	cc
 800c214:	2204      	movcc	r2, #4
 800c216:	9201      	str	r2, [sp, #4]
 800c218:	9a02      	ldr	r2, [sp, #8]
 800c21a:	9303      	str	r3, [sp, #12]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d80c      	bhi.n	800c23a <__multiply+0x9e>
 800c220:	2e00      	cmp	r6, #0
 800c222:	dd03      	ble.n	800c22c <__multiply+0x90>
 800c224:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d05a      	beq.n	800c2e2 <__multiply+0x146>
 800c22c:	6106      	str	r6, [r0, #16]
 800c22e:	b005      	add	sp, #20
 800c230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c234:	f843 2b04 	str.w	r2, [r3], #4
 800c238:	e7d8      	b.n	800c1ec <__multiply+0x50>
 800c23a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c23e:	f1ba 0f00 	cmp.w	sl, #0
 800c242:	d024      	beq.n	800c28e <__multiply+0xf2>
 800c244:	f104 0e14 	add.w	lr, r4, #20
 800c248:	46a9      	mov	r9, r5
 800c24a:	f04f 0c00 	mov.w	ip, #0
 800c24e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c252:	f8d9 1000 	ldr.w	r1, [r9]
 800c256:	fa1f fb82 	uxth.w	fp, r2
 800c25a:	b289      	uxth	r1, r1
 800c25c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c260:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c264:	f8d9 2000 	ldr.w	r2, [r9]
 800c268:	4461      	add	r1, ip
 800c26a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c26e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c272:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c276:	b289      	uxth	r1, r1
 800c278:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c27c:	4577      	cmp	r7, lr
 800c27e:	f849 1b04 	str.w	r1, [r9], #4
 800c282:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c286:	d8e2      	bhi.n	800c24e <__multiply+0xb2>
 800c288:	9a01      	ldr	r2, [sp, #4]
 800c28a:	f845 c002 	str.w	ip, [r5, r2]
 800c28e:	9a03      	ldr	r2, [sp, #12]
 800c290:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c294:	3304      	adds	r3, #4
 800c296:	f1b9 0f00 	cmp.w	r9, #0
 800c29a:	d020      	beq.n	800c2de <__multiply+0x142>
 800c29c:	6829      	ldr	r1, [r5, #0]
 800c29e:	f104 0c14 	add.w	ip, r4, #20
 800c2a2:	46ae      	mov	lr, r5
 800c2a4:	f04f 0a00 	mov.w	sl, #0
 800c2a8:	f8bc b000 	ldrh.w	fp, [ip]
 800c2ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c2b0:	fb09 220b 	mla	r2, r9, fp, r2
 800c2b4:	4492      	add	sl, r2
 800c2b6:	b289      	uxth	r1, r1
 800c2b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c2bc:	f84e 1b04 	str.w	r1, [lr], #4
 800c2c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c2c4:	f8be 1000 	ldrh.w	r1, [lr]
 800c2c8:	0c12      	lsrs	r2, r2, #16
 800c2ca:	fb09 1102 	mla	r1, r9, r2, r1
 800c2ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c2d2:	4567      	cmp	r7, ip
 800c2d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c2d8:	d8e6      	bhi.n	800c2a8 <__multiply+0x10c>
 800c2da:	9a01      	ldr	r2, [sp, #4]
 800c2dc:	50a9      	str	r1, [r5, r2]
 800c2de:	3504      	adds	r5, #4
 800c2e0:	e79a      	b.n	800c218 <__multiply+0x7c>
 800c2e2:	3e01      	subs	r6, #1
 800c2e4:	e79c      	b.n	800c220 <__multiply+0x84>
 800c2e6:	bf00      	nop
 800c2e8:	0800df41 	.word	0x0800df41
 800c2ec:	0800dfe3 	.word	0x0800dfe3

0800c2f0 <__pow5mult>:
 800c2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f4:	4615      	mov	r5, r2
 800c2f6:	f012 0203 	ands.w	r2, r2, #3
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	460f      	mov	r7, r1
 800c2fe:	d007      	beq.n	800c310 <__pow5mult+0x20>
 800c300:	4c25      	ldr	r4, [pc, #148]	; (800c398 <__pow5mult+0xa8>)
 800c302:	3a01      	subs	r2, #1
 800c304:	2300      	movs	r3, #0
 800c306:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c30a:	f7ff fe51 	bl	800bfb0 <__multadd>
 800c30e:	4607      	mov	r7, r0
 800c310:	10ad      	asrs	r5, r5, #2
 800c312:	d03d      	beq.n	800c390 <__pow5mult+0xa0>
 800c314:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c316:	b97c      	cbnz	r4, 800c338 <__pow5mult+0x48>
 800c318:	2010      	movs	r0, #16
 800c31a:	f000 feaf 	bl	800d07c <malloc>
 800c31e:	4602      	mov	r2, r0
 800c320:	6270      	str	r0, [r6, #36]	; 0x24
 800c322:	b928      	cbnz	r0, 800c330 <__pow5mult+0x40>
 800c324:	4b1d      	ldr	r3, [pc, #116]	; (800c39c <__pow5mult+0xac>)
 800c326:	481e      	ldr	r0, [pc, #120]	; (800c3a0 <__pow5mult+0xb0>)
 800c328:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c32c:	f000 fe76 	bl	800d01c <__assert_func>
 800c330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c334:	6004      	str	r4, [r0, #0]
 800c336:	60c4      	str	r4, [r0, #12]
 800c338:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c33c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c340:	b94c      	cbnz	r4, 800c356 <__pow5mult+0x66>
 800c342:	f240 2171 	movw	r1, #625	; 0x271
 800c346:	4630      	mov	r0, r6
 800c348:	f7ff ff12 	bl	800c170 <__i2b>
 800c34c:	2300      	movs	r3, #0
 800c34e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c352:	4604      	mov	r4, r0
 800c354:	6003      	str	r3, [r0, #0]
 800c356:	f04f 0900 	mov.w	r9, #0
 800c35a:	07eb      	lsls	r3, r5, #31
 800c35c:	d50a      	bpl.n	800c374 <__pow5mult+0x84>
 800c35e:	4639      	mov	r1, r7
 800c360:	4622      	mov	r2, r4
 800c362:	4630      	mov	r0, r6
 800c364:	f7ff ff1a 	bl	800c19c <__multiply>
 800c368:	4639      	mov	r1, r7
 800c36a:	4680      	mov	r8, r0
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7ff fdfd 	bl	800bf6c <_Bfree>
 800c372:	4647      	mov	r7, r8
 800c374:	106d      	asrs	r5, r5, #1
 800c376:	d00b      	beq.n	800c390 <__pow5mult+0xa0>
 800c378:	6820      	ldr	r0, [r4, #0]
 800c37a:	b938      	cbnz	r0, 800c38c <__pow5mult+0x9c>
 800c37c:	4622      	mov	r2, r4
 800c37e:	4621      	mov	r1, r4
 800c380:	4630      	mov	r0, r6
 800c382:	f7ff ff0b 	bl	800c19c <__multiply>
 800c386:	6020      	str	r0, [r4, #0]
 800c388:	f8c0 9000 	str.w	r9, [r0]
 800c38c:	4604      	mov	r4, r0
 800c38e:	e7e4      	b.n	800c35a <__pow5mult+0x6a>
 800c390:	4638      	mov	r0, r7
 800c392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c396:	bf00      	nop
 800c398:	0800e130 	.word	0x0800e130
 800c39c:	0800dfcc 	.word	0x0800dfcc
 800c3a0:	0800dfe3 	.word	0x0800dfe3

0800c3a4 <__lshift>:
 800c3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	6849      	ldr	r1, [r1, #4]
 800c3ac:	6923      	ldr	r3, [r4, #16]
 800c3ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3b2:	68a3      	ldr	r3, [r4, #8]
 800c3b4:	4607      	mov	r7, r0
 800c3b6:	4691      	mov	r9, r2
 800c3b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3bc:	f108 0601 	add.w	r6, r8, #1
 800c3c0:	42b3      	cmp	r3, r6
 800c3c2:	db0b      	blt.n	800c3dc <__lshift+0x38>
 800c3c4:	4638      	mov	r0, r7
 800c3c6:	f7ff fd91 	bl	800beec <_Balloc>
 800c3ca:	4605      	mov	r5, r0
 800c3cc:	b948      	cbnz	r0, 800c3e2 <__lshift+0x3e>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	4b2a      	ldr	r3, [pc, #168]	; (800c47c <__lshift+0xd8>)
 800c3d2:	482b      	ldr	r0, [pc, #172]	; (800c480 <__lshift+0xdc>)
 800c3d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c3d8:	f000 fe20 	bl	800d01c <__assert_func>
 800c3dc:	3101      	adds	r1, #1
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	e7ee      	b.n	800c3c0 <__lshift+0x1c>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	f100 0114 	add.w	r1, r0, #20
 800c3e8:	f100 0210 	add.w	r2, r0, #16
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	4553      	cmp	r3, sl
 800c3f0:	db37      	blt.n	800c462 <__lshift+0xbe>
 800c3f2:	6920      	ldr	r0, [r4, #16]
 800c3f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3f8:	f104 0314 	add.w	r3, r4, #20
 800c3fc:	f019 091f 	ands.w	r9, r9, #31
 800c400:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c404:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c408:	d02f      	beq.n	800c46a <__lshift+0xc6>
 800c40a:	f1c9 0e20 	rsb	lr, r9, #32
 800c40e:	468a      	mov	sl, r1
 800c410:	f04f 0c00 	mov.w	ip, #0
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	fa02 f209 	lsl.w	r2, r2, r9
 800c41a:	ea42 020c 	orr.w	r2, r2, ip
 800c41e:	f84a 2b04 	str.w	r2, [sl], #4
 800c422:	f853 2b04 	ldr.w	r2, [r3], #4
 800c426:	4298      	cmp	r0, r3
 800c428:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c42c:	d8f2      	bhi.n	800c414 <__lshift+0x70>
 800c42e:	1b03      	subs	r3, r0, r4
 800c430:	3b15      	subs	r3, #21
 800c432:	f023 0303 	bic.w	r3, r3, #3
 800c436:	3304      	adds	r3, #4
 800c438:	f104 0215 	add.w	r2, r4, #21
 800c43c:	4290      	cmp	r0, r2
 800c43e:	bf38      	it	cc
 800c440:	2304      	movcc	r3, #4
 800c442:	f841 c003 	str.w	ip, [r1, r3]
 800c446:	f1bc 0f00 	cmp.w	ip, #0
 800c44a:	d001      	beq.n	800c450 <__lshift+0xac>
 800c44c:	f108 0602 	add.w	r6, r8, #2
 800c450:	3e01      	subs	r6, #1
 800c452:	4638      	mov	r0, r7
 800c454:	612e      	str	r6, [r5, #16]
 800c456:	4621      	mov	r1, r4
 800c458:	f7ff fd88 	bl	800bf6c <_Bfree>
 800c45c:	4628      	mov	r0, r5
 800c45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c462:	f842 0f04 	str.w	r0, [r2, #4]!
 800c466:	3301      	adds	r3, #1
 800c468:	e7c1      	b.n	800c3ee <__lshift+0x4a>
 800c46a:	3904      	subs	r1, #4
 800c46c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c470:	f841 2f04 	str.w	r2, [r1, #4]!
 800c474:	4298      	cmp	r0, r3
 800c476:	d8f9      	bhi.n	800c46c <__lshift+0xc8>
 800c478:	e7ea      	b.n	800c450 <__lshift+0xac>
 800c47a:	bf00      	nop
 800c47c:	0800df41 	.word	0x0800df41
 800c480:	0800dfe3 	.word	0x0800dfe3

0800c484 <__mcmp>:
 800c484:	b530      	push	{r4, r5, lr}
 800c486:	6902      	ldr	r2, [r0, #16]
 800c488:	690c      	ldr	r4, [r1, #16]
 800c48a:	1b12      	subs	r2, r2, r4
 800c48c:	d10e      	bne.n	800c4ac <__mcmp+0x28>
 800c48e:	f100 0314 	add.w	r3, r0, #20
 800c492:	3114      	adds	r1, #20
 800c494:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c498:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c49c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c4a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c4a4:	42a5      	cmp	r5, r4
 800c4a6:	d003      	beq.n	800c4b0 <__mcmp+0x2c>
 800c4a8:	d305      	bcc.n	800c4b6 <__mcmp+0x32>
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	bd30      	pop	{r4, r5, pc}
 800c4b0:	4283      	cmp	r3, r0
 800c4b2:	d3f3      	bcc.n	800c49c <__mcmp+0x18>
 800c4b4:	e7fa      	b.n	800c4ac <__mcmp+0x28>
 800c4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ba:	e7f7      	b.n	800c4ac <__mcmp+0x28>

0800c4bc <__mdiff>:
 800c4bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	4690      	mov	r8, r2
 800c4ca:	f7ff ffdb 	bl	800c484 <__mcmp>
 800c4ce:	1e05      	subs	r5, r0, #0
 800c4d0:	d110      	bne.n	800c4f4 <__mdiff+0x38>
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f7ff fd09 	bl	800beec <_Balloc>
 800c4da:	b930      	cbnz	r0, 800c4ea <__mdiff+0x2e>
 800c4dc:	4b3a      	ldr	r3, [pc, #232]	; (800c5c8 <__mdiff+0x10c>)
 800c4de:	4602      	mov	r2, r0
 800c4e0:	f240 2132 	movw	r1, #562	; 0x232
 800c4e4:	4839      	ldr	r0, [pc, #228]	; (800c5cc <__mdiff+0x110>)
 800c4e6:	f000 fd99 	bl	800d01c <__assert_func>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f4:	bfa4      	itt	ge
 800c4f6:	4643      	movge	r3, r8
 800c4f8:	46a0      	movge	r8, r4
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c500:	bfa6      	itte	ge
 800c502:	461c      	movge	r4, r3
 800c504:	2500      	movge	r5, #0
 800c506:	2501      	movlt	r5, #1
 800c508:	f7ff fcf0 	bl	800beec <_Balloc>
 800c50c:	b920      	cbnz	r0, 800c518 <__mdiff+0x5c>
 800c50e:	4b2e      	ldr	r3, [pc, #184]	; (800c5c8 <__mdiff+0x10c>)
 800c510:	4602      	mov	r2, r0
 800c512:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c516:	e7e5      	b.n	800c4e4 <__mdiff+0x28>
 800c518:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c51c:	6926      	ldr	r6, [r4, #16]
 800c51e:	60c5      	str	r5, [r0, #12]
 800c520:	f104 0914 	add.w	r9, r4, #20
 800c524:	f108 0514 	add.w	r5, r8, #20
 800c528:	f100 0e14 	add.w	lr, r0, #20
 800c52c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c530:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c534:	f108 0210 	add.w	r2, r8, #16
 800c538:	46f2      	mov	sl, lr
 800c53a:	2100      	movs	r1, #0
 800c53c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c540:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c544:	fa1f f883 	uxth.w	r8, r3
 800c548:	fa11 f18b 	uxtah	r1, r1, fp
 800c54c:	0c1b      	lsrs	r3, r3, #16
 800c54e:	eba1 0808 	sub.w	r8, r1, r8
 800c552:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c556:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c55a:	fa1f f888 	uxth.w	r8, r8
 800c55e:	1419      	asrs	r1, r3, #16
 800c560:	454e      	cmp	r6, r9
 800c562:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c566:	f84a 3b04 	str.w	r3, [sl], #4
 800c56a:	d8e7      	bhi.n	800c53c <__mdiff+0x80>
 800c56c:	1b33      	subs	r3, r6, r4
 800c56e:	3b15      	subs	r3, #21
 800c570:	f023 0303 	bic.w	r3, r3, #3
 800c574:	3304      	adds	r3, #4
 800c576:	3415      	adds	r4, #21
 800c578:	42a6      	cmp	r6, r4
 800c57a:	bf38      	it	cc
 800c57c:	2304      	movcc	r3, #4
 800c57e:	441d      	add	r5, r3
 800c580:	4473      	add	r3, lr
 800c582:	469e      	mov	lr, r3
 800c584:	462e      	mov	r6, r5
 800c586:	4566      	cmp	r6, ip
 800c588:	d30e      	bcc.n	800c5a8 <__mdiff+0xec>
 800c58a:	f10c 0203 	add.w	r2, ip, #3
 800c58e:	1b52      	subs	r2, r2, r5
 800c590:	f022 0203 	bic.w	r2, r2, #3
 800c594:	3d03      	subs	r5, #3
 800c596:	45ac      	cmp	ip, r5
 800c598:	bf38      	it	cc
 800c59a:	2200      	movcc	r2, #0
 800c59c:	441a      	add	r2, r3
 800c59e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c5a2:	b17b      	cbz	r3, 800c5c4 <__mdiff+0x108>
 800c5a4:	6107      	str	r7, [r0, #16]
 800c5a6:	e7a3      	b.n	800c4f0 <__mdiff+0x34>
 800c5a8:	f856 8b04 	ldr.w	r8, [r6], #4
 800c5ac:	fa11 f288 	uxtah	r2, r1, r8
 800c5b0:	1414      	asrs	r4, r2, #16
 800c5b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c5b6:	b292      	uxth	r2, r2
 800c5b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c5bc:	f84e 2b04 	str.w	r2, [lr], #4
 800c5c0:	1421      	asrs	r1, r4, #16
 800c5c2:	e7e0      	b.n	800c586 <__mdiff+0xca>
 800c5c4:	3f01      	subs	r7, #1
 800c5c6:	e7ea      	b.n	800c59e <__mdiff+0xe2>
 800c5c8:	0800df41 	.word	0x0800df41
 800c5cc:	0800dfe3 	.word	0x0800dfe3

0800c5d0 <__ulp>:
 800c5d0:	b082      	sub	sp, #8
 800c5d2:	ed8d 0b00 	vstr	d0, [sp]
 800c5d6:	9b01      	ldr	r3, [sp, #4]
 800c5d8:	4912      	ldr	r1, [pc, #72]	; (800c624 <__ulp+0x54>)
 800c5da:	4019      	ands	r1, r3
 800c5dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c5e0:	2900      	cmp	r1, #0
 800c5e2:	dd05      	ble.n	800c5f0 <__ulp+0x20>
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	ec43 2b10 	vmov	d0, r2, r3
 800c5ec:	b002      	add	sp, #8
 800c5ee:	4770      	bx	lr
 800c5f0:	4249      	negs	r1, r1
 800c5f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c5f6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c5fa:	f04f 0200 	mov.w	r2, #0
 800c5fe:	f04f 0300 	mov.w	r3, #0
 800c602:	da04      	bge.n	800c60e <__ulp+0x3e>
 800c604:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c608:	fa41 f300 	asr.w	r3, r1, r0
 800c60c:	e7ec      	b.n	800c5e8 <__ulp+0x18>
 800c60e:	f1a0 0114 	sub.w	r1, r0, #20
 800c612:	291e      	cmp	r1, #30
 800c614:	bfda      	itte	le
 800c616:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c61a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c61e:	2101      	movgt	r1, #1
 800c620:	460a      	mov	r2, r1
 800c622:	e7e1      	b.n	800c5e8 <__ulp+0x18>
 800c624:	7ff00000 	.word	0x7ff00000

0800c628 <__b2d>:
 800c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62a:	6905      	ldr	r5, [r0, #16]
 800c62c:	f100 0714 	add.w	r7, r0, #20
 800c630:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c634:	1f2e      	subs	r6, r5, #4
 800c636:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c63a:	4620      	mov	r0, r4
 800c63c:	f7ff fd48 	bl	800c0d0 <__hi0bits>
 800c640:	f1c0 0320 	rsb	r3, r0, #32
 800c644:	280a      	cmp	r0, #10
 800c646:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c6c4 <__b2d+0x9c>
 800c64a:	600b      	str	r3, [r1, #0]
 800c64c:	dc14      	bgt.n	800c678 <__b2d+0x50>
 800c64e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c652:	fa24 f10e 	lsr.w	r1, r4, lr
 800c656:	42b7      	cmp	r7, r6
 800c658:	ea41 030c 	orr.w	r3, r1, ip
 800c65c:	bf34      	ite	cc
 800c65e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c662:	2100      	movcs	r1, #0
 800c664:	3015      	adds	r0, #21
 800c666:	fa04 f000 	lsl.w	r0, r4, r0
 800c66a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c66e:	ea40 0201 	orr.w	r2, r0, r1
 800c672:	ec43 2b10 	vmov	d0, r2, r3
 800c676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c678:	42b7      	cmp	r7, r6
 800c67a:	bf3a      	itte	cc
 800c67c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c680:	f1a5 0608 	subcc.w	r6, r5, #8
 800c684:	2100      	movcs	r1, #0
 800c686:	380b      	subs	r0, #11
 800c688:	d017      	beq.n	800c6ba <__b2d+0x92>
 800c68a:	f1c0 0c20 	rsb	ip, r0, #32
 800c68e:	fa04 f500 	lsl.w	r5, r4, r0
 800c692:	42be      	cmp	r6, r7
 800c694:	fa21 f40c 	lsr.w	r4, r1, ip
 800c698:	ea45 0504 	orr.w	r5, r5, r4
 800c69c:	bf8c      	ite	hi
 800c69e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c6a2:	2400      	movls	r4, #0
 800c6a4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c6a8:	fa01 f000 	lsl.w	r0, r1, r0
 800c6ac:	fa24 f40c 	lsr.w	r4, r4, ip
 800c6b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c6b4:	ea40 0204 	orr.w	r2, r0, r4
 800c6b8:	e7db      	b.n	800c672 <__b2d+0x4a>
 800c6ba:	ea44 030c 	orr.w	r3, r4, ip
 800c6be:	460a      	mov	r2, r1
 800c6c0:	e7d7      	b.n	800c672 <__b2d+0x4a>
 800c6c2:	bf00      	nop
 800c6c4:	3ff00000 	.word	0x3ff00000

0800c6c8 <__d2b>:
 800c6c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6cc:	4689      	mov	r9, r1
 800c6ce:	2101      	movs	r1, #1
 800c6d0:	ec57 6b10 	vmov	r6, r7, d0
 800c6d4:	4690      	mov	r8, r2
 800c6d6:	f7ff fc09 	bl	800beec <_Balloc>
 800c6da:	4604      	mov	r4, r0
 800c6dc:	b930      	cbnz	r0, 800c6ec <__d2b+0x24>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	4b25      	ldr	r3, [pc, #148]	; (800c778 <__d2b+0xb0>)
 800c6e2:	4826      	ldr	r0, [pc, #152]	; (800c77c <__d2b+0xb4>)
 800c6e4:	f240 310a 	movw	r1, #778	; 0x30a
 800c6e8:	f000 fc98 	bl	800d01c <__assert_func>
 800c6ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c6f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6f4:	bb35      	cbnz	r5, 800c744 <__d2b+0x7c>
 800c6f6:	2e00      	cmp	r6, #0
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	d028      	beq.n	800c74e <__d2b+0x86>
 800c6fc:	4668      	mov	r0, sp
 800c6fe:	9600      	str	r6, [sp, #0]
 800c700:	f7ff fd06 	bl	800c110 <__lo0bits>
 800c704:	9900      	ldr	r1, [sp, #0]
 800c706:	b300      	cbz	r0, 800c74a <__d2b+0x82>
 800c708:	9a01      	ldr	r2, [sp, #4]
 800c70a:	f1c0 0320 	rsb	r3, r0, #32
 800c70e:	fa02 f303 	lsl.w	r3, r2, r3
 800c712:	430b      	orrs	r3, r1
 800c714:	40c2      	lsrs	r2, r0
 800c716:	6163      	str	r3, [r4, #20]
 800c718:	9201      	str	r2, [sp, #4]
 800c71a:	9b01      	ldr	r3, [sp, #4]
 800c71c:	61a3      	str	r3, [r4, #24]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	bf14      	ite	ne
 800c722:	2202      	movne	r2, #2
 800c724:	2201      	moveq	r2, #1
 800c726:	6122      	str	r2, [r4, #16]
 800c728:	b1d5      	cbz	r5, 800c760 <__d2b+0x98>
 800c72a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c72e:	4405      	add	r5, r0
 800c730:	f8c9 5000 	str.w	r5, [r9]
 800c734:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c738:	f8c8 0000 	str.w	r0, [r8]
 800c73c:	4620      	mov	r0, r4
 800c73e:	b003      	add	sp, #12
 800c740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c748:	e7d5      	b.n	800c6f6 <__d2b+0x2e>
 800c74a:	6161      	str	r1, [r4, #20]
 800c74c:	e7e5      	b.n	800c71a <__d2b+0x52>
 800c74e:	a801      	add	r0, sp, #4
 800c750:	f7ff fcde 	bl	800c110 <__lo0bits>
 800c754:	9b01      	ldr	r3, [sp, #4]
 800c756:	6163      	str	r3, [r4, #20]
 800c758:	2201      	movs	r2, #1
 800c75a:	6122      	str	r2, [r4, #16]
 800c75c:	3020      	adds	r0, #32
 800c75e:	e7e3      	b.n	800c728 <__d2b+0x60>
 800c760:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c764:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c768:	f8c9 0000 	str.w	r0, [r9]
 800c76c:	6918      	ldr	r0, [r3, #16]
 800c76e:	f7ff fcaf 	bl	800c0d0 <__hi0bits>
 800c772:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c776:	e7df      	b.n	800c738 <__d2b+0x70>
 800c778:	0800df41 	.word	0x0800df41
 800c77c:	0800dfe3 	.word	0x0800dfe3

0800c780 <__ratio>:
 800c780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c784:	4688      	mov	r8, r1
 800c786:	4669      	mov	r1, sp
 800c788:	4681      	mov	r9, r0
 800c78a:	f7ff ff4d 	bl	800c628 <__b2d>
 800c78e:	a901      	add	r1, sp, #4
 800c790:	4640      	mov	r0, r8
 800c792:	ec55 4b10 	vmov	r4, r5, d0
 800c796:	f7ff ff47 	bl	800c628 <__b2d>
 800c79a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c79e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c7a2:	eba3 0c02 	sub.w	ip, r3, r2
 800c7a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c7aa:	1a9b      	subs	r3, r3, r2
 800c7ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c7b0:	ec51 0b10 	vmov	r0, r1, d0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	bfd6      	itet	le
 800c7b8:	460a      	movle	r2, r1
 800c7ba:	462a      	movgt	r2, r5
 800c7bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c7c0:	468b      	mov	fp, r1
 800c7c2:	462f      	mov	r7, r5
 800c7c4:	bfd4      	ite	le
 800c7c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c7ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	ee10 2a10 	vmov	r2, s0
 800c7d4:	465b      	mov	r3, fp
 800c7d6:	4639      	mov	r1, r7
 800c7d8:	f7f4 f8a8 	bl	800092c <__aeabi_ddiv>
 800c7dc:	ec41 0b10 	vmov	d0, r0, r1
 800c7e0:	b003      	add	sp, #12
 800c7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7e6 <__copybits>:
 800c7e6:	3901      	subs	r1, #1
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	1149      	asrs	r1, r1, #5
 800c7ec:	6914      	ldr	r4, [r2, #16]
 800c7ee:	3101      	adds	r1, #1
 800c7f0:	f102 0314 	add.w	r3, r2, #20
 800c7f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c7f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c7fc:	1f05      	subs	r5, r0, #4
 800c7fe:	42a3      	cmp	r3, r4
 800c800:	d30c      	bcc.n	800c81c <__copybits+0x36>
 800c802:	1aa3      	subs	r3, r4, r2
 800c804:	3b11      	subs	r3, #17
 800c806:	f023 0303 	bic.w	r3, r3, #3
 800c80a:	3211      	adds	r2, #17
 800c80c:	42a2      	cmp	r2, r4
 800c80e:	bf88      	it	hi
 800c810:	2300      	movhi	r3, #0
 800c812:	4418      	add	r0, r3
 800c814:	2300      	movs	r3, #0
 800c816:	4288      	cmp	r0, r1
 800c818:	d305      	bcc.n	800c826 <__copybits+0x40>
 800c81a:	bd70      	pop	{r4, r5, r6, pc}
 800c81c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c820:	f845 6f04 	str.w	r6, [r5, #4]!
 800c824:	e7eb      	b.n	800c7fe <__copybits+0x18>
 800c826:	f840 3b04 	str.w	r3, [r0], #4
 800c82a:	e7f4      	b.n	800c816 <__copybits+0x30>

0800c82c <__any_on>:
 800c82c:	f100 0214 	add.w	r2, r0, #20
 800c830:	6900      	ldr	r0, [r0, #16]
 800c832:	114b      	asrs	r3, r1, #5
 800c834:	4298      	cmp	r0, r3
 800c836:	b510      	push	{r4, lr}
 800c838:	db11      	blt.n	800c85e <__any_on+0x32>
 800c83a:	dd0a      	ble.n	800c852 <__any_on+0x26>
 800c83c:	f011 011f 	ands.w	r1, r1, #31
 800c840:	d007      	beq.n	800c852 <__any_on+0x26>
 800c842:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c846:	fa24 f001 	lsr.w	r0, r4, r1
 800c84a:	fa00 f101 	lsl.w	r1, r0, r1
 800c84e:	428c      	cmp	r4, r1
 800c850:	d10b      	bne.n	800c86a <__any_on+0x3e>
 800c852:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c856:	4293      	cmp	r3, r2
 800c858:	d803      	bhi.n	800c862 <__any_on+0x36>
 800c85a:	2000      	movs	r0, #0
 800c85c:	bd10      	pop	{r4, pc}
 800c85e:	4603      	mov	r3, r0
 800c860:	e7f7      	b.n	800c852 <__any_on+0x26>
 800c862:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c866:	2900      	cmp	r1, #0
 800c868:	d0f5      	beq.n	800c856 <__any_on+0x2a>
 800c86a:	2001      	movs	r0, #1
 800c86c:	e7f6      	b.n	800c85c <__any_on+0x30>

0800c86e <_calloc_r>:
 800c86e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c870:	fba1 2402 	umull	r2, r4, r1, r2
 800c874:	b94c      	cbnz	r4, 800c88a <_calloc_r+0x1c>
 800c876:	4611      	mov	r1, r2
 800c878:	9201      	str	r2, [sp, #4]
 800c87a:	f000 f82f 	bl	800c8dc <_malloc_r>
 800c87e:	9a01      	ldr	r2, [sp, #4]
 800c880:	4605      	mov	r5, r0
 800c882:	b930      	cbnz	r0, 800c892 <_calloc_r+0x24>
 800c884:	4628      	mov	r0, r5
 800c886:	b003      	add	sp, #12
 800c888:	bd30      	pop	{r4, r5, pc}
 800c88a:	220c      	movs	r2, #12
 800c88c:	6002      	str	r2, [r0, #0]
 800c88e:	2500      	movs	r5, #0
 800c890:	e7f8      	b.n	800c884 <_calloc_r+0x16>
 800c892:	4621      	mov	r1, r4
 800c894:	f7fd febe 	bl	800a614 <memset>
 800c898:	e7f4      	b.n	800c884 <_calloc_r+0x16>
	...

0800c89c <sbrk_aligned>:
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	4e0e      	ldr	r6, [pc, #56]	; (800c8d8 <sbrk_aligned+0x3c>)
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	6831      	ldr	r1, [r6, #0]
 800c8a4:	4605      	mov	r5, r0
 800c8a6:	b911      	cbnz	r1, 800c8ae <sbrk_aligned+0x12>
 800c8a8:	f000 fb86 	bl	800cfb8 <_sbrk_r>
 800c8ac:	6030      	str	r0, [r6, #0]
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	f000 fb81 	bl	800cfb8 <_sbrk_r>
 800c8b6:	1c43      	adds	r3, r0, #1
 800c8b8:	d00a      	beq.n	800c8d0 <sbrk_aligned+0x34>
 800c8ba:	1cc4      	adds	r4, r0, #3
 800c8bc:	f024 0403 	bic.w	r4, r4, #3
 800c8c0:	42a0      	cmp	r0, r4
 800c8c2:	d007      	beq.n	800c8d4 <sbrk_aligned+0x38>
 800c8c4:	1a21      	subs	r1, r4, r0
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f000 fb76 	bl	800cfb8 <_sbrk_r>
 800c8cc:	3001      	adds	r0, #1
 800c8ce:	d101      	bne.n	800c8d4 <sbrk_aligned+0x38>
 800c8d0:	f04f 34ff 	mov.w	r4, #4294967295
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	bd70      	pop	{r4, r5, r6, pc}
 800c8d8:	2001472c 	.word	0x2001472c

0800c8dc <_malloc_r>:
 800c8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e0:	1ccd      	adds	r5, r1, #3
 800c8e2:	f025 0503 	bic.w	r5, r5, #3
 800c8e6:	3508      	adds	r5, #8
 800c8e8:	2d0c      	cmp	r5, #12
 800c8ea:	bf38      	it	cc
 800c8ec:	250c      	movcc	r5, #12
 800c8ee:	2d00      	cmp	r5, #0
 800c8f0:	4607      	mov	r7, r0
 800c8f2:	db01      	blt.n	800c8f8 <_malloc_r+0x1c>
 800c8f4:	42a9      	cmp	r1, r5
 800c8f6:	d905      	bls.n	800c904 <_malloc_r+0x28>
 800c8f8:	230c      	movs	r3, #12
 800c8fa:	603b      	str	r3, [r7, #0]
 800c8fc:	2600      	movs	r6, #0
 800c8fe:	4630      	mov	r0, r6
 800c900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c904:	4e2e      	ldr	r6, [pc, #184]	; (800c9c0 <_malloc_r+0xe4>)
 800c906:	f000 fbdb 	bl	800d0c0 <__malloc_lock>
 800c90a:	6833      	ldr	r3, [r6, #0]
 800c90c:	461c      	mov	r4, r3
 800c90e:	bb34      	cbnz	r4, 800c95e <_malloc_r+0x82>
 800c910:	4629      	mov	r1, r5
 800c912:	4638      	mov	r0, r7
 800c914:	f7ff ffc2 	bl	800c89c <sbrk_aligned>
 800c918:	1c43      	adds	r3, r0, #1
 800c91a:	4604      	mov	r4, r0
 800c91c:	d14d      	bne.n	800c9ba <_malloc_r+0xde>
 800c91e:	6834      	ldr	r4, [r6, #0]
 800c920:	4626      	mov	r6, r4
 800c922:	2e00      	cmp	r6, #0
 800c924:	d140      	bne.n	800c9a8 <_malloc_r+0xcc>
 800c926:	6823      	ldr	r3, [r4, #0]
 800c928:	4631      	mov	r1, r6
 800c92a:	4638      	mov	r0, r7
 800c92c:	eb04 0803 	add.w	r8, r4, r3
 800c930:	f000 fb42 	bl	800cfb8 <_sbrk_r>
 800c934:	4580      	cmp	r8, r0
 800c936:	d13a      	bne.n	800c9ae <_malloc_r+0xd2>
 800c938:	6821      	ldr	r1, [r4, #0]
 800c93a:	3503      	adds	r5, #3
 800c93c:	1a6d      	subs	r5, r5, r1
 800c93e:	f025 0503 	bic.w	r5, r5, #3
 800c942:	3508      	adds	r5, #8
 800c944:	2d0c      	cmp	r5, #12
 800c946:	bf38      	it	cc
 800c948:	250c      	movcc	r5, #12
 800c94a:	4629      	mov	r1, r5
 800c94c:	4638      	mov	r0, r7
 800c94e:	f7ff ffa5 	bl	800c89c <sbrk_aligned>
 800c952:	3001      	adds	r0, #1
 800c954:	d02b      	beq.n	800c9ae <_malloc_r+0xd2>
 800c956:	6823      	ldr	r3, [r4, #0]
 800c958:	442b      	add	r3, r5
 800c95a:	6023      	str	r3, [r4, #0]
 800c95c:	e00e      	b.n	800c97c <_malloc_r+0xa0>
 800c95e:	6822      	ldr	r2, [r4, #0]
 800c960:	1b52      	subs	r2, r2, r5
 800c962:	d41e      	bmi.n	800c9a2 <_malloc_r+0xc6>
 800c964:	2a0b      	cmp	r2, #11
 800c966:	d916      	bls.n	800c996 <_malloc_r+0xba>
 800c968:	1961      	adds	r1, r4, r5
 800c96a:	42a3      	cmp	r3, r4
 800c96c:	6025      	str	r5, [r4, #0]
 800c96e:	bf18      	it	ne
 800c970:	6059      	strne	r1, [r3, #4]
 800c972:	6863      	ldr	r3, [r4, #4]
 800c974:	bf08      	it	eq
 800c976:	6031      	streq	r1, [r6, #0]
 800c978:	5162      	str	r2, [r4, r5]
 800c97a:	604b      	str	r3, [r1, #4]
 800c97c:	4638      	mov	r0, r7
 800c97e:	f104 060b 	add.w	r6, r4, #11
 800c982:	f000 fba3 	bl	800d0cc <__malloc_unlock>
 800c986:	f026 0607 	bic.w	r6, r6, #7
 800c98a:	1d23      	adds	r3, r4, #4
 800c98c:	1af2      	subs	r2, r6, r3
 800c98e:	d0b6      	beq.n	800c8fe <_malloc_r+0x22>
 800c990:	1b9b      	subs	r3, r3, r6
 800c992:	50a3      	str	r3, [r4, r2]
 800c994:	e7b3      	b.n	800c8fe <_malloc_r+0x22>
 800c996:	6862      	ldr	r2, [r4, #4]
 800c998:	42a3      	cmp	r3, r4
 800c99a:	bf0c      	ite	eq
 800c99c:	6032      	streq	r2, [r6, #0]
 800c99e:	605a      	strne	r2, [r3, #4]
 800c9a0:	e7ec      	b.n	800c97c <_malloc_r+0xa0>
 800c9a2:	4623      	mov	r3, r4
 800c9a4:	6864      	ldr	r4, [r4, #4]
 800c9a6:	e7b2      	b.n	800c90e <_malloc_r+0x32>
 800c9a8:	4634      	mov	r4, r6
 800c9aa:	6876      	ldr	r6, [r6, #4]
 800c9ac:	e7b9      	b.n	800c922 <_malloc_r+0x46>
 800c9ae:	230c      	movs	r3, #12
 800c9b0:	603b      	str	r3, [r7, #0]
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	f000 fb8a 	bl	800d0cc <__malloc_unlock>
 800c9b8:	e7a1      	b.n	800c8fe <_malloc_r+0x22>
 800c9ba:	6025      	str	r5, [r4, #0]
 800c9bc:	e7de      	b.n	800c97c <_malloc_r+0xa0>
 800c9be:	bf00      	nop
 800c9c0:	20014728 	.word	0x20014728

0800c9c4 <__ssputs_r>:
 800c9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9c8:	688e      	ldr	r6, [r1, #8]
 800c9ca:	429e      	cmp	r6, r3
 800c9cc:	4682      	mov	sl, r0
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	4690      	mov	r8, r2
 800c9d2:	461f      	mov	r7, r3
 800c9d4:	d838      	bhi.n	800ca48 <__ssputs_r+0x84>
 800c9d6:	898a      	ldrh	r2, [r1, #12]
 800c9d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9dc:	d032      	beq.n	800ca44 <__ssputs_r+0x80>
 800c9de:	6825      	ldr	r5, [r4, #0]
 800c9e0:	6909      	ldr	r1, [r1, #16]
 800c9e2:	eba5 0901 	sub.w	r9, r5, r1
 800c9e6:	6965      	ldr	r5, [r4, #20]
 800c9e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	444b      	add	r3, r9
 800c9f4:	106d      	asrs	r5, r5, #1
 800c9f6:	429d      	cmp	r5, r3
 800c9f8:	bf38      	it	cc
 800c9fa:	461d      	movcc	r5, r3
 800c9fc:	0553      	lsls	r3, r2, #21
 800c9fe:	d531      	bpl.n	800ca64 <__ssputs_r+0xa0>
 800ca00:	4629      	mov	r1, r5
 800ca02:	f7ff ff6b 	bl	800c8dc <_malloc_r>
 800ca06:	4606      	mov	r6, r0
 800ca08:	b950      	cbnz	r0, 800ca20 <__ssputs_r+0x5c>
 800ca0a:	230c      	movs	r3, #12
 800ca0c:	f8ca 3000 	str.w	r3, [sl]
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca16:	81a3      	strh	r3, [r4, #12]
 800ca18:	f04f 30ff 	mov.w	r0, #4294967295
 800ca1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca20:	6921      	ldr	r1, [r4, #16]
 800ca22:	464a      	mov	r2, r9
 800ca24:	f7fd fde8 	bl	800a5f8 <memcpy>
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca32:	81a3      	strh	r3, [r4, #12]
 800ca34:	6126      	str	r6, [r4, #16]
 800ca36:	6165      	str	r5, [r4, #20]
 800ca38:	444e      	add	r6, r9
 800ca3a:	eba5 0509 	sub.w	r5, r5, r9
 800ca3e:	6026      	str	r6, [r4, #0]
 800ca40:	60a5      	str	r5, [r4, #8]
 800ca42:	463e      	mov	r6, r7
 800ca44:	42be      	cmp	r6, r7
 800ca46:	d900      	bls.n	800ca4a <__ssputs_r+0x86>
 800ca48:	463e      	mov	r6, r7
 800ca4a:	6820      	ldr	r0, [r4, #0]
 800ca4c:	4632      	mov	r2, r6
 800ca4e:	4641      	mov	r1, r8
 800ca50:	f000 fb1c 	bl	800d08c <memmove>
 800ca54:	68a3      	ldr	r3, [r4, #8]
 800ca56:	1b9b      	subs	r3, r3, r6
 800ca58:	60a3      	str	r3, [r4, #8]
 800ca5a:	6823      	ldr	r3, [r4, #0]
 800ca5c:	4433      	add	r3, r6
 800ca5e:	6023      	str	r3, [r4, #0]
 800ca60:	2000      	movs	r0, #0
 800ca62:	e7db      	b.n	800ca1c <__ssputs_r+0x58>
 800ca64:	462a      	mov	r2, r5
 800ca66:	f000 fb83 	bl	800d170 <_realloc_r>
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d1e1      	bne.n	800ca34 <__ssputs_r+0x70>
 800ca70:	6921      	ldr	r1, [r4, #16]
 800ca72:	4650      	mov	r0, sl
 800ca74:	f000 fb30 	bl	800d0d8 <_free_r>
 800ca78:	e7c7      	b.n	800ca0a <__ssputs_r+0x46>
	...

0800ca7c <_svfiprintf_r>:
 800ca7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca80:	4698      	mov	r8, r3
 800ca82:	898b      	ldrh	r3, [r1, #12]
 800ca84:	061b      	lsls	r3, r3, #24
 800ca86:	b09d      	sub	sp, #116	; 0x74
 800ca88:	4607      	mov	r7, r0
 800ca8a:	460d      	mov	r5, r1
 800ca8c:	4614      	mov	r4, r2
 800ca8e:	d50e      	bpl.n	800caae <_svfiprintf_r+0x32>
 800ca90:	690b      	ldr	r3, [r1, #16]
 800ca92:	b963      	cbnz	r3, 800caae <_svfiprintf_r+0x32>
 800ca94:	2140      	movs	r1, #64	; 0x40
 800ca96:	f7ff ff21 	bl	800c8dc <_malloc_r>
 800ca9a:	6028      	str	r0, [r5, #0]
 800ca9c:	6128      	str	r0, [r5, #16]
 800ca9e:	b920      	cbnz	r0, 800caaa <_svfiprintf_r+0x2e>
 800caa0:	230c      	movs	r3, #12
 800caa2:	603b      	str	r3, [r7, #0]
 800caa4:	f04f 30ff 	mov.w	r0, #4294967295
 800caa8:	e0d1      	b.n	800cc4e <_svfiprintf_r+0x1d2>
 800caaa:	2340      	movs	r3, #64	; 0x40
 800caac:	616b      	str	r3, [r5, #20]
 800caae:	2300      	movs	r3, #0
 800cab0:	9309      	str	r3, [sp, #36]	; 0x24
 800cab2:	2320      	movs	r3, #32
 800cab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cab8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cabc:	2330      	movs	r3, #48	; 0x30
 800cabe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc68 <_svfiprintf_r+0x1ec>
 800cac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cac6:	f04f 0901 	mov.w	r9, #1
 800caca:	4623      	mov	r3, r4
 800cacc:	469a      	mov	sl, r3
 800cace:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cad2:	b10a      	cbz	r2, 800cad8 <_svfiprintf_r+0x5c>
 800cad4:	2a25      	cmp	r2, #37	; 0x25
 800cad6:	d1f9      	bne.n	800cacc <_svfiprintf_r+0x50>
 800cad8:	ebba 0b04 	subs.w	fp, sl, r4
 800cadc:	d00b      	beq.n	800caf6 <_svfiprintf_r+0x7a>
 800cade:	465b      	mov	r3, fp
 800cae0:	4622      	mov	r2, r4
 800cae2:	4629      	mov	r1, r5
 800cae4:	4638      	mov	r0, r7
 800cae6:	f7ff ff6d 	bl	800c9c4 <__ssputs_r>
 800caea:	3001      	adds	r0, #1
 800caec:	f000 80aa 	beq.w	800cc44 <_svfiprintf_r+0x1c8>
 800caf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caf2:	445a      	add	r2, fp
 800caf4:	9209      	str	r2, [sp, #36]	; 0x24
 800caf6:	f89a 3000 	ldrb.w	r3, [sl]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f000 80a2 	beq.w	800cc44 <_svfiprintf_r+0x1c8>
 800cb00:	2300      	movs	r3, #0
 800cb02:	f04f 32ff 	mov.w	r2, #4294967295
 800cb06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb0a:	f10a 0a01 	add.w	sl, sl, #1
 800cb0e:	9304      	str	r3, [sp, #16]
 800cb10:	9307      	str	r3, [sp, #28]
 800cb12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb16:	931a      	str	r3, [sp, #104]	; 0x68
 800cb18:	4654      	mov	r4, sl
 800cb1a:	2205      	movs	r2, #5
 800cb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb20:	4851      	ldr	r0, [pc, #324]	; (800cc68 <_svfiprintf_r+0x1ec>)
 800cb22:	f7f3 fbcd 	bl	80002c0 <memchr>
 800cb26:	9a04      	ldr	r2, [sp, #16]
 800cb28:	b9d8      	cbnz	r0, 800cb62 <_svfiprintf_r+0xe6>
 800cb2a:	06d0      	lsls	r0, r2, #27
 800cb2c:	bf44      	itt	mi
 800cb2e:	2320      	movmi	r3, #32
 800cb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb34:	0711      	lsls	r1, r2, #28
 800cb36:	bf44      	itt	mi
 800cb38:	232b      	movmi	r3, #43	; 0x2b
 800cb3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb3e:	f89a 3000 	ldrb.w	r3, [sl]
 800cb42:	2b2a      	cmp	r3, #42	; 0x2a
 800cb44:	d015      	beq.n	800cb72 <_svfiprintf_r+0xf6>
 800cb46:	9a07      	ldr	r2, [sp, #28]
 800cb48:	4654      	mov	r4, sl
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	f04f 0c0a 	mov.w	ip, #10
 800cb50:	4621      	mov	r1, r4
 800cb52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb56:	3b30      	subs	r3, #48	; 0x30
 800cb58:	2b09      	cmp	r3, #9
 800cb5a:	d94e      	bls.n	800cbfa <_svfiprintf_r+0x17e>
 800cb5c:	b1b0      	cbz	r0, 800cb8c <_svfiprintf_r+0x110>
 800cb5e:	9207      	str	r2, [sp, #28]
 800cb60:	e014      	b.n	800cb8c <_svfiprintf_r+0x110>
 800cb62:	eba0 0308 	sub.w	r3, r0, r8
 800cb66:	fa09 f303 	lsl.w	r3, r9, r3
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	9304      	str	r3, [sp, #16]
 800cb6e:	46a2      	mov	sl, r4
 800cb70:	e7d2      	b.n	800cb18 <_svfiprintf_r+0x9c>
 800cb72:	9b03      	ldr	r3, [sp, #12]
 800cb74:	1d19      	adds	r1, r3, #4
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	9103      	str	r1, [sp, #12]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	bfbb      	ittet	lt
 800cb7e:	425b      	neglt	r3, r3
 800cb80:	f042 0202 	orrlt.w	r2, r2, #2
 800cb84:	9307      	strge	r3, [sp, #28]
 800cb86:	9307      	strlt	r3, [sp, #28]
 800cb88:	bfb8      	it	lt
 800cb8a:	9204      	strlt	r2, [sp, #16]
 800cb8c:	7823      	ldrb	r3, [r4, #0]
 800cb8e:	2b2e      	cmp	r3, #46	; 0x2e
 800cb90:	d10c      	bne.n	800cbac <_svfiprintf_r+0x130>
 800cb92:	7863      	ldrb	r3, [r4, #1]
 800cb94:	2b2a      	cmp	r3, #42	; 0x2a
 800cb96:	d135      	bne.n	800cc04 <_svfiprintf_r+0x188>
 800cb98:	9b03      	ldr	r3, [sp, #12]
 800cb9a:	1d1a      	adds	r2, r3, #4
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	9203      	str	r2, [sp, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	bfb8      	it	lt
 800cba4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cba8:	3402      	adds	r4, #2
 800cbaa:	9305      	str	r3, [sp, #20]
 800cbac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc78 <_svfiprintf_r+0x1fc>
 800cbb0:	7821      	ldrb	r1, [r4, #0]
 800cbb2:	2203      	movs	r2, #3
 800cbb4:	4650      	mov	r0, sl
 800cbb6:	f7f3 fb83 	bl	80002c0 <memchr>
 800cbba:	b140      	cbz	r0, 800cbce <_svfiprintf_r+0x152>
 800cbbc:	2340      	movs	r3, #64	; 0x40
 800cbbe:	eba0 000a 	sub.w	r0, r0, sl
 800cbc2:	fa03 f000 	lsl.w	r0, r3, r0
 800cbc6:	9b04      	ldr	r3, [sp, #16]
 800cbc8:	4303      	orrs	r3, r0
 800cbca:	3401      	adds	r4, #1
 800cbcc:	9304      	str	r3, [sp, #16]
 800cbce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbd2:	4826      	ldr	r0, [pc, #152]	; (800cc6c <_svfiprintf_r+0x1f0>)
 800cbd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbd8:	2206      	movs	r2, #6
 800cbda:	f7f3 fb71 	bl	80002c0 <memchr>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d038      	beq.n	800cc54 <_svfiprintf_r+0x1d8>
 800cbe2:	4b23      	ldr	r3, [pc, #140]	; (800cc70 <_svfiprintf_r+0x1f4>)
 800cbe4:	bb1b      	cbnz	r3, 800cc2e <_svfiprintf_r+0x1b2>
 800cbe6:	9b03      	ldr	r3, [sp, #12]
 800cbe8:	3307      	adds	r3, #7
 800cbea:	f023 0307 	bic.w	r3, r3, #7
 800cbee:	3308      	adds	r3, #8
 800cbf0:	9303      	str	r3, [sp, #12]
 800cbf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf4:	4433      	add	r3, r6
 800cbf6:	9309      	str	r3, [sp, #36]	; 0x24
 800cbf8:	e767      	b.n	800caca <_svfiprintf_r+0x4e>
 800cbfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbfe:	460c      	mov	r4, r1
 800cc00:	2001      	movs	r0, #1
 800cc02:	e7a5      	b.n	800cb50 <_svfiprintf_r+0xd4>
 800cc04:	2300      	movs	r3, #0
 800cc06:	3401      	adds	r4, #1
 800cc08:	9305      	str	r3, [sp, #20]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	f04f 0c0a 	mov.w	ip, #10
 800cc10:	4620      	mov	r0, r4
 800cc12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc16:	3a30      	subs	r2, #48	; 0x30
 800cc18:	2a09      	cmp	r2, #9
 800cc1a:	d903      	bls.n	800cc24 <_svfiprintf_r+0x1a8>
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d0c5      	beq.n	800cbac <_svfiprintf_r+0x130>
 800cc20:	9105      	str	r1, [sp, #20]
 800cc22:	e7c3      	b.n	800cbac <_svfiprintf_r+0x130>
 800cc24:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc28:	4604      	mov	r4, r0
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e7f0      	b.n	800cc10 <_svfiprintf_r+0x194>
 800cc2e:	ab03      	add	r3, sp, #12
 800cc30:	9300      	str	r3, [sp, #0]
 800cc32:	462a      	mov	r2, r5
 800cc34:	4b0f      	ldr	r3, [pc, #60]	; (800cc74 <_svfiprintf_r+0x1f8>)
 800cc36:	a904      	add	r1, sp, #16
 800cc38:	4638      	mov	r0, r7
 800cc3a:	f3af 8000 	nop.w
 800cc3e:	1c42      	adds	r2, r0, #1
 800cc40:	4606      	mov	r6, r0
 800cc42:	d1d6      	bne.n	800cbf2 <_svfiprintf_r+0x176>
 800cc44:	89ab      	ldrh	r3, [r5, #12]
 800cc46:	065b      	lsls	r3, r3, #25
 800cc48:	f53f af2c 	bmi.w	800caa4 <_svfiprintf_r+0x28>
 800cc4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc4e:	b01d      	add	sp, #116	; 0x74
 800cc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc54:	ab03      	add	r3, sp, #12
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	462a      	mov	r2, r5
 800cc5a:	4b06      	ldr	r3, [pc, #24]	; (800cc74 <_svfiprintf_r+0x1f8>)
 800cc5c:	a904      	add	r1, sp, #16
 800cc5e:	4638      	mov	r0, r7
 800cc60:	f000 f87a 	bl	800cd58 <_printf_i>
 800cc64:	e7eb      	b.n	800cc3e <_svfiprintf_r+0x1c2>
 800cc66:	bf00      	nop
 800cc68:	0800e13c 	.word	0x0800e13c
 800cc6c:	0800e146 	.word	0x0800e146
 800cc70:	00000000 	.word	0x00000000
 800cc74:	0800c9c5 	.word	0x0800c9c5
 800cc78:	0800e142 	.word	0x0800e142

0800cc7c <_printf_common>:
 800cc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc80:	4616      	mov	r6, r2
 800cc82:	4699      	mov	r9, r3
 800cc84:	688a      	ldr	r2, [r1, #8]
 800cc86:	690b      	ldr	r3, [r1, #16]
 800cc88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	bfb8      	it	lt
 800cc90:	4613      	movlt	r3, r2
 800cc92:	6033      	str	r3, [r6, #0]
 800cc94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc98:	4607      	mov	r7, r0
 800cc9a:	460c      	mov	r4, r1
 800cc9c:	b10a      	cbz	r2, 800cca2 <_printf_common+0x26>
 800cc9e:	3301      	adds	r3, #1
 800cca0:	6033      	str	r3, [r6, #0]
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	0699      	lsls	r1, r3, #26
 800cca6:	bf42      	ittt	mi
 800cca8:	6833      	ldrmi	r3, [r6, #0]
 800ccaa:	3302      	addmi	r3, #2
 800ccac:	6033      	strmi	r3, [r6, #0]
 800ccae:	6825      	ldr	r5, [r4, #0]
 800ccb0:	f015 0506 	ands.w	r5, r5, #6
 800ccb4:	d106      	bne.n	800ccc4 <_printf_common+0x48>
 800ccb6:	f104 0a19 	add.w	sl, r4, #25
 800ccba:	68e3      	ldr	r3, [r4, #12]
 800ccbc:	6832      	ldr	r2, [r6, #0]
 800ccbe:	1a9b      	subs	r3, r3, r2
 800ccc0:	42ab      	cmp	r3, r5
 800ccc2:	dc26      	bgt.n	800cd12 <_printf_common+0x96>
 800ccc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccc8:	1e13      	subs	r3, r2, #0
 800ccca:	6822      	ldr	r2, [r4, #0]
 800cccc:	bf18      	it	ne
 800ccce:	2301      	movne	r3, #1
 800ccd0:	0692      	lsls	r2, r2, #26
 800ccd2:	d42b      	bmi.n	800cd2c <_printf_common+0xb0>
 800ccd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccd8:	4649      	mov	r1, r9
 800ccda:	4638      	mov	r0, r7
 800ccdc:	47c0      	blx	r8
 800ccde:	3001      	adds	r0, #1
 800cce0:	d01e      	beq.n	800cd20 <_printf_common+0xa4>
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	68e5      	ldr	r5, [r4, #12]
 800cce6:	6832      	ldr	r2, [r6, #0]
 800cce8:	f003 0306 	and.w	r3, r3, #6
 800ccec:	2b04      	cmp	r3, #4
 800ccee:	bf08      	it	eq
 800ccf0:	1aad      	subeq	r5, r5, r2
 800ccf2:	68a3      	ldr	r3, [r4, #8]
 800ccf4:	6922      	ldr	r2, [r4, #16]
 800ccf6:	bf0c      	ite	eq
 800ccf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccfc:	2500      	movne	r5, #0
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	bfc4      	itt	gt
 800cd02:	1a9b      	subgt	r3, r3, r2
 800cd04:	18ed      	addgt	r5, r5, r3
 800cd06:	2600      	movs	r6, #0
 800cd08:	341a      	adds	r4, #26
 800cd0a:	42b5      	cmp	r5, r6
 800cd0c:	d11a      	bne.n	800cd44 <_printf_common+0xc8>
 800cd0e:	2000      	movs	r0, #0
 800cd10:	e008      	b.n	800cd24 <_printf_common+0xa8>
 800cd12:	2301      	movs	r3, #1
 800cd14:	4652      	mov	r2, sl
 800cd16:	4649      	mov	r1, r9
 800cd18:	4638      	mov	r0, r7
 800cd1a:	47c0      	blx	r8
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d103      	bne.n	800cd28 <_printf_common+0xac>
 800cd20:	f04f 30ff 	mov.w	r0, #4294967295
 800cd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd28:	3501      	adds	r5, #1
 800cd2a:	e7c6      	b.n	800ccba <_printf_common+0x3e>
 800cd2c:	18e1      	adds	r1, r4, r3
 800cd2e:	1c5a      	adds	r2, r3, #1
 800cd30:	2030      	movs	r0, #48	; 0x30
 800cd32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd36:	4422      	add	r2, r4
 800cd38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd40:	3302      	adds	r3, #2
 800cd42:	e7c7      	b.n	800ccd4 <_printf_common+0x58>
 800cd44:	2301      	movs	r3, #1
 800cd46:	4622      	mov	r2, r4
 800cd48:	4649      	mov	r1, r9
 800cd4a:	4638      	mov	r0, r7
 800cd4c:	47c0      	blx	r8
 800cd4e:	3001      	adds	r0, #1
 800cd50:	d0e6      	beq.n	800cd20 <_printf_common+0xa4>
 800cd52:	3601      	adds	r6, #1
 800cd54:	e7d9      	b.n	800cd0a <_printf_common+0x8e>
	...

0800cd58 <_printf_i>:
 800cd58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd5c:	7e0f      	ldrb	r7, [r1, #24]
 800cd5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd60:	2f78      	cmp	r7, #120	; 0x78
 800cd62:	4691      	mov	r9, r2
 800cd64:	4680      	mov	r8, r0
 800cd66:	460c      	mov	r4, r1
 800cd68:	469a      	mov	sl, r3
 800cd6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd6e:	d807      	bhi.n	800cd80 <_printf_i+0x28>
 800cd70:	2f62      	cmp	r7, #98	; 0x62
 800cd72:	d80a      	bhi.n	800cd8a <_printf_i+0x32>
 800cd74:	2f00      	cmp	r7, #0
 800cd76:	f000 80d8 	beq.w	800cf2a <_printf_i+0x1d2>
 800cd7a:	2f58      	cmp	r7, #88	; 0x58
 800cd7c:	f000 80a3 	beq.w	800cec6 <_printf_i+0x16e>
 800cd80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd88:	e03a      	b.n	800ce00 <_printf_i+0xa8>
 800cd8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd8e:	2b15      	cmp	r3, #21
 800cd90:	d8f6      	bhi.n	800cd80 <_printf_i+0x28>
 800cd92:	a101      	add	r1, pc, #4	; (adr r1, 800cd98 <_printf_i+0x40>)
 800cd94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd98:	0800cdf1 	.word	0x0800cdf1
 800cd9c:	0800ce05 	.word	0x0800ce05
 800cda0:	0800cd81 	.word	0x0800cd81
 800cda4:	0800cd81 	.word	0x0800cd81
 800cda8:	0800cd81 	.word	0x0800cd81
 800cdac:	0800cd81 	.word	0x0800cd81
 800cdb0:	0800ce05 	.word	0x0800ce05
 800cdb4:	0800cd81 	.word	0x0800cd81
 800cdb8:	0800cd81 	.word	0x0800cd81
 800cdbc:	0800cd81 	.word	0x0800cd81
 800cdc0:	0800cd81 	.word	0x0800cd81
 800cdc4:	0800cf11 	.word	0x0800cf11
 800cdc8:	0800ce35 	.word	0x0800ce35
 800cdcc:	0800cef3 	.word	0x0800cef3
 800cdd0:	0800cd81 	.word	0x0800cd81
 800cdd4:	0800cd81 	.word	0x0800cd81
 800cdd8:	0800cf33 	.word	0x0800cf33
 800cddc:	0800cd81 	.word	0x0800cd81
 800cde0:	0800ce35 	.word	0x0800ce35
 800cde4:	0800cd81 	.word	0x0800cd81
 800cde8:	0800cd81 	.word	0x0800cd81
 800cdec:	0800cefb 	.word	0x0800cefb
 800cdf0:	682b      	ldr	r3, [r5, #0]
 800cdf2:	1d1a      	adds	r2, r3, #4
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	602a      	str	r2, [r5, #0]
 800cdf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce00:	2301      	movs	r3, #1
 800ce02:	e0a3      	b.n	800cf4c <_printf_i+0x1f4>
 800ce04:	6820      	ldr	r0, [r4, #0]
 800ce06:	6829      	ldr	r1, [r5, #0]
 800ce08:	0606      	lsls	r6, r0, #24
 800ce0a:	f101 0304 	add.w	r3, r1, #4
 800ce0e:	d50a      	bpl.n	800ce26 <_printf_i+0xce>
 800ce10:	680e      	ldr	r6, [r1, #0]
 800ce12:	602b      	str	r3, [r5, #0]
 800ce14:	2e00      	cmp	r6, #0
 800ce16:	da03      	bge.n	800ce20 <_printf_i+0xc8>
 800ce18:	232d      	movs	r3, #45	; 0x2d
 800ce1a:	4276      	negs	r6, r6
 800ce1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce20:	485e      	ldr	r0, [pc, #376]	; (800cf9c <_printf_i+0x244>)
 800ce22:	230a      	movs	r3, #10
 800ce24:	e019      	b.n	800ce5a <_printf_i+0x102>
 800ce26:	680e      	ldr	r6, [r1, #0]
 800ce28:	602b      	str	r3, [r5, #0]
 800ce2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce2e:	bf18      	it	ne
 800ce30:	b236      	sxthne	r6, r6
 800ce32:	e7ef      	b.n	800ce14 <_printf_i+0xbc>
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	6820      	ldr	r0, [r4, #0]
 800ce38:	1d19      	adds	r1, r3, #4
 800ce3a:	6029      	str	r1, [r5, #0]
 800ce3c:	0601      	lsls	r1, r0, #24
 800ce3e:	d501      	bpl.n	800ce44 <_printf_i+0xec>
 800ce40:	681e      	ldr	r6, [r3, #0]
 800ce42:	e002      	b.n	800ce4a <_printf_i+0xf2>
 800ce44:	0646      	lsls	r6, r0, #25
 800ce46:	d5fb      	bpl.n	800ce40 <_printf_i+0xe8>
 800ce48:	881e      	ldrh	r6, [r3, #0]
 800ce4a:	4854      	ldr	r0, [pc, #336]	; (800cf9c <_printf_i+0x244>)
 800ce4c:	2f6f      	cmp	r7, #111	; 0x6f
 800ce4e:	bf0c      	ite	eq
 800ce50:	2308      	moveq	r3, #8
 800ce52:	230a      	movne	r3, #10
 800ce54:	2100      	movs	r1, #0
 800ce56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce5a:	6865      	ldr	r5, [r4, #4]
 800ce5c:	60a5      	str	r5, [r4, #8]
 800ce5e:	2d00      	cmp	r5, #0
 800ce60:	bfa2      	ittt	ge
 800ce62:	6821      	ldrge	r1, [r4, #0]
 800ce64:	f021 0104 	bicge.w	r1, r1, #4
 800ce68:	6021      	strge	r1, [r4, #0]
 800ce6a:	b90e      	cbnz	r6, 800ce70 <_printf_i+0x118>
 800ce6c:	2d00      	cmp	r5, #0
 800ce6e:	d04d      	beq.n	800cf0c <_printf_i+0x1b4>
 800ce70:	4615      	mov	r5, r2
 800ce72:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce76:	fb03 6711 	mls	r7, r3, r1, r6
 800ce7a:	5dc7      	ldrb	r7, [r0, r7]
 800ce7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce80:	4637      	mov	r7, r6
 800ce82:	42bb      	cmp	r3, r7
 800ce84:	460e      	mov	r6, r1
 800ce86:	d9f4      	bls.n	800ce72 <_printf_i+0x11a>
 800ce88:	2b08      	cmp	r3, #8
 800ce8a:	d10b      	bne.n	800cea4 <_printf_i+0x14c>
 800ce8c:	6823      	ldr	r3, [r4, #0]
 800ce8e:	07de      	lsls	r6, r3, #31
 800ce90:	d508      	bpl.n	800cea4 <_printf_i+0x14c>
 800ce92:	6923      	ldr	r3, [r4, #16]
 800ce94:	6861      	ldr	r1, [r4, #4]
 800ce96:	4299      	cmp	r1, r3
 800ce98:	bfde      	ittt	le
 800ce9a:	2330      	movle	r3, #48	; 0x30
 800ce9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cea0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cea4:	1b52      	subs	r2, r2, r5
 800cea6:	6122      	str	r2, [r4, #16]
 800cea8:	f8cd a000 	str.w	sl, [sp]
 800ceac:	464b      	mov	r3, r9
 800ceae:	aa03      	add	r2, sp, #12
 800ceb0:	4621      	mov	r1, r4
 800ceb2:	4640      	mov	r0, r8
 800ceb4:	f7ff fee2 	bl	800cc7c <_printf_common>
 800ceb8:	3001      	adds	r0, #1
 800ceba:	d14c      	bne.n	800cf56 <_printf_i+0x1fe>
 800cebc:	f04f 30ff 	mov.w	r0, #4294967295
 800cec0:	b004      	add	sp, #16
 800cec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cec6:	4835      	ldr	r0, [pc, #212]	; (800cf9c <_printf_i+0x244>)
 800cec8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cecc:	6829      	ldr	r1, [r5, #0]
 800cece:	6823      	ldr	r3, [r4, #0]
 800ced0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ced4:	6029      	str	r1, [r5, #0]
 800ced6:	061d      	lsls	r5, r3, #24
 800ced8:	d514      	bpl.n	800cf04 <_printf_i+0x1ac>
 800ceda:	07df      	lsls	r7, r3, #31
 800cedc:	bf44      	itt	mi
 800cede:	f043 0320 	orrmi.w	r3, r3, #32
 800cee2:	6023      	strmi	r3, [r4, #0]
 800cee4:	b91e      	cbnz	r6, 800ceee <_printf_i+0x196>
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	f023 0320 	bic.w	r3, r3, #32
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	2310      	movs	r3, #16
 800cef0:	e7b0      	b.n	800ce54 <_printf_i+0xfc>
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	f043 0320 	orr.w	r3, r3, #32
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	2378      	movs	r3, #120	; 0x78
 800cefc:	4828      	ldr	r0, [pc, #160]	; (800cfa0 <_printf_i+0x248>)
 800cefe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf02:	e7e3      	b.n	800cecc <_printf_i+0x174>
 800cf04:	0659      	lsls	r1, r3, #25
 800cf06:	bf48      	it	mi
 800cf08:	b2b6      	uxthmi	r6, r6
 800cf0a:	e7e6      	b.n	800ceda <_printf_i+0x182>
 800cf0c:	4615      	mov	r5, r2
 800cf0e:	e7bb      	b.n	800ce88 <_printf_i+0x130>
 800cf10:	682b      	ldr	r3, [r5, #0]
 800cf12:	6826      	ldr	r6, [r4, #0]
 800cf14:	6961      	ldr	r1, [r4, #20]
 800cf16:	1d18      	adds	r0, r3, #4
 800cf18:	6028      	str	r0, [r5, #0]
 800cf1a:	0635      	lsls	r5, r6, #24
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	d501      	bpl.n	800cf24 <_printf_i+0x1cc>
 800cf20:	6019      	str	r1, [r3, #0]
 800cf22:	e002      	b.n	800cf2a <_printf_i+0x1d2>
 800cf24:	0670      	lsls	r0, r6, #25
 800cf26:	d5fb      	bpl.n	800cf20 <_printf_i+0x1c8>
 800cf28:	8019      	strh	r1, [r3, #0]
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	6123      	str	r3, [r4, #16]
 800cf2e:	4615      	mov	r5, r2
 800cf30:	e7ba      	b.n	800cea8 <_printf_i+0x150>
 800cf32:	682b      	ldr	r3, [r5, #0]
 800cf34:	1d1a      	adds	r2, r3, #4
 800cf36:	602a      	str	r2, [r5, #0]
 800cf38:	681d      	ldr	r5, [r3, #0]
 800cf3a:	6862      	ldr	r2, [r4, #4]
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f7f3 f9be 	bl	80002c0 <memchr>
 800cf44:	b108      	cbz	r0, 800cf4a <_printf_i+0x1f2>
 800cf46:	1b40      	subs	r0, r0, r5
 800cf48:	6060      	str	r0, [r4, #4]
 800cf4a:	6863      	ldr	r3, [r4, #4]
 800cf4c:	6123      	str	r3, [r4, #16]
 800cf4e:	2300      	movs	r3, #0
 800cf50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf54:	e7a8      	b.n	800cea8 <_printf_i+0x150>
 800cf56:	6923      	ldr	r3, [r4, #16]
 800cf58:	462a      	mov	r2, r5
 800cf5a:	4649      	mov	r1, r9
 800cf5c:	4640      	mov	r0, r8
 800cf5e:	47d0      	blx	sl
 800cf60:	3001      	adds	r0, #1
 800cf62:	d0ab      	beq.n	800cebc <_printf_i+0x164>
 800cf64:	6823      	ldr	r3, [r4, #0]
 800cf66:	079b      	lsls	r3, r3, #30
 800cf68:	d413      	bmi.n	800cf92 <_printf_i+0x23a>
 800cf6a:	68e0      	ldr	r0, [r4, #12]
 800cf6c:	9b03      	ldr	r3, [sp, #12]
 800cf6e:	4298      	cmp	r0, r3
 800cf70:	bfb8      	it	lt
 800cf72:	4618      	movlt	r0, r3
 800cf74:	e7a4      	b.n	800cec0 <_printf_i+0x168>
 800cf76:	2301      	movs	r3, #1
 800cf78:	4632      	mov	r2, r6
 800cf7a:	4649      	mov	r1, r9
 800cf7c:	4640      	mov	r0, r8
 800cf7e:	47d0      	blx	sl
 800cf80:	3001      	adds	r0, #1
 800cf82:	d09b      	beq.n	800cebc <_printf_i+0x164>
 800cf84:	3501      	adds	r5, #1
 800cf86:	68e3      	ldr	r3, [r4, #12]
 800cf88:	9903      	ldr	r1, [sp, #12]
 800cf8a:	1a5b      	subs	r3, r3, r1
 800cf8c:	42ab      	cmp	r3, r5
 800cf8e:	dcf2      	bgt.n	800cf76 <_printf_i+0x21e>
 800cf90:	e7eb      	b.n	800cf6a <_printf_i+0x212>
 800cf92:	2500      	movs	r5, #0
 800cf94:	f104 0619 	add.w	r6, r4, #25
 800cf98:	e7f5      	b.n	800cf86 <_printf_i+0x22e>
 800cf9a:	bf00      	nop
 800cf9c:	0800e14d 	.word	0x0800e14d
 800cfa0:	0800e15e 	.word	0x0800e15e
 800cfa4:	00000000 	.word	0x00000000

0800cfa8 <nan>:
 800cfa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cfb0 <nan+0x8>
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	00000000 	.word	0x00000000
 800cfb4:	7ff80000 	.word	0x7ff80000

0800cfb8 <_sbrk_r>:
 800cfb8:	b538      	push	{r3, r4, r5, lr}
 800cfba:	4d06      	ldr	r5, [pc, #24]	; (800cfd4 <_sbrk_r+0x1c>)
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	4608      	mov	r0, r1
 800cfc2:	602b      	str	r3, [r5, #0]
 800cfc4:	f000 fe2a 	bl	800dc1c <_sbrk>
 800cfc8:	1c43      	adds	r3, r0, #1
 800cfca:	d102      	bne.n	800cfd2 <_sbrk_r+0x1a>
 800cfcc:	682b      	ldr	r3, [r5, #0]
 800cfce:	b103      	cbz	r3, 800cfd2 <_sbrk_r+0x1a>
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	bd38      	pop	{r3, r4, r5, pc}
 800cfd4:	20014730 	.word	0x20014730

0800cfd8 <strncmp>:
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	b17a      	cbz	r2, 800cffc <strncmp+0x24>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	3901      	subs	r1, #1
 800cfe0:	1884      	adds	r4, r0, r2
 800cfe2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cfe6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cfea:	4290      	cmp	r0, r2
 800cfec:	d101      	bne.n	800cff2 <strncmp+0x1a>
 800cfee:	42a3      	cmp	r3, r4
 800cff0:	d101      	bne.n	800cff6 <strncmp+0x1e>
 800cff2:	1a80      	subs	r0, r0, r2
 800cff4:	bd10      	pop	{r4, pc}
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d1f3      	bne.n	800cfe2 <strncmp+0xa>
 800cffa:	e7fa      	b.n	800cff2 <strncmp+0x1a>
 800cffc:	4610      	mov	r0, r2
 800cffe:	e7f9      	b.n	800cff4 <strncmp+0x1c>

0800d000 <__ascii_wctomb>:
 800d000:	b149      	cbz	r1, 800d016 <__ascii_wctomb+0x16>
 800d002:	2aff      	cmp	r2, #255	; 0xff
 800d004:	bf85      	ittet	hi
 800d006:	238a      	movhi	r3, #138	; 0x8a
 800d008:	6003      	strhi	r3, [r0, #0]
 800d00a:	700a      	strbls	r2, [r1, #0]
 800d00c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d010:	bf98      	it	ls
 800d012:	2001      	movls	r0, #1
 800d014:	4770      	bx	lr
 800d016:	4608      	mov	r0, r1
 800d018:	4770      	bx	lr
	...

0800d01c <__assert_func>:
 800d01c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d01e:	4614      	mov	r4, r2
 800d020:	461a      	mov	r2, r3
 800d022:	4b09      	ldr	r3, [pc, #36]	; (800d048 <__assert_func+0x2c>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4605      	mov	r5, r0
 800d028:	68d8      	ldr	r0, [r3, #12]
 800d02a:	b14c      	cbz	r4, 800d040 <__assert_func+0x24>
 800d02c:	4b07      	ldr	r3, [pc, #28]	; (800d04c <__assert_func+0x30>)
 800d02e:	9100      	str	r1, [sp, #0]
 800d030:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d034:	4906      	ldr	r1, [pc, #24]	; (800d050 <__assert_func+0x34>)
 800d036:	462b      	mov	r3, r5
 800d038:	f000 f80e 	bl	800d058 <fiprintf>
 800d03c:	f000 fae0 	bl	800d600 <abort>
 800d040:	4b04      	ldr	r3, [pc, #16]	; (800d054 <__assert_func+0x38>)
 800d042:	461c      	mov	r4, r3
 800d044:	e7f3      	b.n	800d02e <__assert_func+0x12>
 800d046:	bf00      	nop
 800d048:	20000020 	.word	0x20000020
 800d04c:	0800e16f 	.word	0x0800e16f
 800d050:	0800e17c 	.word	0x0800e17c
 800d054:	0800e1aa 	.word	0x0800e1aa

0800d058 <fiprintf>:
 800d058:	b40e      	push	{r1, r2, r3}
 800d05a:	b503      	push	{r0, r1, lr}
 800d05c:	4601      	mov	r1, r0
 800d05e:	ab03      	add	r3, sp, #12
 800d060:	4805      	ldr	r0, [pc, #20]	; (800d078 <fiprintf+0x20>)
 800d062:	f853 2b04 	ldr.w	r2, [r3], #4
 800d066:	6800      	ldr	r0, [r0, #0]
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	f000 f8d9 	bl	800d220 <_vfiprintf_r>
 800d06e:	b002      	add	sp, #8
 800d070:	f85d eb04 	ldr.w	lr, [sp], #4
 800d074:	b003      	add	sp, #12
 800d076:	4770      	bx	lr
 800d078:	20000020 	.word	0x20000020

0800d07c <malloc>:
 800d07c:	4b02      	ldr	r3, [pc, #8]	; (800d088 <malloc+0xc>)
 800d07e:	4601      	mov	r1, r0
 800d080:	6818      	ldr	r0, [r3, #0]
 800d082:	f7ff bc2b 	b.w	800c8dc <_malloc_r>
 800d086:	bf00      	nop
 800d088:	20000020 	.word	0x20000020

0800d08c <memmove>:
 800d08c:	4288      	cmp	r0, r1
 800d08e:	b510      	push	{r4, lr}
 800d090:	eb01 0402 	add.w	r4, r1, r2
 800d094:	d902      	bls.n	800d09c <memmove+0x10>
 800d096:	4284      	cmp	r4, r0
 800d098:	4623      	mov	r3, r4
 800d09a:	d807      	bhi.n	800d0ac <memmove+0x20>
 800d09c:	1e43      	subs	r3, r0, #1
 800d09e:	42a1      	cmp	r1, r4
 800d0a0:	d008      	beq.n	800d0b4 <memmove+0x28>
 800d0a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0aa:	e7f8      	b.n	800d09e <memmove+0x12>
 800d0ac:	4402      	add	r2, r0
 800d0ae:	4601      	mov	r1, r0
 800d0b0:	428a      	cmp	r2, r1
 800d0b2:	d100      	bne.n	800d0b6 <memmove+0x2a>
 800d0b4:	bd10      	pop	{r4, pc}
 800d0b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0be:	e7f7      	b.n	800d0b0 <memmove+0x24>

0800d0c0 <__malloc_lock>:
 800d0c0:	4801      	ldr	r0, [pc, #4]	; (800d0c8 <__malloc_lock+0x8>)
 800d0c2:	f000 bc5d 	b.w	800d980 <__retarget_lock_acquire_recursive>
 800d0c6:	bf00      	nop
 800d0c8:	20014734 	.word	0x20014734

0800d0cc <__malloc_unlock>:
 800d0cc:	4801      	ldr	r0, [pc, #4]	; (800d0d4 <__malloc_unlock+0x8>)
 800d0ce:	f000 bc58 	b.w	800d982 <__retarget_lock_release_recursive>
 800d0d2:	bf00      	nop
 800d0d4:	20014734 	.word	0x20014734

0800d0d8 <_free_r>:
 800d0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0da:	2900      	cmp	r1, #0
 800d0dc:	d044      	beq.n	800d168 <_free_r+0x90>
 800d0de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0e2:	9001      	str	r0, [sp, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	f1a1 0404 	sub.w	r4, r1, #4
 800d0ea:	bfb8      	it	lt
 800d0ec:	18e4      	addlt	r4, r4, r3
 800d0ee:	f7ff ffe7 	bl	800d0c0 <__malloc_lock>
 800d0f2:	4a1e      	ldr	r2, [pc, #120]	; (800d16c <_free_r+0x94>)
 800d0f4:	9801      	ldr	r0, [sp, #4]
 800d0f6:	6813      	ldr	r3, [r2, #0]
 800d0f8:	b933      	cbnz	r3, 800d108 <_free_r+0x30>
 800d0fa:	6063      	str	r3, [r4, #4]
 800d0fc:	6014      	str	r4, [r2, #0]
 800d0fe:	b003      	add	sp, #12
 800d100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d104:	f7ff bfe2 	b.w	800d0cc <__malloc_unlock>
 800d108:	42a3      	cmp	r3, r4
 800d10a:	d908      	bls.n	800d11e <_free_r+0x46>
 800d10c:	6825      	ldr	r5, [r4, #0]
 800d10e:	1961      	adds	r1, r4, r5
 800d110:	428b      	cmp	r3, r1
 800d112:	bf01      	itttt	eq
 800d114:	6819      	ldreq	r1, [r3, #0]
 800d116:	685b      	ldreq	r3, [r3, #4]
 800d118:	1949      	addeq	r1, r1, r5
 800d11a:	6021      	streq	r1, [r4, #0]
 800d11c:	e7ed      	b.n	800d0fa <_free_r+0x22>
 800d11e:	461a      	mov	r2, r3
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	b10b      	cbz	r3, 800d128 <_free_r+0x50>
 800d124:	42a3      	cmp	r3, r4
 800d126:	d9fa      	bls.n	800d11e <_free_r+0x46>
 800d128:	6811      	ldr	r1, [r2, #0]
 800d12a:	1855      	adds	r5, r2, r1
 800d12c:	42a5      	cmp	r5, r4
 800d12e:	d10b      	bne.n	800d148 <_free_r+0x70>
 800d130:	6824      	ldr	r4, [r4, #0]
 800d132:	4421      	add	r1, r4
 800d134:	1854      	adds	r4, r2, r1
 800d136:	42a3      	cmp	r3, r4
 800d138:	6011      	str	r1, [r2, #0]
 800d13a:	d1e0      	bne.n	800d0fe <_free_r+0x26>
 800d13c:	681c      	ldr	r4, [r3, #0]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	6053      	str	r3, [r2, #4]
 800d142:	4421      	add	r1, r4
 800d144:	6011      	str	r1, [r2, #0]
 800d146:	e7da      	b.n	800d0fe <_free_r+0x26>
 800d148:	d902      	bls.n	800d150 <_free_r+0x78>
 800d14a:	230c      	movs	r3, #12
 800d14c:	6003      	str	r3, [r0, #0]
 800d14e:	e7d6      	b.n	800d0fe <_free_r+0x26>
 800d150:	6825      	ldr	r5, [r4, #0]
 800d152:	1961      	adds	r1, r4, r5
 800d154:	428b      	cmp	r3, r1
 800d156:	bf04      	itt	eq
 800d158:	6819      	ldreq	r1, [r3, #0]
 800d15a:	685b      	ldreq	r3, [r3, #4]
 800d15c:	6063      	str	r3, [r4, #4]
 800d15e:	bf04      	itt	eq
 800d160:	1949      	addeq	r1, r1, r5
 800d162:	6021      	streq	r1, [r4, #0]
 800d164:	6054      	str	r4, [r2, #4]
 800d166:	e7ca      	b.n	800d0fe <_free_r+0x26>
 800d168:	b003      	add	sp, #12
 800d16a:	bd30      	pop	{r4, r5, pc}
 800d16c:	20014728 	.word	0x20014728

0800d170 <_realloc_r>:
 800d170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d174:	4680      	mov	r8, r0
 800d176:	4614      	mov	r4, r2
 800d178:	460e      	mov	r6, r1
 800d17a:	b921      	cbnz	r1, 800d186 <_realloc_r+0x16>
 800d17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d180:	4611      	mov	r1, r2
 800d182:	f7ff bbab 	b.w	800c8dc <_malloc_r>
 800d186:	b92a      	cbnz	r2, 800d194 <_realloc_r+0x24>
 800d188:	f7ff ffa6 	bl	800d0d8 <_free_r>
 800d18c:	4625      	mov	r5, r4
 800d18e:	4628      	mov	r0, r5
 800d190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d194:	f000 fc5c 	bl	800da50 <_malloc_usable_size_r>
 800d198:	4284      	cmp	r4, r0
 800d19a:	4607      	mov	r7, r0
 800d19c:	d802      	bhi.n	800d1a4 <_realloc_r+0x34>
 800d19e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d1a2:	d812      	bhi.n	800d1ca <_realloc_r+0x5a>
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	4640      	mov	r0, r8
 800d1a8:	f7ff fb98 	bl	800c8dc <_malloc_r>
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d0ed      	beq.n	800d18e <_realloc_r+0x1e>
 800d1b2:	42bc      	cmp	r4, r7
 800d1b4:	4622      	mov	r2, r4
 800d1b6:	4631      	mov	r1, r6
 800d1b8:	bf28      	it	cs
 800d1ba:	463a      	movcs	r2, r7
 800d1bc:	f7fd fa1c 	bl	800a5f8 <memcpy>
 800d1c0:	4631      	mov	r1, r6
 800d1c2:	4640      	mov	r0, r8
 800d1c4:	f7ff ff88 	bl	800d0d8 <_free_r>
 800d1c8:	e7e1      	b.n	800d18e <_realloc_r+0x1e>
 800d1ca:	4635      	mov	r5, r6
 800d1cc:	e7df      	b.n	800d18e <_realloc_r+0x1e>

0800d1ce <__sfputc_r>:
 800d1ce:	6893      	ldr	r3, [r2, #8]
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	b410      	push	{r4}
 800d1d6:	6093      	str	r3, [r2, #8]
 800d1d8:	da08      	bge.n	800d1ec <__sfputc_r+0x1e>
 800d1da:	6994      	ldr	r4, [r2, #24]
 800d1dc:	42a3      	cmp	r3, r4
 800d1de:	db01      	blt.n	800d1e4 <__sfputc_r+0x16>
 800d1e0:	290a      	cmp	r1, #10
 800d1e2:	d103      	bne.n	800d1ec <__sfputc_r+0x1e>
 800d1e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1e8:	f000 b94a 	b.w	800d480 <__swbuf_r>
 800d1ec:	6813      	ldr	r3, [r2, #0]
 800d1ee:	1c58      	adds	r0, r3, #1
 800d1f0:	6010      	str	r0, [r2, #0]
 800d1f2:	7019      	strb	r1, [r3, #0]
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <__sfputs_r>:
 800d1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1fe:	4606      	mov	r6, r0
 800d200:	460f      	mov	r7, r1
 800d202:	4614      	mov	r4, r2
 800d204:	18d5      	adds	r5, r2, r3
 800d206:	42ac      	cmp	r4, r5
 800d208:	d101      	bne.n	800d20e <__sfputs_r+0x12>
 800d20a:	2000      	movs	r0, #0
 800d20c:	e007      	b.n	800d21e <__sfputs_r+0x22>
 800d20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d212:	463a      	mov	r2, r7
 800d214:	4630      	mov	r0, r6
 800d216:	f7ff ffda 	bl	800d1ce <__sfputc_r>
 800d21a:	1c43      	adds	r3, r0, #1
 800d21c:	d1f3      	bne.n	800d206 <__sfputs_r+0xa>
 800d21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d220 <_vfiprintf_r>:
 800d220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d224:	460d      	mov	r5, r1
 800d226:	b09d      	sub	sp, #116	; 0x74
 800d228:	4614      	mov	r4, r2
 800d22a:	4698      	mov	r8, r3
 800d22c:	4606      	mov	r6, r0
 800d22e:	b118      	cbz	r0, 800d238 <_vfiprintf_r+0x18>
 800d230:	6983      	ldr	r3, [r0, #24]
 800d232:	b90b      	cbnz	r3, 800d238 <_vfiprintf_r+0x18>
 800d234:	f000 fb06 	bl	800d844 <__sinit>
 800d238:	4b89      	ldr	r3, [pc, #548]	; (800d460 <_vfiprintf_r+0x240>)
 800d23a:	429d      	cmp	r5, r3
 800d23c:	d11b      	bne.n	800d276 <_vfiprintf_r+0x56>
 800d23e:	6875      	ldr	r5, [r6, #4]
 800d240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d242:	07d9      	lsls	r1, r3, #31
 800d244:	d405      	bmi.n	800d252 <_vfiprintf_r+0x32>
 800d246:	89ab      	ldrh	r3, [r5, #12]
 800d248:	059a      	lsls	r2, r3, #22
 800d24a:	d402      	bmi.n	800d252 <_vfiprintf_r+0x32>
 800d24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d24e:	f000 fb97 	bl	800d980 <__retarget_lock_acquire_recursive>
 800d252:	89ab      	ldrh	r3, [r5, #12]
 800d254:	071b      	lsls	r3, r3, #28
 800d256:	d501      	bpl.n	800d25c <_vfiprintf_r+0x3c>
 800d258:	692b      	ldr	r3, [r5, #16]
 800d25a:	b9eb      	cbnz	r3, 800d298 <_vfiprintf_r+0x78>
 800d25c:	4629      	mov	r1, r5
 800d25e:	4630      	mov	r0, r6
 800d260:	f000 f960 	bl	800d524 <__swsetup_r>
 800d264:	b1c0      	cbz	r0, 800d298 <_vfiprintf_r+0x78>
 800d266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d268:	07dc      	lsls	r4, r3, #31
 800d26a:	d50e      	bpl.n	800d28a <_vfiprintf_r+0x6a>
 800d26c:	f04f 30ff 	mov.w	r0, #4294967295
 800d270:	b01d      	add	sp, #116	; 0x74
 800d272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d276:	4b7b      	ldr	r3, [pc, #492]	; (800d464 <_vfiprintf_r+0x244>)
 800d278:	429d      	cmp	r5, r3
 800d27a:	d101      	bne.n	800d280 <_vfiprintf_r+0x60>
 800d27c:	68b5      	ldr	r5, [r6, #8]
 800d27e:	e7df      	b.n	800d240 <_vfiprintf_r+0x20>
 800d280:	4b79      	ldr	r3, [pc, #484]	; (800d468 <_vfiprintf_r+0x248>)
 800d282:	429d      	cmp	r5, r3
 800d284:	bf08      	it	eq
 800d286:	68f5      	ldreq	r5, [r6, #12]
 800d288:	e7da      	b.n	800d240 <_vfiprintf_r+0x20>
 800d28a:	89ab      	ldrh	r3, [r5, #12]
 800d28c:	0598      	lsls	r0, r3, #22
 800d28e:	d4ed      	bmi.n	800d26c <_vfiprintf_r+0x4c>
 800d290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d292:	f000 fb76 	bl	800d982 <__retarget_lock_release_recursive>
 800d296:	e7e9      	b.n	800d26c <_vfiprintf_r+0x4c>
 800d298:	2300      	movs	r3, #0
 800d29a:	9309      	str	r3, [sp, #36]	; 0x24
 800d29c:	2320      	movs	r3, #32
 800d29e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2a6:	2330      	movs	r3, #48	; 0x30
 800d2a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d46c <_vfiprintf_r+0x24c>
 800d2ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2b0:	f04f 0901 	mov.w	r9, #1
 800d2b4:	4623      	mov	r3, r4
 800d2b6:	469a      	mov	sl, r3
 800d2b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2bc:	b10a      	cbz	r2, 800d2c2 <_vfiprintf_r+0xa2>
 800d2be:	2a25      	cmp	r2, #37	; 0x25
 800d2c0:	d1f9      	bne.n	800d2b6 <_vfiprintf_r+0x96>
 800d2c2:	ebba 0b04 	subs.w	fp, sl, r4
 800d2c6:	d00b      	beq.n	800d2e0 <_vfiprintf_r+0xc0>
 800d2c8:	465b      	mov	r3, fp
 800d2ca:	4622      	mov	r2, r4
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	f7ff ff94 	bl	800d1fc <__sfputs_r>
 800d2d4:	3001      	adds	r0, #1
 800d2d6:	f000 80aa 	beq.w	800d42e <_vfiprintf_r+0x20e>
 800d2da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2dc:	445a      	add	r2, fp
 800d2de:	9209      	str	r2, [sp, #36]	; 0x24
 800d2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f000 80a2 	beq.w	800d42e <_vfiprintf_r+0x20e>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2f4:	f10a 0a01 	add.w	sl, sl, #1
 800d2f8:	9304      	str	r3, [sp, #16]
 800d2fa:	9307      	str	r3, [sp, #28]
 800d2fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d300:	931a      	str	r3, [sp, #104]	; 0x68
 800d302:	4654      	mov	r4, sl
 800d304:	2205      	movs	r2, #5
 800d306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30a:	4858      	ldr	r0, [pc, #352]	; (800d46c <_vfiprintf_r+0x24c>)
 800d30c:	f7f2 ffd8 	bl	80002c0 <memchr>
 800d310:	9a04      	ldr	r2, [sp, #16]
 800d312:	b9d8      	cbnz	r0, 800d34c <_vfiprintf_r+0x12c>
 800d314:	06d1      	lsls	r1, r2, #27
 800d316:	bf44      	itt	mi
 800d318:	2320      	movmi	r3, #32
 800d31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d31e:	0713      	lsls	r3, r2, #28
 800d320:	bf44      	itt	mi
 800d322:	232b      	movmi	r3, #43	; 0x2b
 800d324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d328:	f89a 3000 	ldrb.w	r3, [sl]
 800d32c:	2b2a      	cmp	r3, #42	; 0x2a
 800d32e:	d015      	beq.n	800d35c <_vfiprintf_r+0x13c>
 800d330:	9a07      	ldr	r2, [sp, #28]
 800d332:	4654      	mov	r4, sl
 800d334:	2000      	movs	r0, #0
 800d336:	f04f 0c0a 	mov.w	ip, #10
 800d33a:	4621      	mov	r1, r4
 800d33c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d340:	3b30      	subs	r3, #48	; 0x30
 800d342:	2b09      	cmp	r3, #9
 800d344:	d94e      	bls.n	800d3e4 <_vfiprintf_r+0x1c4>
 800d346:	b1b0      	cbz	r0, 800d376 <_vfiprintf_r+0x156>
 800d348:	9207      	str	r2, [sp, #28]
 800d34a:	e014      	b.n	800d376 <_vfiprintf_r+0x156>
 800d34c:	eba0 0308 	sub.w	r3, r0, r8
 800d350:	fa09 f303 	lsl.w	r3, r9, r3
 800d354:	4313      	orrs	r3, r2
 800d356:	9304      	str	r3, [sp, #16]
 800d358:	46a2      	mov	sl, r4
 800d35a:	e7d2      	b.n	800d302 <_vfiprintf_r+0xe2>
 800d35c:	9b03      	ldr	r3, [sp, #12]
 800d35e:	1d19      	adds	r1, r3, #4
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	9103      	str	r1, [sp, #12]
 800d364:	2b00      	cmp	r3, #0
 800d366:	bfbb      	ittet	lt
 800d368:	425b      	neglt	r3, r3
 800d36a:	f042 0202 	orrlt.w	r2, r2, #2
 800d36e:	9307      	strge	r3, [sp, #28]
 800d370:	9307      	strlt	r3, [sp, #28]
 800d372:	bfb8      	it	lt
 800d374:	9204      	strlt	r2, [sp, #16]
 800d376:	7823      	ldrb	r3, [r4, #0]
 800d378:	2b2e      	cmp	r3, #46	; 0x2e
 800d37a:	d10c      	bne.n	800d396 <_vfiprintf_r+0x176>
 800d37c:	7863      	ldrb	r3, [r4, #1]
 800d37e:	2b2a      	cmp	r3, #42	; 0x2a
 800d380:	d135      	bne.n	800d3ee <_vfiprintf_r+0x1ce>
 800d382:	9b03      	ldr	r3, [sp, #12]
 800d384:	1d1a      	adds	r2, r3, #4
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	9203      	str	r2, [sp, #12]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	bfb8      	it	lt
 800d38e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d392:	3402      	adds	r4, #2
 800d394:	9305      	str	r3, [sp, #20]
 800d396:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d47c <_vfiprintf_r+0x25c>
 800d39a:	7821      	ldrb	r1, [r4, #0]
 800d39c:	2203      	movs	r2, #3
 800d39e:	4650      	mov	r0, sl
 800d3a0:	f7f2 ff8e 	bl	80002c0 <memchr>
 800d3a4:	b140      	cbz	r0, 800d3b8 <_vfiprintf_r+0x198>
 800d3a6:	2340      	movs	r3, #64	; 0x40
 800d3a8:	eba0 000a 	sub.w	r0, r0, sl
 800d3ac:	fa03 f000 	lsl.w	r0, r3, r0
 800d3b0:	9b04      	ldr	r3, [sp, #16]
 800d3b2:	4303      	orrs	r3, r0
 800d3b4:	3401      	adds	r4, #1
 800d3b6:	9304      	str	r3, [sp, #16]
 800d3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3bc:	482c      	ldr	r0, [pc, #176]	; (800d470 <_vfiprintf_r+0x250>)
 800d3be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3c2:	2206      	movs	r2, #6
 800d3c4:	f7f2 ff7c 	bl	80002c0 <memchr>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d03f      	beq.n	800d44c <_vfiprintf_r+0x22c>
 800d3cc:	4b29      	ldr	r3, [pc, #164]	; (800d474 <_vfiprintf_r+0x254>)
 800d3ce:	bb1b      	cbnz	r3, 800d418 <_vfiprintf_r+0x1f8>
 800d3d0:	9b03      	ldr	r3, [sp, #12]
 800d3d2:	3307      	adds	r3, #7
 800d3d4:	f023 0307 	bic.w	r3, r3, #7
 800d3d8:	3308      	adds	r3, #8
 800d3da:	9303      	str	r3, [sp, #12]
 800d3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3de:	443b      	add	r3, r7
 800d3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800d3e2:	e767      	b.n	800d2b4 <_vfiprintf_r+0x94>
 800d3e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3e8:	460c      	mov	r4, r1
 800d3ea:	2001      	movs	r0, #1
 800d3ec:	e7a5      	b.n	800d33a <_vfiprintf_r+0x11a>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	3401      	adds	r4, #1
 800d3f2:	9305      	str	r3, [sp, #20]
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	f04f 0c0a 	mov.w	ip, #10
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d400:	3a30      	subs	r2, #48	; 0x30
 800d402:	2a09      	cmp	r2, #9
 800d404:	d903      	bls.n	800d40e <_vfiprintf_r+0x1ee>
 800d406:	2b00      	cmp	r3, #0
 800d408:	d0c5      	beq.n	800d396 <_vfiprintf_r+0x176>
 800d40a:	9105      	str	r1, [sp, #20]
 800d40c:	e7c3      	b.n	800d396 <_vfiprintf_r+0x176>
 800d40e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d412:	4604      	mov	r4, r0
 800d414:	2301      	movs	r3, #1
 800d416:	e7f0      	b.n	800d3fa <_vfiprintf_r+0x1da>
 800d418:	ab03      	add	r3, sp, #12
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	462a      	mov	r2, r5
 800d41e:	4b16      	ldr	r3, [pc, #88]	; (800d478 <_vfiprintf_r+0x258>)
 800d420:	a904      	add	r1, sp, #16
 800d422:	4630      	mov	r0, r6
 800d424:	f3af 8000 	nop.w
 800d428:	4607      	mov	r7, r0
 800d42a:	1c78      	adds	r0, r7, #1
 800d42c:	d1d6      	bne.n	800d3dc <_vfiprintf_r+0x1bc>
 800d42e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d430:	07d9      	lsls	r1, r3, #31
 800d432:	d405      	bmi.n	800d440 <_vfiprintf_r+0x220>
 800d434:	89ab      	ldrh	r3, [r5, #12]
 800d436:	059a      	lsls	r2, r3, #22
 800d438:	d402      	bmi.n	800d440 <_vfiprintf_r+0x220>
 800d43a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d43c:	f000 faa1 	bl	800d982 <__retarget_lock_release_recursive>
 800d440:	89ab      	ldrh	r3, [r5, #12]
 800d442:	065b      	lsls	r3, r3, #25
 800d444:	f53f af12 	bmi.w	800d26c <_vfiprintf_r+0x4c>
 800d448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d44a:	e711      	b.n	800d270 <_vfiprintf_r+0x50>
 800d44c:	ab03      	add	r3, sp, #12
 800d44e:	9300      	str	r3, [sp, #0]
 800d450:	462a      	mov	r2, r5
 800d452:	4b09      	ldr	r3, [pc, #36]	; (800d478 <_vfiprintf_r+0x258>)
 800d454:	a904      	add	r1, sp, #16
 800d456:	4630      	mov	r0, r6
 800d458:	f7ff fc7e 	bl	800cd58 <_printf_i>
 800d45c:	e7e4      	b.n	800d428 <_vfiprintf_r+0x208>
 800d45e:	bf00      	nop
 800d460:	0800e1cc 	.word	0x0800e1cc
 800d464:	0800e1ec 	.word	0x0800e1ec
 800d468:	0800e1ac 	.word	0x0800e1ac
 800d46c:	0800e13c 	.word	0x0800e13c
 800d470:	0800e146 	.word	0x0800e146
 800d474:	00000000 	.word	0x00000000
 800d478:	0800d1fd 	.word	0x0800d1fd
 800d47c:	0800e142 	.word	0x0800e142

0800d480 <__swbuf_r>:
 800d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d482:	460e      	mov	r6, r1
 800d484:	4614      	mov	r4, r2
 800d486:	4605      	mov	r5, r0
 800d488:	b118      	cbz	r0, 800d492 <__swbuf_r+0x12>
 800d48a:	6983      	ldr	r3, [r0, #24]
 800d48c:	b90b      	cbnz	r3, 800d492 <__swbuf_r+0x12>
 800d48e:	f000 f9d9 	bl	800d844 <__sinit>
 800d492:	4b21      	ldr	r3, [pc, #132]	; (800d518 <__swbuf_r+0x98>)
 800d494:	429c      	cmp	r4, r3
 800d496:	d12b      	bne.n	800d4f0 <__swbuf_r+0x70>
 800d498:	686c      	ldr	r4, [r5, #4]
 800d49a:	69a3      	ldr	r3, [r4, #24]
 800d49c:	60a3      	str	r3, [r4, #8]
 800d49e:	89a3      	ldrh	r3, [r4, #12]
 800d4a0:	071a      	lsls	r2, r3, #28
 800d4a2:	d52f      	bpl.n	800d504 <__swbuf_r+0x84>
 800d4a4:	6923      	ldr	r3, [r4, #16]
 800d4a6:	b36b      	cbz	r3, 800d504 <__swbuf_r+0x84>
 800d4a8:	6923      	ldr	r3, [r4, #16]
 800d4aa:	6820      	ldr	r0, [r4, #0]
 800d4ac:	1ac0      	subs	r0, r0, r3
 800d4ae:	6963      	ldr	r3, [r4, #20]
 800d4b0:	b2f6      	uxtb	r6, r6
 800d4b2:	4283      	cmp	r3, r0
 800d4b4:	4637      	mov	r7, r6
 800d4b6:	dc04      	bgt.n	800d4c2 <__swbuf_r+0x42>
 800d4b8:	4621      	mov	r1, r4
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	f000 f92e 	bl	800d71c <_fflush_r>
 800d4c0:	bb30      	cbnz	r0, 800d510 <__swbuf_r+0x90>
 800d4c2:	68a3      	ldr	r3, [r4, #8]
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	60a3      	str	r3, [r4, #8]
 800d4c8:	6823      	ldr	r3, [r4, #0]
 800d4ca:	1c5a      	adds	r2, r3, #1
 800d4cc:	6022      	str	r2, [r4, #0]
 800d4ce:	701e      	strb	r6, [r3, #0]
 800d4d0:	6963      	ldr	r3, [r4, #20]
 800d4d2:	3001      	adds	r0, #1
 800d4d4:	4283      	cmp	r3, r0
 800d4d6:	d004      	beq.n	800d4e2 <__swbuf_r+0x62>
 800d4d8:	89a3      	ldrh	r3, [r4, #12]
 800d4da:	07db      	lsls	r3, r3, #31
 800d4dc:	d506      	bpl.n	800d4ec <__swbuf_r+0x6c>
 800d4de:	2e0a      	cmp	r6, #10
 800d4e0:	d104      	bne.n	800d4ec <__swbuf_r+0x6c>
 800d4e2:	4621      	mov	r1, r4
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f000 f919 	bl	800d71c <_fflush_r>
 800d4ea:	b988      	cbnz	r0, 800d510 <__swbuf_r+0x90>
 800d4ec:	4638      	mov	r0, r7
 800d4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4f0:	4b0a      	ldr	r3, [pc, #40]	; (800d51c <__swbuf_r+0x9c>)
 800d4f2:	429c      	cmp	r4, r3
 800d4f4:	d101      	bne.n	800d4fa <__swbuf_r+0x7a>
 800d4f6:	68ac      	ldr	r4, [r5, #8]
 800d4f8:	e7cf      	b.n	800d49a <__swbuf_r+0x1a>
 800d4fa:	4b09      	ldr	r3, [pc, #36]	; (800d520 <__swbuf_r+0xa0>)
 800d4fc:	429c      	cmp	r4, r3
 800d4fe:	bf08      	it	eq
 800d500:	68ec      	ldreq	r4, [r5, #12]
 800d502:	e7ca      	b.n	800d49a <__swbuf_r+0x1a>
 800d504:	4621      	mov	r1, r4
 800d506:	4628      	mov	r0, r5
 800d508:	f000 f80c 	bl	800d524 <__swsetup_r>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d0cb      	beq.n	800d4a8 <__swbuf_r+0x28>
 800d510:	f04f 37ff 	mov.w	r7, #4294967295
 800d514:	e7ea      	b.n	800d4ec <__swbuf_r+0x6c>
 800d516:	bf00      	nop
 800d518:	0800e1cc 	.word	0x0800e1cc
 800d51c:	0800e1ec 	.word	0x0800e1ec
 800d520:	0800e1ac 	.word	0x0800e1ac

0800d524 <__swsetup_r>:
 800d524:	4b32      	ldr	r3, [pc, #200]	; (800d5f0 <__swsetup_r+0xcc>)
 800d526:	b570      	push	{r4, r5, r6, lr}
 800d528:	681d      	ldr	r5, [r3, #0]
 800d52a:	4606      	mov	r6, r0
 800d52c:	460c      	mov	r4, r1
 800d52e:	b125      	cbz	r5, 800d53a <__swsetup_r+0x16>
 800d530:	69ab      	ldr	r3, [r5, #24]
 800d532:	b913      	cbnz	r3, 800d53a <__swsetup_r+0x16>
 800d534:	4628      	mov	r0, r5
 800d536:	f000 f985 	bl	800d844 <__sinit>
 800d53a:	4b2e      	ldr	r3, [pc, #184]	; (800d5f4 <__swsetup_r+0xd0>)
 800d53c:	429c      	cmp	r4, r3
 800d53e:	d10f      	bne.n	800d560 <__swsetup_r+0x3c>
 800d540:	686c      	ldr	r4, [r5, #4]
 800d542:	89a3      	ldrh	r3, [r4, #12]
 800d544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d548:	0719      	lsls	r1, r3, #28
 800d54a:	d42c      	bmi.n	800d5a6 <__swsetup_r+0x82>
 800d54c:	06dd      	lsls	r5, r3, #27
 800d54e:	d411      	bmi.n	800d574 <__swsetup_r+0x50>
 800d550:	2309      	movs	r3, #9
 800d552:	6033      	str	r3, [r6, #0]
 800d554:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d558:	81a3      	strh	r3, [r4, #12]
 800d55a:	f04f 30ff 	mov.w	r0, #4294967295
 800d55e:	e03e      	b.n	800d5de <__swsetup_r+0xba>
 800d560:	4b25      	ldr	r3, [pc, #148]	; (800d5f8 <__swsetup_r+0xd4>)
 800d562:	429c      	cmp	r4, r3
 800d564:	d101      	bne.n	800d56a <__swsetup_r+0x46>
 800d566:	68ac      	ldr	r4, [r5, #8]
 800d568:	e7eb      	b.n	800d542 <__swsetup_r+0x1e>
 800d56a:	4b24      	ldr	r3, [pc, #144]	; (800d5fc <__swsetup_r+0xd8>)
 800d56c:	429c      	cmp	r4, r3
 800d56e:	bf08      	it	eq
 800d570:	68ec      	ldreq	r4, [r5, #12]
 800d572:	e7e6      	b.n	800d542 <__swsetup_r+0x1e>
 800d574:	0758      	lsls	r0, r3, #29
 800d576:	d512      	bpl.n	800d59e <__swsetup_r+0x7a>
 800d578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d57a:	b141      	cbz	r1, 800d58e <__swsetup_r+0x6a>
 800d57c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d580:	4299      	cmp	r1, r3
 800d582:	d002      	beq.n	800d58a <__swsetup_r+0x66>
 800d584:	4630      	mov	r0, r6
 800d586:	f7ff fda7 	bl	800d0d8 <_free_r>
 800d58a:	2300      	movs	r3, #0
 800d58c:	6363      	str	r3, [r4, #52]	; 0x34
 800d58e:	89a3      	ldrh	r3, [r4, #12]
 800d590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d594:	81a3      	strh	r3, [r4, #12]
 800d596:	2300      	movs	r3, #0
 800d598:	6063      	str	r3, [r4, #4]
 800d59a:	6923      	ldr	r3, [r4, #16]
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	89a3      	ldrh	r3, [r4, #12]
 800d5a0:	f043 0308 	orr.w	r3, r3, #8
 800d5a4:	81a3      	strh	r3, [r4, #12]
 800d5a6:	6923      	ldr	r3, [r4, #16]
 800d5a8:	b94b      	cbnz	r3, 800d5be <__swsetup_r+0x9a>
 800d5aa:	89a3      	ldrh	r3, [r4, #12]
 800d5ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5b4:	d003      	beq.n	800d5be <__swsetup_r+0x9a>
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	f000 fa09 	bl	800d9d0 <__smakebuf_r>
 800d5be:	89a0      	ldrh	r0, [r4, #12]
 800d5c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5c4:	f010 0301 	ands.w	r3, r0, #1
 800d5c8:	d00a      	beq.n	800d5e0 <__swsetup_r+0xbc>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60a3      	str	r3, [r4, #8]
 800d5ce:	6963      	ldr	r3, [r4, #20]
 800d5d0:	425b      	negs	r3, r3
 800d5d2:	61a3      	str	r3, [r4, #24]
 800d5d4:	6923      	ldr	r3, [r4, #16]
 800d5d6:	b943      	cbnz	r3, 800d5ea <__swsetup_r+0xc6>
 800d5d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5dc:	d1ba      	bne.n	800d554 <__swsetup_r+0x30>
 800d5de:	bd70      	pop	{r4, r5, r6, pc}
 800d5e0:	0781      	lsls	r1, r0, #30
 800d5e2:	bf58      	it	pl
 800d5e4:	6963      	ldrpl	r3, [r4, #20]
 800d5e6:	60a3      	str	r3, [r4, #8]
 800d5e8:	e7f4      	b.n	800d5d4 <__swsetup_r+0xb0>
 800d5ea:	2000      	movs	r0, #0
 800d5ec:	e7f7      	b.n	800d5de <__swsetup_r+0xba>
 800d5ee:	bf00      	nop
 800d5f0:	20000020 	.word	0x20000020
 800d5f4:	0800e1cc 	.word	0x0800e1cc
 800d5f8:	0800e1ec 	.word	0x0800e1ec
 800d5fc:	0800e1ac 	.word	0x0800e1ac

0800d600 <abort>:
 800d600:	b508      	push	{r3, lr}
 800d602:	2006      	movs	r0, #6
 800d604:	f000 fa54 	bl	800dab0 <raise>
 800d608:	2001      	movs	r0, #1
 800d60a:	f7f4 fac7 	bl	8001b9c <_exit>
	...

0800d610 <__sflush_r>:
 800d610:	898a      	ldrh	r2, [r1, #12]
 800d612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d616:	4605      	mov	r5, r0
 800d618:	0710      	lsls	r0, r2, #28
 800d61a:	460c      	mov	r4, r1
 800d61c:	d458      	bmi.n	800d6d0 <__sflush_r+0xc0>
 800d61e:	684b      	ldr	r3, [r1, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	dc05      	bgt.n	800d630 <__sflush_r+0x20>
 800d624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d626:	2b00      	cmp	r3, #0
 800d628:	dc02      	bgt.n	800d630 <__sflush_r+0x20>
 800d62a:	2000      	movs	r0, #0
 800d62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d632:	2e00      	cmp	r6, #0
 800d634:	d0f9      	beq.n	800d62a <__sflush_r+0x1a>
 800d636:	2300      	movs	r3, #0
 800d638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d63c:	682f      	ldr	r7, [r5, #0]
 800d63e:	602b      	str	r3, [r5, #0]
 800d640:	d032      	beq.n	800d6a8 <__sflush_r+0x98>
 800d642:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d644:	89a3      	ldrh	r3, [r4, #12]
 800d646:	075a      	lsls	r2, r3, #29
 800d648:	d505      	bpl.n	800d656 <__sflush_r+0x46>
 800d64a:	6863      	ldr	r3, [r4, #4]
 800d64c:	1ac0      	subs	r0, r0, r3
 800d64e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d650:	b10b      	cbz	r3, 800d656 <__sflush_r+0x46>
 800d652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d654:	1ac0      	subs	r0, r0, r3
 800d656:	2300      	movs	r3, #0
 800d658:	4602      	mov	r2, r0
 800d65a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d65c:	6a21      	ldr	r1, [r4, #32]
 800d65e:	4628      	mov	r0, r5
 800d660:	47b0      	blx	r6
 800d662:	1c43      	adds	r3, r0, #1
 800d664:	89a3      	ldrh	r3, [r4, #12]
 800d666:	d106      	bne.n	800d676 <__sflush_r+0x66>
 800d668:	6829      	ldr	r1, [r5, #0]
 800d66a:	291d      	cmp	r1, #29
 800d66c:	d82c      	bhi.n	800d6c8 <__sflush_r+0xb8>
 800d66e:	4a2a      	ldr	r2, [pc, #168]	; (800d718 <__sflush_r+0x108>)
 800d670:	40ca      	lsrs	r2, r1
 800d672:	07d6      	lsls	r6, r2, #31
 800d674:	d528      	bpl.n	800d6c8 <__sflush_r+0xb8>
 800d676:	2200      	movs	r2, #0
 800d678:	6062      	str	r2, [r4, #4]
 800d67a:	04d9      	lsls	r1, r3, #19
 800d67c:	6922      	ldr	r2, [r4, #16]
 800d67e:	6022      	str	r2, [r4, #0]
 800d680:	d504      	bpl.n	800d68c <__sflush_r+0x7c>
 800d682:	1c42      	adds	r2, r0, #1
 800d684:	d101      	bne.n	800d68a <__sflush_r+0x7a>
 800d686:	682b      	ldr	r3, [r5, #0]
 800d688:	b903      	cbnz	r3, 800d68c <__sflush_r+0x7c>
 800d68a:	6560      	str	r0, [r4, #84]	; 0x54
 800d68c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d68e:	602f      	str	r7, [r5, #0]
 800d690:	2900      	cmp	r1, #0
 800d692:	d0ca      	beq.n	800d62a <__sflush_r+0x1a>
 800d694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d698:	4299      	cmp	r1, r3
 800d69a:	d002      	beq.n	800d6a2 <__sflush_r+0x92>
 800d69c:	4628      	mov	r0, r5
 800d69e:	f7ff fd1b 	bl	800d0d8 <_free_r>
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	6360      	str	r0, [r4, #52]	; 0x34
 800d6a6:	e7c1      	b.n	800d62c <__sflush_r+0x1c>
 800d6a8:	6a21      	ldr	r1, [r4, #32]
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	47b0      	blx	r6
 800d6b0:	1c41      	adds	r1, r0, #1
 800d6b2:	d1c7      	bne.n	800d644 <__sflush_r+0x34>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d0c4      	beq.n	800d644 <__sflush_r+0x34>
 800d6ba:	2b1d      	cmp	r3, #29
 800d6bc:	d001      	beq.n	800d6c2 <__sflush_r+0xb2>
 800d6be:	2b16      	cmp	r3, #22
 800d6c0:	d101      	bne.n	800d6c6 <__sflush_r+0xb6>
 800d6c2:	602f      	str	r7, [r5, #0]
 800d6c4:	e7b1      	b.n	800d62a <__sflush_r+0x1a>
 800d6c6:	89a3      	ldrh	r3, [r4, #12]
 800d6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6cc:	81a3      	strh	r3, [r4, #12]
 800d6ce:	e7ad      	b.n	800d62c <__sflush_r+0x1c>
 800d6d0:	690f      	ldr	r7, [r1, #16]
 800d6d2:	2f00      	cmp	r7, #0
 800d6d4:	d0a9      	beq.n	800d62a <__sflush_r+0x1a>
 800d6d6:	0793      	lsls	r3, r2, #30
 800d6d8:	680e      	ldr	r6, [r1, #0]
 800d6da:	bf08      	it	eq
 800d6dc:	694b      	ldreq	r3, [r1, #20]
 800d6de:	600f      	str	r7, [r1, #0]
 800d6e0:	bf18      	it	ne
 800d6e2:	2300      	movne	r3, #0
 800d6e4:	eba6 0807 	sub.w	r8, r6, r7
 800d6e8:	608b      	str	r3, [r1, #8]
 800d6ea:	f1b8 0f00 	cmp.w	r8, #0
 800d6ee:	dd9c      	ble.n	800d62a <__sflush_r+0x1a>
 800d6f0:	6a21      	ldr	r1, [r4, #32]
 800d6f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d6f4:	4643      	mov	r3, r8
 800d6f6:	463a      	mov	r2, r7
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	47b0      	blx	r6
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	dc06      	bgt.n	800d70e <__sflush_r+0xfe>
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d706:	81a3      	strh	r3, [r4, #12]
 800d708:	f04f 30ff 	mov.w	r0, #4294967295
 800d70c:	e78e      	b.n	800d62c <__sflush_r+0x1c>
 800d70e:	4407      	add	r7, r0
 800d710:	eba8 0800 	sub.w	r8, r8, r0
 800d714:	e7e9      	b.n	800d6ea <__sflush_r+0xda>
 800d716:	bf00      	nop
 800d718:	20400001 	.word	0x20400001

0800d71c <_fflush_r>:
 800d71c:	b538      	push	{r3, r4, r5, lr}
 800d71e:	690b      	ldr	r3, [r1, #16]
 800d720:	4605      	mov	r5, r0
 800d722:	460c      	mov	r4, r1
 800d724:	b913      	cbnz	r3, 800d72c <_fflush_r+0x10>
 800d726:	2500      	movs	r5, #0
 800d728:	4628      	mov	r0, r5
 800d72a:	bd38      	pop	{r3, r4, r5, pc}
 800d72c:	b118      	cbz	r0, 800d736 <_fflush_r+0x1a>
 800d72e:	6983      	ldr	r3, [r0, #24]
 800d730:	b90b      	cbnz	r3, 800d736 <_fflush_r+0x1a>
 800d732:	f000 f887 	bl	800d844 <__sinit>
 800d736:	4b14      	ldr	r3, [pc, #80]	; (800d788 <_fflush_r+0x6c>)
 800d738:	429c      	cmp	r4, r3
 800d73a:	d11b      	bne.n	800d774 <_fflush_r+0x58>
 800d73c:	686c      	ldr	r4, [r5, #4]
 800d73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d0ef      	beq.n	800d726 <_fflush_r+0xa>
 800d746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d748:	07d0      	lsls	r0, r2, #31
 800d74a:	d404      	bmi.n	800d756 <_fflush_r+0x3a>
 800d74c:	0599      	lsls	r1, r3, #22
 800d74e:	d402      	bmi.n	800d756 <_fflush_r+0x3a>
 800d750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d752:	f000 f915 	bl	800d980 <__retarget_lock_acquire_recursive>
 800d756:	4628      	mov	r0, r5
 800d758:	4621      	mov	r1, r4
 800d75a:	f7ff ff59 	bl	800d610 <__sflush_r>
 800d75e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d760:	07da      	lsls	r2, r3, #31
 800d762:	4605      	mov	r5, r0
 800d764:	d4e0      	bmi.n	800d728 <_fflush_r+0xc>
 800d766:	89a3      	ldrh	r3, [r4, #12]
 800d768:	059b      	lsls	r3, r3, #22
 800d76a:	d4dd      	bmi.n	800d728 <_fflush_r+0xc>
 800d76c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d76e:	f000 f908 	bl	800d982 <__retarget_lock_release_recursive>
 800d772:	e7d9      	b.n	800d728 <_fflush_r+0xc>
 800d774:	4b05      	ldr	r3, [pc, #20]	; (800d78c <_fflush_r+0x70>)
 800d776:	429c      	cmp	r4, r3
 800d778:	d101      	bne.n	800d77e <_fflush_r+0x62>
 800d77a:	68ac      	ldr	r4, [r5, #8]
 800d77c:	e7df      	b.n	800d73e <_fflush_r+0x22>
 800d77e:	4b04      	ldr	r3, [pc, #16]	; (800d790 <_fflush_r+0x74>)
 800d780:	429c      	cmp	r4, r3
 800d782:	bf08      	it	eq
 800d784:	68ec      	ldreq	r4, [r5, #12]
 800d786:	e7da      	b.n	800d73e <_fflush_r+0x22>
 800d788:	0800e1cc 	.word	0x0800e1cc
 800d78c:	0800e1ec 	.word	0x0800e1ec
 800d790:	0800e1ac 	.word	0x0800e1ac

0800d794 <std>:
 800d794:	2300      	movs	r3, #0
 800d796:	b510      	push	{r4, lr}
 800d798:	4604      	mov	r4, r0
 800d79a:	e9c0 3300 	strd	r3, r3, [r0]
 800d79e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7a2:	6083      	str	r3, [r0, #8]
 800d7a4:	8181      	strh	r1, [r0, #12]
 800d7a6:	6643      	str	r3, [r0, #100]	; 0x64
 800d7a8:	81c2      	strh	r2, [r0, #14]
 800d7aa:	6183      	str	r3, [r0, #24]
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	2208      	movs	r2, #8
 800d7b0:	305c      	adds	r0, #92	; 0x5c
 800d7b2:	f7fc ff2f 	bl	800a614 <memset>
 800d7b6:	4b05      	ldr	r3, [pc, #20]	; (800d7cc <std+0x38>)
 800d7b8:	6263      	str	r3, [r4, #36]	; 0x24
 800d7ba:	4b05      	ldr	r3, [pc, #20]	; (800d7d0 <std+0x3c>)
 800d7bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d7be:	4b05      	ldr	r3, [pc, #20]	; (800d7d4 <std+0x40>)
 800d7c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d7c2:	4b05      	ldr	r3, [pc, #20]	; (800d7d8 <std+0x44>)
 800d7c4:	6224      	str	r4, [r4, #32]
 800d7c6:	6323      	str	r3, [r4, #48]	; 0x30
 800d7c8:	bd10      	pop	{r4, pc}
 800d7ca:	bf00      	nop
 800d7cc:	0800dae9 	.word	0x0800dae9
 800d7d0:	0800db0b 	.word	0x0800db0b
 800d7d4:	0800db43 	.word	0x0800db43
 800d7d8:	0800db67 	.word	0x0800db67

0800d7dc <_cleanup_r>:
 800d7dc:	4901      	ldr	r1, [pc, #4]	; (800d7e4 <_cleanup_r+0x8>)
 800d7de:	f000 b8af 	b.w	800d940 <_fwalk_reent>
 800d7e2:	bf00      	nop
 800d7e4:	0800d71d 	.word	0x0800d71d

0800d7e8 <__sfmoreglue>:
 800d7e8:	b570      	push	{r4, r5, r6, lr}
 800d7ea:	2268      	movs	r2, #104	; 0x68
 800d7ec:	1e4d      	subs	r5, r1, #1
 800d7ee:	4355      	muls	r5, r2
 800d7f0:	460e      	mov	r6, r1
 800d7f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7f6:	f7ff f871 	bl	800c8dc <_malloc_r>
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	b140      	cbz	r0, 800d810 <__sfmoreglue+0x28>
 800d7fe:	2100      	movs	r1, #0
 800d800:	e9c0 1600 	strd	r1, r6, [r0]
 800d804:	300c      	adds	r0, #12
 800d806:	60a0      	str	r0, [r4, #8]
 800d808:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d80c:	f7fc ff02 	bl	800a614 <memset>
 800d810:	4620      	mov	r0, r4
 800d812:	bd70      	pop	{r4, r5, r6, pc}

0800d814 <__sfp_lock_acquire>:
 800d814:	4801      	ldr	r0, [pc, #4]	; (800d81c <__sfp_lock_acquire+0x8>)
 800d816:	f000 b8b3 	b.w	800d980 <__retarget_lock_acquire_recursive>
 800d81a:	bf00      	nop
 800d81c:	20014735 	.word	0x20014735

0800d820 <__sfp_lock_release>:
 800d820:	4801      	ldr	r0, [pc, #4]	; (800d828 <__sfp_lock_release+0x8>)
 800d822:	f000 b8ae 	b.w	800d982 <__retarget_lock_release_recursive>
 800d826:	bf00      	nop
 800d828:	20014735 	.word	0x20014735

0800d82c <__sinit_lock_acquire>:
 800d82c:	4801      	ldr	r0, [pc, #4]	; (800d834 <__sinit_lock_acquire+0x8>)
 800d82e:	f000 b8a7 	b.w	800d980 <__retarget_lock_acquire_recursive>
 800d832:	bf00      	nop
 800d834:	20014736 	.word	0x20014736

0800d838 <__sinit_lock_release>:
 800d838:	4801      	ldr	r0, [pc, #4]	; (800d840 <__sinit_lock_release+0x8>)
 800d83a:	f000 b8a2 	b.w	800d982 <__retarget_lock_release_recursive>
 800d83e:	bf00      	nop
 800d840:	20014736 	.word	0x20014736

0800d844 <__sinit>:
 800d844:	b510      	push	{r4, lr}
 800d846:	4604      	mov	r4, r0
 800d848:	f7ff fff0 	bl	800d82c <__sinit_lock_acquire>
 800d84c:	69a3      	ldr	r3, [r4, #24]
 800d84e:	b11b      	cbz	r3, 800d858 <__sinit+0x14>
 800d850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d854:	f7ff bff0 	b.w	800d838 <__sinit_lock_release>
 800d858:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d85c:	6523      	str	r3, [r4, #80]	; 0x50
 800d85e:	4b13      	ldr	r3, [pc, #76]	; (800d8ac <__sinit+0x68>)
 800d860:	4a13      	ldr	r2, [pc, #76]	; (800d8b0 <__sinit+0x6c>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	62a2      	str	r2, [r4, #40]	; 0x28
 800d866:	42a3      	cmp	r3, r4
 800d868:	bf04      	itt	eq
 800d86a:	2301      	moveq	r3, #1
 800d86c:	61a3      	streq	r3, [r4, #24]
 800d86e:	4620      	mov	r0, r4
 800d870:	f000 f820 	bl	800d8b4 <__sfp>
 800d874:	6060      	str	r0, [r4, #4]
 800d876:	4620      	mov	r0, r4
 800d878:	f000 f81c 	bl	800d8b4 <__sfp>
 800d87c:	60a0      	str	r0, [r4, #8]
 800d87e:	4620      	mov	r0, r4
 800d880:	f000 f818 	bl	800d8b4 <__sfp>
 800d884:	2200      	movs	r2, #0
 800d886:	60e0      	str	r0, [r4, #12]
 800d888:	2104      	movs	r1, #4
 800d88a:	6860      	ldr	r0, [r4, #4]
 800d88c:	f7ff ff82 	bl	800d794 <std>
 800d890:	68a0      	ldr	r0, [r4, #8]
 800d892:	2201      	movs	r2, #1
 800d894:	2109      	movs	r1, #9
 800d896:	f7ff ff7d 	bl	800d794 <std>
 800d89a:	68e0      	ldr	r0, [r4, #12]
 800d89c:	2202      	movs	r2, #2
 800d89e:	2112      	movs	r1, #18
 800d8a0:	f7ff ff78 	bl	800d794 <std>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	61a3      	str	r3, [r4, #24]
 800d8a8:	e7d2      	b.n	800d850 <__sinit+0xc>
 800d8aa:	bf00      	nop
 800d8ac:	0800ddd4 	.word	0x0800ddd4
 800d8b0:	0800d7dd 	.word	0x0800d7dd

0800d8b4 <__sfp>:
 800d8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b6:	4607      	mov	r7, r0
 800d8b8:	f7ff ffac 	bl	800d814 <__sfp_lock_acquire>
 800d8bc:	4b1e      	ldr	r3, [pc, #120]	; (800d938 <__sfp+0x84>)
 800d8be:	681e      	ldr	r6, [r3, #0]
 800d8c0:	69b3      	ldr	r3, [r6, #24]
 800d8c2:	b913      	cbnz	r3, 800d8ca <__sfp+0x16>
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	f7ff ffbd 	bl	800d844 <__sinit>
 800d8ca:	3648      	adds	r6, #72	; 0x48
 800d8cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	d503      	bpl.n	800d8dc <__sfp+0x28>
 800d8d4:	6833      	ldr	r3, [r6, #0]
 800d8d6:	b30b      	cbz	r3, 800d91c <__sfp+0x68>
 800d8d8:	6836      	ldr	r6, [r6, #0]
 800d8da:	e7f7      	b.n	800d8cc <__sfp+0x18>
 800d8dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d8e0:	b9d5      	cbnz	r5, 800d918 <__sfp+0x64>
 800d8e2:	4b16      	ldr	r3, [pc, #88]	; (800d93c <__sfp+0x88>)
 800d8e4:	60e3      	str	r3, [r4, #12]
 800d8e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8ea:	6665      	str	r5, [r4, #100]	; 0x64
 800d8ec:	f000 f847 	bl	800d97e <__retarget_lock_init_recursive>
 800d8f0:	f7ff ff96 	bl	800d820 <__sfp_lock_release>
 800d8f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d8f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d8fc:	6025      	str	r5, [r4, #0]
 800d8fe:	61a5      	str	r5, [r4, #24]
 800d900:	2208      	movs	r2, #8
 800d902:	4629      	mov	r1, r5
 800d904:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d908:	f7fc fe84 	bl	800a614 <memset>
 800d90c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d910:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d914:	4620      	mov	r0, r4
 800d916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d918:	3468      	adds	r4, #104	; 0x68
 800d91a:	e7d9      	b.n	800d8d0 <__sfp+0x1c>
 800d91c:	2104      	movs	r1, #4
 800d91e:	4638      	mov	r0, r7
 800d920:	f7ff ff62 	bl	800d7e8 <__sfmoreglue>
 800d924:	4604      	mov	r4, r0
 800d926:	6030      	str	r0, [r6, #0]
 800d928:	2800      	cmp	r0, #0
 800d92a:	d1d5      	bne.n	800d8d8 <__sfp+0x24>
 800d92c:	f7ff ff78 	bl	800d820 <__sfp_lock_release>
 800d930:	230c      	movs	r3, #12
 800d932:	603b      	str	r3, [r7, #0]
 800d934:	e7ee      	b.n	800d914 <__sfp+0x60>
 800d936:	bf00      	nop
 800d938:	0800ddd4 	.word	0x0800ddd4
 800d93c:	ffff0001 	.word	0xffff0001

0800d940 <_fwalk_reent>:
 800d940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d944:	4606      	mov	r6, r0
 800d946:	4688      	mov	r8, r1
 800d948:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d94c:	2700      	movs	r7, #0
 800d94e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d952:	f1b9 0901 	subs.w	r9, r9, #1
 800d956:	d505      	bpl.n	800d964 <_fwalk_reent+0x24>
 800d958:	6824      	ldr	r4, [r4, #0]
 800d95a:	2c00      	cmp	r4, #0
 800d95c:	d1f7      	bne.n	800d94e <_fwalk_reent+0xe>
 800d95e:	4638      	mov	r0, r7
 800d960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d964:	89ab      	ldrh	r3, [r5, #12]
 800d966:	2b01      	cmp	r3, #1
 800d968:	d907      	bls.n	800d97a <_fwalk_reent+0x3a>
 800d96a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d96e:	3301      	adds	r3, #1
 800d970:	d003      	beq.n	800d97a <_fwalk_reent+0x3a>
 800d972:	4629      	mov	r1, r5
 800d974:	4630      	mov	r0, r6
 800d976:	47c0      	blx	r8
 800d978:	4307      	orrs	r7, r0
 800d97a:	3568      	adds	r5, #104	; 0x68
 800d97c:	e7e9      	b.n	800d952 <_fwalk_reent+0x12>

0800d97e <__retarget_lock_init_recursive>:
 800d97e:	4770      	bx	lr

0800d980 <__retarget_lock_acquire_recursive>:
 800d980:	4770      	bx	lr

0800d982 <__retarget_lock_release_recursive>:
 800d982:	4770      	bx	lr

0800d984 <__swhatbuf_r>:
 800d984:	b570      	push	{r4, r5, r6, lr}
 800d986:	460e      	mov	r6, r1
 800d988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d98c:	2900      	cmp	r1, #0
 800d98e:	b096      	sub	sp, #88	; 0x58
 800d990:	4614      	mov	r4, r2
 800d992:	461d      	mov	r5, r3
 800d994:	da08      	bge.n	800d9a8 <__swhatbuf_r+0x24>
 800d996:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d99a:	2200      	movs	r2, #0
 800d99c:	602a      	str	r2, [r5, #0]
 800d99e:	061a      	lsls	r2, r3, #24
 800d9a0:	d410      	bmi.n	800d9c4 <__swhatbuf_r+0x40>
 800d9a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9a6:	e00e      	b.n	800d9c6 <__swhatbuf_r+0x42>
 800d9a8:	466a      	mov	r2, sp
 800d9aa:	f000 f8f1 	bl	800db90 <_fstat_r>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	dbf1      	blt.n	800d996 <__swhatbuf_r+0x12>
 800d9b2:	9a01      	ldr	r2, [sp, #4]
 800d9b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9bc:	425a      	negs	r2, r3
 800d9be:	415a      	adcs	r2, r3
 800d9c0:	602a      	str	r2, [r5, #0]
 800d9c2:	e7ee      	b.n	800d9a2 <__swhatbuf_r+0x1e>
 800d9c4:	2340      	movs	r3, #64	; 0x40
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	6023      	str	r3, [r4, #0]
 800d9ca:	b016      	add	sp, #88	; 0x58
 800d9cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d9d0 <__smakebuf_r>:
 800d9d0:	898b      	ldrh	r3, [r1, #12]
 800d9d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9d4:	079d      	lsls	r5, r3, #30
 800d9d6:	4606      	mov	r6, r0
 800d9d8:	460c      	mov	r4, r1
 800d9da:	d507      	bpl.n	800d9ec <__smakebuf_r+0x1c>
 800d9dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9e0:	6023      	str	r3, [r4, #0]
 800d9e2:	6123      	str	r3, [r4, #16]
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	6163      	str	r3, [r4, #20]
 800d9e8:	b002      	add	sp, #8
 800d9ea:	bd70      	pop	{r4, r5, r6, pc}
 800d9ec:	ab01      	add	r3, sp, #4
 800d9ee:	466a      	mov	r2, sp
 800d9f0:	f7ff ffc8 	bl	800d984 <__swhatbuf_r>
 800d9f4:	9900      	ldr	r1, [sp, #0]
 800d9f6:	4605      	mov	r5, r0
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f7fe ff6f 	bl	800c8dc <_malloc_r>
 800d9fe:	b948      	cbnz	r0, 800da14 <__smakebuf_r+0x44>
 800da00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da04:	059a      	lsls	r2, r3, #22
 800da06:	d4ef      	bmi.n	800d9e8 <__smakebuf_r+0x18>
 800da08:	f023 0303 	bic.w	r3, r3, #3
 800da0c:	f043 0302 	orr.w	r3, r3, #2
 800da10:	81a3      	strh	r3, [r4, #12]
 800da12:	e7e3      	b.n	800d9dc <__smakebuf_r+0xc>
 800da14:	4b0d      	ldr	r3, [pc, #52]	; (800da4c <__smakebuf_r+0x7c>)
 800da16:	62b3      	str	r3, [r6, #40]	; 0x28
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	6020      	str	r0, [r4, #0]
 800da1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da20:	81a3      	strh	r3, [r4, #12]
 800da22:	9b00      	ldr	r3, [sp, #0]
 800da24:	6163      	str	r3, [r4, #20]
 800da26:	9b01      	ldr	r3, [sp, #4]
 800da28:	6120      	str	r0, [r4, #16]
 800da2a:	b15b      	cbz	r3, 800da44 <__smakebuf_r+0x74>
 800da2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da30:	4630      	mov	r0, r6
 800da32:	f000 f8bf 	bl	800dbb4 <_isatty_r>
 800da36:	b128      	cbz	r0, 800da44 <__smakebuf_r+0x74>
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	f023 0303 	bic.w	r3, r3, #3
 800da3e:	f043 0301 	orr.w	r3, r3, #1
 800da42:	81a3      	strh	r3, [r4, #12]
 800da44:	89a0      	ldrh	r0, [r4, #12]
 800da46:	4305      	orrs	r5, r0
 800da48:	81a5      	strh	r5, [r4, #12]
 800da4a:	e7cd      	b.n	800d9e8 <__smakebuf_r+0x18>
 800da4c:	0800d7dd 	.word	0x0800d7dd

0800da50 <_malloc_usable_size_r>:
 800da50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da54:	1f18      	subs	r0, r3, #4
 800da56:	2b00      	cmp	r3, #0
 800da58:	bfbc      	itt	lt
 800da5a:	580b      	ldrlt	r3, [r1, r0]
 800da5c:	18c0      	addlt	r0, r0, r3
 800da5e:	4770      	bx	lr

0800da60 <_raise_r>:
 800da60:	291f      	cmp	r1, #31
 800da62:	b538      	push	{r3, r4, r5, lr}
 800da64:	4604      	mov	r4, r0
 800da66:	460d      	mov	r5, r1
 800da68:	d904      	bls.n	800da74 <_raise_r+0x14>
 800da6a:	2316      	movs	r3, #22
 800da6c:	6003      	str	r3, [r0, #0]
 800da6e:	f04f 30ff 	mov.w	r0, #4294967295
 800da72:	bd38      	pop	{r3, r4, r5, pc}
 800da74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da76:	b112      	cbz	r2, 800da7e <_raise_r+0x1e>
 800da78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da7c:	b94b      	cbnz	r3, 800da92 <_raise_r+0x32>
 800da7e:	4620      	mov	r0, r4
 800da80:	f000 f830 	bl	800dae4 <_getpid_r>
 800da84:	462a      	mov	r2, r5
 800da86:	4601      	mov	r1, r0
 800da88:	4620      	mov	r0, r4
 800da8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da8e:	f000 b817 	b.w	800dac0 <_kill_r>
 800da92:	2b01      	cmp	r3, #1
 800da94:	d00a      	beq.n	800daac <_raise_r+0x4c>
 800da96:	1c59      	adds	r1, r3, #1
 800da98:	d103      	bne.n	800daa2 <_raise_r+0x42>
 800da9a:	2316      	movs	r3, #22
 800da9c:	6003      	str	r3, [r0, #0]
 800da9e:	2001      	movs	r0, #1
 800daa0:	e7e7      	b.n	800da72 <_raise_r+0x12>
 800daa2:	2400      	movs	r4, #0
 800daa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800daa8:	4628      	mov	r0, r5
 800daaa:	4798      	blx	r3
 800daac:	2000      	movs	r0, #0
 800daae:	e7e0      	b.n	800da72 <_raise_r+0x12>

0800dab0 <raise>:
 800dab0:	4b02      	ldr	r3, [pc, #8]	; (800dabc <raise+0xc>)
 800dab2:	4601      	mov	r1, r0
 800dab4:	6818      	ldr	r0, [r3, #0]
 800dab6:	f7ff bfd3 	b.w	800da60 <_raise_r>
 800daba:	bf00      	nop
 800dabc:	20000020 	.word	0x20000020

0800dac0 <_kill_r>:
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	4d07      	ldr	r5, [pc, #28]	; (800dae0 <_kill_r+0x20>)
 800dac4:	2300      	movs	r3, #0
 800dac6:	4604      	mov	r4, r0
 800dac8:	4608      	mov	r0, r1
 800daca:	4611      	mov	r1, r2
 800dacc:	602b      	str	r3, [r5, #0]
 800dace:	f7f4 f855 	bl	8001b7c <_kill>
 800dad2:	1c43      	adds	r3, r0, #1
 800dad4:	d102      	bne.n	800dadc <_kill_r+0x1c>
 800dad6:	682b      	ldr	r3, [r5, #0]
 800dad8:	b103      	cbz	r3, 800dadc <_kill_r+0x1c>
 800dada:	6023      	str	r3, [r4, #0]
 800dadc:	bd38      	pop	{r3, r4, r5, pc}
 800dade:	bf00      	nop
 800dae0:	20014730 	.word	0x20014730

0800dae4 <_getpid_r>:
 800dae4:	f7f4 b842 	b.w	8001b6c <_getpid>

0800dae8 <__sread>:
 800dae8:	b510      	push	{r4, lr}
 800daea:	460c      	mov	r4, r1
 800daec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daf0:	f000 f882 	bl	800dbf8 <_read_r>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	bfab      	itete	ge
 800daf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dafa:	89a3      	ldrhlt	r3, [r4, #12]
 800dafc:	181b      	addge	r3, r3, r0
 800dafe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db02:	bfac      	ite	ge
 800db04:	6563      	strge	r3, [r4, #84]	; 0x54
 800db06:	81a3      	strhlt	r3, [r4, #12]
 800db08:	bd10      	pop	{r4, pc}

0800db0a <__swrite>:
 800db0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db0e:	461f      	mov	r7, r3
 800db10:	898b      	ldrh	r3, [r1, #12]
 800db12:	05db      	lsls	r3, r3, #23
 800db14:	4605      	mov	r5, r0
 800db16:	460c      	mov	r4, r1
 800db18:	4616      	mov	r6, r2
 800db1a:	d505      	bpl.n	800db28 <__swrite+0x1e>
 800db1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db20:	2302      	movs	r3, #2
 800db22:	2200      	movs	r2, #0
 800db24:	f000 f856 	bl	800dbd4 <_lseek_r>
 800db28:	89a3      	ldrh	r3, [r4, #12]
 800db2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db32:	81a3      	strh	r3, [r4, #12]
 800db34:	4632      	mov	r2, r6
 800db36:	463b      	mov	r3, r7
 800db38:	4628      	mov	r0, r5
 800db3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db3e:	f7fc bd0f 	b.w	800a560 <_write_r>

0800db42 <__sseek>:
 800db42:	b510      	push	{r4, lr}
 800db44:	460c      	mov	r4, r1
 800db46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db4a:	f000 f843 	bl	800dbd4 <_lseek_r>
 800db4e:	1c43      	adds	r3, r0, #1
 800db50:	89a3      	ldrh	r3, [r4, #12]
 800db52:	bf15      	itete	ne
 800db54:	6560      	strne	r0, [r4, #84]	; 0x54
 800db56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db5e:	81a3      	strheq	r3, [r4, #12]
 800db60:	bf18      	it	ne
 800db62:	81a3      	strhne	r3, [r4, #12]
 800db64:	bd10      	pop	{r4, pc}

0800db66 <__sclose>:
 800db66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db6a:	f000 b801 	b.w	800db70 <_close_r>
	...

0800db70 <_close_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	4d06      	ldr	r5, [pc, #24]	; (800db8c <_close_r+0x1c>)
 800db74:	2300      	movs	r3, #0
 800db76:	4604      	mov	r4, r0
 800db78:	4608      	mov	r0, r1
 800db7a:	602b      	str	r3, [r5, #0]
 800db7c:	f7f4 f835 	bl	8001bea <_close>
 800db80:	1c43      	adds	r3, r0, #1
 800db82:	d102      	bne.n	800db8a <_close_r+0x1a>
 800db84:	682b      	ldr	r3, [r5, #0]
 800db86:	b103      	cbz	r3, 800db8a <_close_r+0x1a>
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	bd38      	pop	{r3, r4, r5, pc}
 800db8c:	20014730 	.word	0x20014730

0800db90 <_fstat_r>:
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4d07      	ldr	r5, [pc, #28]	; (800dbb0 <_fstat_r+0x20>)
 800db94:	2300      	movs	r3, #0
 800db96:	4604      	mov	r4, r0
 800db98:	4608      	mov	r0, r1
 800db9a:	4611      	mov	r1, r2
 800db9c:	602b      	str	r3, [r5, #0]
 800db9e:	f7f4 f830 	bl	8001c02 <_fstat>
 800dba2:	1c43      	adds	r3, r0, #1
 800dba4:	d102      	bne.n	800dbac <_fstat_r+0x1c>
 800dba6:	682b      	ldr	r3, [r5, #0]
 800dba8:	b103      	cbz	r3, 800dbac <_fstat_r+0x1c>
 800dbaa:	6023      	str	r3, [r4, #0]
 800dbac:	bd38      	pop	{r3, r4, r5, pc}
 800dbae:	bf00      	nop
 800dbb0:	20014730 	.word	0x20014730

0800dbb4 <_isatty_r>:
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	4d06      	ldr	r5, [pc, #24]	; (800dbd0 <_isatty_r+0x1c>)
 800dbb8:	2300      	movs	r3, #0
 800dbba:	4604      	mov	r4, r0
 800dbbc:	4608      	mov	r0, r1
 800dbbe:	602b      	str	r3, [r5, #0]
 800dbc0:	f7f4 f82f 	bl	8001c22 <_isatty>
 800dbc4:	1c43      	adds	r3, r0, #1
 800dbc6:	d102      	bne.n	800dbce <_isatty_r+0x1a>
 800dbc8:	682b      	ldr	r3, [r5, #0]
 800dbca:	b103      	cbz	r3, 800dbce <_isatty_r+0x1a>
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	bd38      	pop	{r3, r4, r5, pc}
 800dbd0:	20014730 	.word	0x20014730

0800dbd4 <_lseek_r>:
 800dbd4:	b538      	push	{r3, r4, r5, lr}
 800dbd6:	4d07      	ldr	r5, [pc, #28]	; (800dbf4 <_lseek_r+0x20>)
 800dbd8:	4604      	mov	r4, r0
 800dbda:	4608      	mov	r0, r1
 800dbdc:	4611      	mov	r1, r2
 800dbde:	2200      	movs	r2, #0
 800dbe0:	602a      	str	r2, [r5, #0]
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	f7f4 f828 	bl	8001c38 <_lseek>
 800dbe8:	1c43      	adds	r3, r0, #1
 800dbea:	d102      	bne.n	800dbf2 <_lseek_r+0x1e>
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	b103      	cbz	r3, 800dbf2 <_lseek_r+0x1e>
 800dbf0:	6023      	str	r3, [r4, #0]
 800dbf2:	bd38      	pop	{r3, r4, r5, pc}
 800dbf4:	20014730 	.word	0x20014730

0800dbf8 <_read_r>:
 800dbf8:	b538      	push	{r3, r4, r5, lr}
 800dbfa:	4d07      	ldr	r5, [pc, #28]	; (800dc18 <_read_r+0x20>)
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	4608      	mov	r0, r1
 800dc00:	4611      	mov	r1, r2
 800dc02:	2200      	movs	r2, #0
 800dc04:	602a      	str	r2, [r5, #0]
 800dc06:	461a      	mov	r2, r3
 800dc08:	f7f3 ffd2 	bl	8001bb0 <_read>
 800dc0c:	1c43      	adds	r3, r0, #1
 800dc0e:	d102      	bne.n	800dc16 <_read_r+0x1e>
 800dc10:	682b      	ldr	r3, [r5, #0]
 800dc12:	b103      	cbz	r3, 800dc16 <_read_r+0x1e>
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	bd38      	pop	{r3, r4, r5, pc}
 800dc18:	20014730 	.word	0x20014730

0800dc1c <_sbrk>:
 800dc1c:	4a04      	ldr	r2, [pc, #16]	; (800dc30 <_sbrk+0x14>)
 800dc1e:	6811      	ldr	r1, [r2, #0]
 800dc20:	4603      	mov	r3, r0
 800dc22:	b909      	cbnz	r1, 800dc28 <_sbrk+0xc>
 800dc24:	4903      	ldr	r1, [pc, #12]	; (800dc34 <_sbrk+0x18>)
 800dc26:	6011      	str	r1, [r2, #0]
 800dc28:	6810      	ldr	r0, [r2, #0]
 800dc2a:	4403      	add	r3, r0
 800dc2c:	6013      	str	r3, [r2, #0]
 800dc2e:	4770      	bx	lr
 800dc30:	20014738 	.word	0x20014738
 800dc34:	20014740 	.word	0x20014740

0800dc38 <_init>:
 800dc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3a:	bf00      	nop
 800dc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc3e:	bc08      	pop	{r3}
 800dc40:	469e      	mov	lr, r3
 800dc42:	4770      	bx	lr

0800dc44 <_fini>:
 800dc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc46:	bf00      	nop
 800dc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc4a:	bc08      	pop	{r3}
 800dc4c:	469e      	mov	lr, r3
 800dc4e:	4770      	bx	lr
